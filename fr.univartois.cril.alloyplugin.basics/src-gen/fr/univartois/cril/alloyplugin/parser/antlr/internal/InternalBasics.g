/*
* generated by Xtext
*/
grammar InternalBasics;

options {
	superClass=AbstractInternalAntlrParser;
	backtrack=true;
	
}

@lexer::header {
package fr.univartois.cril.alloyplugin.parser.antlr.internal;

// Hack: Use our own Lexer superclass by means of import. 
// Currently there is no other way to specify the superclass for the lexer.
import org.eclipse.xtext.parser.antlr.Lexer;
}

@parser::header {
package fr.univartois.cril.alloyplugin.parser.antlr.internal; 

import java.io.InputStream;
import org.eclipse.xtext.*;
import org.eclipse.xtext.parser.*;
import org.eclipse.xtext.parser.impl.*;
import org.eclipse.xtext.parsetree.*;
import org.eclipse.emf.ecore.util.EcoreUtil;
import org.eclipse.emf.ecore.EObject;
import org.eclipse.xtext.parser.antlr.AbstractInternalAntlrParser;
import org.eclipse.xtext.parser.antlr.XtextTokenStream;
import org.eclipse.xtext.parser.antlr.XtextTokenStream.HiddenTokens;
import org.eclipse.xtext.parser.antlr.AntlrDatatypeRuleToken;
import org.eclipse.xtext.conversion.ValueConverterException;
import fr.univartois.cril.alloyplugin.services.BasicsGrammarAccess;

}

@parser::members {
 
 	private BasicsGrammarAccess grammarAccess;
 	
    public InternalBasicsParser(TokenStream input, IAstFactory factory, BasicsGrammarAccess grammarAccess) {
        this(input);
        this.factory = factory;
        registerRules(grammarAccess.getGrammar());
        this.grammarAccess = grammarAccess;
    }
    
    @Override
    protected InputStream getTokenFile() {
    	ClassLoader classLoader = getClass().getClassLoader();
    	return classLoader.getResourceAsStream("fr/univartois/cril/alloyplugin/parser/antlr/internal/InternalBasics.tokens");
    }
    
    @Override
    protected String getFirstRuleName() {
    	return "Specification";	
   	} 
}

@rulecatch { 
    catch (RecognitionException re) { 
        recover(input,re); 
        appendSkippedTokens();
    } 
}




// Entry rule entryRuleSpecification
entryRuleSpecification returns [EObject current=null] :
	{ currentNode = createCompositeNode(grammarAccess.getSpecificationRule(), currentNode); }
	 iv_ruleSpecification=ruleSpecification 
	 { $current=$iv_ruleSpecification.current; } 
	 EOF 
;

// Rule Specification
ruleSpecification returns [EObject current=null] 
    @init { EObject temp=null; setCurrentLookahead(); resetLookahead(); 
    }
    @after { resetLookahead(); 
    	lastConsumedNode = currentNode;
    }:
((	
	
	    
	    { 
	        currentNode=createCompositeNode(grammarAccess.getSpecificationAccess().getModuleModuleParserRuleCall_0_0(), currentNode); 
	    }
	    lv_module_0=ruleModule 
	    {
	        if ($current==null) {
	            $current = factory.create(grammarAccess.getSpecificationRule().getType().getClassifier());
	            associateNodeWithAstElement(currentNode.getParent(), $current);
	        }
	        
	        try {
	       		set($current, "module", lv_module_0, "Module", currentNode);
	        } catch (ValueConverterException vce) {
				handleValueConverterException(vce);
	        }
	        currentNode = currentNode.getParent();
	    }
	
)?(	
	
	    
	    { 
	        currentNode=createCompositeNode(grammarAccess.getSpecificationAccess().getOpenOpenParserRuleCall_1_0(), currentNode); 
	    }
	    lv_open_1=ruleOpen 
	    {
	        if ($current==null) {
	            $current = factory.create(grammarAccess.getSpecificationRule().getType().getClassifier());
	            associateNodeWithAstElement(currentNode.getParent(), $current);
	        }
	        
	        try {
	       		add($current, "open", lv_open_1, "Open", currentNode);
	        } catch (ValueConverterException vce) {
				handleValueConverterException(vce);
	        }
	        currentNode = currentNode.getParent();
	    }
	
)*(	
	
	    
	    { 
	        currentNode=createCompositeNode(grammarAccess.getSpecificationAccess().getParagraphParagraphParserRuleCall_2_0(), currentNode); 
	    }
	    lv_paragraph_2=ruleParagraph 
	    {
	        if ($current==null) {
	            $current = factory.create(grammarAccess.getSpecificationRule().getType().getClassifier());
	            associateNodeWithAstElement(currentNode.getParent(), $current);
	        }
	        
	        try {
	       		add($current, "paragraph", lv_paragraph_2, "Paragraph", currentNode);
	        } catch (ValueConverterException vce) {
				handleValueConverterException(vce);
	        }
	        currentNode = currentNode.getParent();
	    }
	
)*);





// Entry rule entryRuleModule
entryRuleModule returns [EObject current=null] :
	{ currentNode = createCompositeNode(grammarAccess.getModuleRule(), currentNode); }
	 iv_ruleModule=ruleModule 
	 { $current=$iv_ruleModule.current; } 
	 EOF 
;

// Rule Module
ruleModule returns [EObject current=null] 
    @init { EObject temp=null; setCurrentLookahead(); resetLookahead(); 
    }
    @after { resetLookahead(); 
    	lastConsumedNode = currentNode;
    }:
('module' 
    {
        createLeafNode(grammarAccess.getModuleAccess().getModuleKeyword_0(), null); 
    }
(	
	
	    
	    { 
	        currentNode=createCompositeNode(grammarAccess.getModuleAccess().getModuleNameNameParserRuleCall_1_0(), currentNode); 
	    }
	    lv_moduleName_1=ruleName 
	    {
	        if ($current==null) {
	            $current = factory.create(grammarAccess.getModuleRule().getType().getClassifier());
	            associateNodeWithAstElement(currentNode.getParent(), $current);
	        }
	        
	        try {
	       		set($current, "moduleName", lv_moduleName_1, "Name", currentNode);
	        } catch (ValueConverterException vce) {
				handleValueConverterException(vce);
	        }
	        currentNode = currentNode.getParent();
	    }
	
)('[' 
    {
        createLeafNode(grammarAccess.getModuleAccess().getLeftSquareBracketKeyword_2_0(), null); 
    }
('exactly' 
    {
        createLeafNode(grammarAccess.getModuleAccess().getExactlyKeyword_2_1(), null); 
    }
)?(	
	
	    
	    { 
	        currentNode=createCompositeNode(grammarAccess.getModuleAccess().getSuiteNameParserRuleCall_2_2_0(), currentNode); 
	    }
	    lv_suite_4=ruleName 
	    {
	        if ($current==null) {
	            $current = factory.create(grammarAccess.getModuleRule().getType().getClassifier());
	            associateNodeWithAstElement(currentNode.getParent(), $current);
	        }
	        
	        try {
	       		set($current, "suite", lv_suite_4, "Name", currentNode);
	        } catch (ValueConverterException vce) {
				handleValueConverterException(vce);
	        }
	        currentNode = currentNode.getParent();
	    }
	
)(',' 
    {
        createLeafNode(grammarAccess.getModuleAccess().getCommaKeyword_2_3_0(), null); 
    }
('exactly' 
    {
        createLeafNode(grammarAccess.getModuleAccess().getExactlyKeyword_2_3_1(), null); 
    }
)?RULE_INT
    { 
    createLeafNode(grammarAccess.getModuleAccess().getINTTerminalRuleCall_2_3_2(), null); 
    }
)*']' 
    {
        createLeafNode(grammarAccess.getModuleAccess().getRightSquareBracketKeyword_2_4(), null); 
    }
)?);





// Entry rule entryRuleOpen
entryRuleOpen returns [EObject current=null] :
	{ currentNode = createCompositeNode(grammarAccess.getOpenRule(), currentNode); }
	 iv_ruleOpen=ruleOpen 
	 { $current=$iv_ruleOpen.current; } 
	 EOF 
;

// Rule Open
ruleOpen returns [EObject current=null] 
    @init { EObject temp=null; setCurrentLookahead(); resetLookahead(); 
    }
    @after { resetLookahead(); 
    	lastConsumedNode = currentNode;
    }:
(('private' 
    {
        createLeafNode(grammarAccess.getOpenAccess().getPrivateKeyword_0(), null); 
    }
)?'open' 
    {
        createLeafNode(grammarAccess.getOpenAccess().getOpenKeyword_1(), null); 
    }
(	
	
	    
	    { 
	        currentNode=createCompositeNode(grammarAccess.getOpenAccess().getNameNameParserRuleCall_2_0(), currentNode); 
	    }
	    lv_name_2=ruleName 
	    {
	        if ($current==null) {
	            $current = factory.create(grammarAccess.getOpenRule().getType().getClassifier());
	            associateNodeWithAstElement(currentNode.getParent(), $current);
	        }
	        
	        try {
	       		set($current, "name", lv_name_2, "Name", currentNode);
	        } catch (ValueConverterException vce) {
				handleValueConverterException(vce);
	        }
	        currentNode = currentNode.getParent();
	    }
	
)('[' 
    {
        createLeafNode(grammarAccess.getOpenAccess().getLeftSquareBracketKeyword_3_0(), null); 
    }
(	
	
	    
	    { 
	        currentNode=createCompositeNode(grammarAccess.getOpenAccess().getRefRefParserRuleCall_3_1_0(), currentNode); 
	    }
	    lv_ref_4=ruleRef 
	    {
	        if ($current==null) {
	            $current = factory.create(grammarAccess.getOpenRule().getType().getClassifier());
	            associateNodeWithAstElement(currentNode.getParent(), $current);
	        }
	        
	        try {
	       		set($current, "ref", lv_ref_4, "Ref", currentNode);
	        } catch (ValueConverterException vce) {
				handleValueConverterException(vce);
	        }
	        currentNode = currentNode.getParent();
	    }
	
)(',' 
    {
        createLeafNode(grammarAccess.getOpenAccess().getCommaKeyword_3_2_0(), null); 
    }
(	
	
	    
	    { 
	        currentNode=createCompositeNode(grammarAccess.getOpenAccess().getRef2RefParserRuleCall_3_2_1_0(), currentNode); 
	    }
	    lv_ref2_6=ruleRef 
	    {
	        if ($current==null) {
	            $current = factory.create(grammarAccess.getOpenRule().getType().getClassifier());
	            associateNodeWithAstElement(currentNode.getParent(), $current);
	        }
	        
	        try {
	       		add($current, "ref2", lv_ref2_6, "Ref", currentNode);
	        } catch (ValueConverterException vce) {
				handleValueConverterException(vce);
	        }
	        currentNode = currentNode.getParent();
	    }
	
))*']' 
    {
        createLeafNode(grammarAccess.getOpenAccess().getRightSquareBracketKeyword_3_3(), null); 
    }
)?('as' 
    {
        createLeafNode(grammarAccess.getOpenAccess().getAsKeyword_4_0(), null); 
    }
(	
	
	    
	    { 
	        currentNode=createCompositeNode(grammarAccess.getOpenAccess().getName2NameParserRuleCall_4_1_0(), currentNode); 
	    }
	    lv_name2_9=ruleName 
	    {
	        if ($current==null) {
	            $current = factory.create(grammarAccess.getOpenRule().getType().getClassifier());
	            associateNodeWithAstElement(currentNode.getParent(), $current);
	        }
	        
	        try {
	       		set($current, "name2", lv_name2_9, "Name", currentNode);
	        } catch (ValueConverterException vce) {
				handleValueConverterException(vce);
	        }
	        currentNode = currentNode.getParent();
	    }
	
))?);





// Entry rule entryRuleParagraph
entryRuleParagraph returns [EObject current=null] :
	{ currentNode = createCompositeNode(grammarAccess.getParagraphRule(), currentNode); }
	 iv_ruleParagraph=ruleParagraph 
	 { $current=$iv_ruleParagraph.current; } 
	 EOF 
;

// Rule Paragraph
ruleParagraph returns [EObject current=null] 
    @init { EObject temp=null; setCurrentLookahead(); resetLookahead(); 
    }
    @after { resetLookahead(); 
    	lastConsumedNode = currentNode;
    }:
(
    { 
        currentNode=createCompositeNode(grammarAccess.getParagraphAccess().getFactDeclParserRuleCall_0(), currentNode); 
    }
    this_FactDecl_0=ruleFactDecl
    { 
        $current = $this_FactDecl_0.current; 
        currentNode = currentNode.getParent();
    }

    |
    { 
        currentNode=createCompositeNode(grammarAccess.getParagraphAccess().getAssertDeclParserRuleCall_1(), currentNode); 
    }
    this_AssertDecl_1=ruleAssertDecl
    { 
        $current = $this_AssertDecl_1.current; 
        currentNode = currentNode.getParent();
    }

    |
    { 
        currentNode=createCompositeNode(grammarAccess.getParagraphAccess().getFunDeclParserRuleCall_2(), currentNode); 
    }
    this_FunDecl_2=ruleFunDecl
    { 
        $current = $this_FunDecl_2.current; 
        currentNode = currentNode.getParent();
    }

    |
    { 
        currentNode=createCompositeNode(grammarAccess.getParagraphAccess().getPredDeclParserRuleCall_3(), currentNode); 
    }
    this_PredDecl_3=rulePredDecl
    { 
        $current = $this_PredDecl_3.current; 
        currentNode = currentNode.getParent();
    }

    |
    { 
        currentNode=createCompositeNode(grammarAccess.getParagraphAccess().getRunDeclParserRuleCall_4(), currentNode); 
    }
    this_RunDecl_4=ruleRunDecl
    { 
        $current = $this_RunDecl_4.current; 
        currentNode = currentNode.getParent();
    }

    |
    { 
        currentNode=createCompositeNode(grammarAccess.getParagraphAccess().getCheckDeclParserRuleCall_5(), currentNode); 
    }
    this_CheckDecl_5=ruleCheckDecl
    { 
        $current = $this_CheckDecl_5.current; 
        currentNode = currentNode.getParent();
    }

    |
    { 
        currentNode=createCompositeNode(grammarAccess.getParagraphAccess().getEnumDeclParserRuleCall_6(), currentNode); 
    }
    this_EnumDecl_6=ruleEnumDecl
    { 
        $current = $this_EnumDecl_6.current; 
        currentNode = currentNode.getParent();
    }

    |
    { 
        currentNode=createCompositeNode(grammarAccess.getParagraphAccess().getSigDeclParserRuleCall_7(), currentNode); 
    }
    this_SigDecl_7=ruleSigDecl
    { 
        $current = $this_SigDecl_7.current; 
        currentNode = currentNode.getParent();
    }
);





// Entry rule entryRuleFactDecl
entryRuleFactDecl returns [EObject current=null] :
	{ currentNode = createCompositeNode(grammarAccess.getFactDeclRule(), currentNode); }
	 iv_ruleFactDecl=ruleFactDecl 
	 { $current=$iv_ruleFactDecl.current; } 
	 EOF 
;

// Rule FactDecl
ruleFactDecl returns [EObject current=null] 
    @init { EObject temp=null; setCurrentLookahead(); resetLookahead(); 
    }
    @after { resetLookahead(); 
    	lastConsumedNode = currentNode;
    }:
('fact' 
    {
        createLeafNode(grammarAccess.getFactDeclAccess().getFactKeyword_0(), null); 
    }
(	
	
	    
	    { 
	        currentNode=createCompositeNode(grammarAccess.getFactDeclAccess().getFactNameNameParserRuleCall_1_0(), currentNode); 
	    }
	    lv_factName_1=ruleName 
	    {
	        if ($current==null) {
	            $current = factory.create(grammarAccess.getFactDeclRule().getType().getClassifier());
	            associateNodeWithAstElement(currentNode.getParent(), $current);
	        }
	        
	        try {
	       		set($current, "factName", lv_factName_1, "Name", currentNode);
	        } catch (ValueConverterException vce) {
				handleValueConverterException(vce);
	        }
	        currentNode = currentNode.getParent();
	    }
	
)?(	
	
	    
	    { 
	        currentNode=createCompositeNode(grammarAccess.getFactDeclAccess().getBBlockBisParserRuleCall_2_0(), currentNode); 
	    }
	    lv_b_2=ruleBlockBis 
	    {
	        if ($current==null) {
	            $current = factory.create(grammarAccess.getFactDeclRule().getType().getClassifier());
	            associateNodeWithAstElement(currentNode.getParent(), $current);
	        }
	        
	        try {
	       		set($current, "b", lv_b_2, "BlockBis", currentNode);
	        } catch (ValueConverterException vce) {
				handleValueConverterException(vce);
	        }
	        currentNode = currentNode.getParent();
	    }
	
));





// Entry rule entryRuleAssertDecl
entryRuleAssertDecl returns [EObject current=null] :
	{ currentNode = createCompositeNode(grammarAccess.getAssertDeclRule(), currentNode); }
	 iv_ruleAssertDecl=ruleAssertDecl 
	 { $current=$iv_ruleAssertDecl.current; } 
	 EOF 
;

// Rule AssertDecl
ruleAssertDecl returns [EObject current=null] 
    @init { EObject temp=null; setCurrentLookahead(); resetLookahead(); 
    }
    @after { resetLookahead(); 
    	lastConsumedNode = currentNode;
    }:
('assert' 
    {
        createLeafNode(grammarAccess.getAssertDeclAccess().getAssertKeyword_0(), null); 
    }
(	
	
	    
	    { 
	        currentNode=createCompositeNode(grammarAccess.getAssertDeclAccess().getAssertNameNameParserRuleCall_1_0(), currentNode); 
	    }
	    lv_assertName_1=ruleName 
	    {
	        if ($current==null) {
	            $current = factory.create(grammarAccess.getAssertDeclRule().getType().getClassifier());
	            associateNodeWithAstElement(currentNode.getParent(), $current);
	        }
	        
	        try {
	       		set($current, "assertName", lv_assertName_1, "Name", currentNode);
	        } catch (ValueConverterException vce) {
				handleValueConverterException(vce);
	        }
	        currentNode = currentNode.getParent();
	    }
	
)?(	
	
	    
	    { 
	        currentNode=createCompositeNode(grammarAccess.getAssertDeclAccess().getBBlockBisParserRuleCall_2_0(), currentNode); 
	    }
	    lv_b_2=ruleBlockBis 
	    {
	        if ($current==null) {
	            $current = factory.create(grammarAccess.getAssertDeclRule().getType().getClassifier());
	            associateNodeWithAstElement(currentNode.getParent(), $current);
	        }
	        
	        try {
	       		set($current, "b", lv_b_2, "BlockBis", currentNode);
	        } catch (ValueConverterException vce) {
				handleValueConverterException(vce);
	        }
	        currentNode = currentNode.getParent();
	    }
	
));





// Entry rule entryRuleFunDecl
entryRuleFunDecl returns [EObject current=null] :
	{ currentNode = createCompositeNode(grammarAccess.getFunDeclRule(), currentNode); }
	 iv_ruleFunDecl=ruleFunDecl 
	 { $current=$iv_ruleFunDecl.current; } 
	 EOF 
;

// Rule FunDecl
ruleFunDecl returns [EObject current=null] 
    @init { EObject temp=null; setCurrentLookahead(); resetLookahead(); 
    }
    @after { resetLookahead(); 
    	lastConsumedNode = currentNode;
    }:
(('private' 
    {
        createLeafNode(grammarAccess.getFunDeclAccess().getPrivateKeyword_0(), null); 
    }
)?'fun' 
    {
        createLeafNode(grammarAccess.getFunDeclAccess().getFunKeyword_1(), null); 
    }
((	
	
	    
	    { 
	        currentNode=createCompositeNode(grammarAccess.getFunDeclAccess().getRefRefParserRuleCall_2_0_0(), currentNode); 
	    }
	    lv_ref_2=ruleRef 
	    {
	        if ($current==null) {
	            $current = factory.create(grammarAccess.getFunDeclRule().getType().getClassifier());
	            associateNodeWithAstElement(currentNode.getParent(), $current);
	        }
	        
	        try {
	       		set($current, "ref", lv_ref_2, "Ref", currentNode);
	        } catch (ValueConverterException vce) {
				handleValueConverterException(vce);
	        }
	        currentNode = currentNode.getParent();
	    }
	
)'.' 
    {
        createLeafNode(grammarAccess.getFunDeclAccess().getFullStopKeyword_2_1(), null); 
    }
)?(	
	
	    
	    { 
	        currentNode=createCompositeNode(grammarAccess.getFunDeclAccess().getFunNameNameParserRuleCall_3_0(), currentNode); 
	    }
	    lv_funName_4=ruleName 
	    {
	        if ($current==null) {
	            $current = factory.create(grammarAccess.getFunDeclRule().getType().getClassifier());
	            associateNodeWithAstElement(currentNode.getParent(), $current);
	        }
	        
	        try {
	       		set($current, "funName", lv_funName_4, "Name", currentNode);
	        } catch (ValueConverterException vce) {
				handleValueConverterException(vce);
	        }
	        currentNode = currentNode.getParent();
	    }
	
)(('[' 
    {
        createLeafNode(grammarAccess.getFunDeclAccess().getLeftSquareBracketKeyword_4_0_0(), null); 
    }
((	
	
	    
	    { 
	        currentNode=createCompositeNode(grammarAccess.getFunDeclAccess().getDeclDeclParserRuleCall_4_0_1_0_0(), currentNode); 
	    }
	    lv_decl_6=ruleDecl 
	    {
	        if ($current==null) {
	            $current = factory.create(grammarAccess.getFunDeclRule().getType().getClassifier());
	            associateNodeWithAstElement(currentNode.getParent(), $current);
	        }
	        
	        try {
	       		set($current, "decl", lv_decl_6, "Decl", currentNode);
	        } catch (ValueConverterException vce) {
				handleValueConverterException(vce);
	        }
	        currentNode = currentNode.getParent();
	    }
	
)(',' 
    {
        createLeafNode(grammarAccess.getFunDeclAccess().getCommaKeyword_4_0_1_1_0(), null); 
    }
(	
	
	    
	    { 
	        currentNode=createCompositeNode(grammarAccess.getFunDeclAccess().getDecl2DeclParserRuleCall_4_0_1_1_1_0(), currentNode); 
	    }
	    lv_decl2_8=ruleDecl 
	    {
	        if ($current==null) {
	            $current = factory.create(grammarAccess.getFunDeclRule().getType().getClassifier());
	            associateNodeWithAstElement(currentNode.getParent(), $current);
	        }
	        
	        try {
	       		add($current, "decl2", lv_decl2_8, "Decl", currentNode);
	        } catch (ValueConverterException vce) {
				handleValueConverterException(vce);
	        }
	        currentNode = currentNode.getParent();
	    }
	
))*)?']' 
    {
        createLeafNode(grammarAccess.getFunDeclAccess().getRightSquareBracketKeyword_4_0_2(), null); 
    }
)
    |('(' 
    {
        createLeafNode(grammarAccess.getFunDeclAccess().getLeftParenthesisKeyword_4_1_0(), null); 
    }
((	
	
	    
	    { 
	        currentNode=createCompositeNode(grammarAccess.getFunDeclAccess().getDeclDeclParserRuleCall_4_1_1_0_0(), currentNode); 
	    }
	    lv_decl_11=ruleDecl 
	    {
	        if ($current==null) {
	            $current = factory.create(grammarAccess.getFunDeclRule().getType().getClassifier());
	            associateNodeWithAstElement(currentNode.getParent(), $current);
	        }
	        
	        try {
	       		set($current, "decl", lv_decl_11, "Decl", currentNode);
	        } catch (ValueConverterException vce) {
				handleValueConverterException(vce);
	        }
	        currentNode = currentNode.getParent();
	    }
	
)(',' 
    {
        createLeafNode(grammarAccess.getFunDeclAccess().getCommaKeyword_4_1_1_1_0(), null); 
    }
(	
	
	    
	    { 
	        currentNode=createCompositeNode(grammarAccess.getFunDeclAccess().getDecl2DeclParserRuleCall_4_1_1_1_1_0(), currentNode); 
	    }
	    lv_decl2_13=ruleDecl 
	    {
	        if ($current==null) {
	            $current = factory.create(grammarAccess.getFunDeclRule().getType().getClassifier());
	            associateNodeWithAstElement(currentNode.getParent(), $current);
	        }
	        
	        try {
	       		add($current, "decl2", lv_decl2_13, "Decl", currentNode);
	        } catch (ValueConverterException vce) {
				handleValueConverterException(vce);
	        }
	        currentNode = currentNode.getParent();
	    }
	
))*)?')' 
    {
        createLeafNode(grammarAccess.getFunDeclAccess().getRightParenthesisKeyword_4_1_2(), null); 
    }
))':' 
    {
        createLeafNode(grammarAccess.getFunDeclAccess().getColonKeyword_5(), null); 
    }
(	
	
	    
	    { 
	        currentNode=createCompositeNode(grammarAccess.getFunDeclAccess().getExprExpressionParserRuleCall_6_0(), currentNode); 
	    }
	    lv_expr_16=ruleExpression 
	    {
	        if ($current==null) {
	            $current = factory.create(grammarAccess.getFunDeclRule().getType().getClassifier());
	            associateNodeWithAstElement(currentNode.getParent(), $current);
	        }
	        
	        try {
	       		set($current, "expr", lv_expr_16, "Expression", currentNode);
	        } catch (ValueConverterException vce) {
				handleValueConverterException(vce);
	        }
	        currentNode = currentNode.getParent();
	    }
	
)(	
	
	    
	    { 
	        currentNode=createCompositeNode(grammarAccess.getFunDeclAccess().getBBlockBisParserRuleCall_7_0(), currentNode); 
	    }
	    lv_b_17=ruleBlockBis 
	    {
	        if ($current==null) {
	            $current = factory.create(grammarAccess.getFunDeclRule().getType().getClassifier());
	            associateNodeWithAstElement(currentNode.getParent(), $current);
	        }
	        
	        try {
	       		set($current, "b", lv_b_17, "BlockBis", currentNode);
	        } catch (ValueConverterException vce) {
				handleValueConverterException(vce);
	        }
	        currentNode = currentNode.getParent();
	    }
	
));





// Entry rule entryRulePredDecl
entryRulePredDecl returns [EObject current=null] :
	{ currentNode = createCompositeNode(grammarAccess.getPredDeclRule(), currentNode); }
	 iv_rulePredDecl=rulePredDecl 
	 { $current=$iv_rulePredDecl.current; } 
	 EOF 
;

// Rule PredDecl
rulePredDecl returns [EObject current=null] 
    @init { EObject temp=null; setCurrentLookahead(); resetLookahead(); 
    }
    @after { resetLookahead(); 
    	lastConsumedNode = currentNode;
    }:
(('private' 
    {
        createLeafNode(grammarAccess.getPredDeclAccess().getPrivateKeyword_0(), null); 
    }
)?(	
	
	    lv_pred_1='pred' 
    {
        createLeafNode(grammarAccess.getPredDeclAccess().getPredPredKeyword_1_0(), "pred"); 
    }

 
	    {
	        if ($current==null) {
	            $current = factory.create(grammarAccess.getPredDeclRule().getType().getClassifier());
	            associateNodeWithAstElement(currentNode, $current);
	        }
	        
	        try {
	       		set($current, "pred", /* lv_pred_1 */ input.LT(-1), "pred", lastConsumedNode);
	        } catch (ValueConverterException vce) {
				handleValueConverterException(vce);
	        }
	    }
	
)((	
	
	    
	    { 
	        currentNode=createCompositeNode(grammarAccess.getPredDeclAccess().getRefRefParserRuleCall_2_0_0(), currentNode); 
	    }
	    lv_ref_2=ruleRef 
	    {
	        if ($current==null) {
	            $current = factory.create(grammarAccess.getPredDeclRule().getType().getClassifier());
	            associateNodeWithAstElement(currentNode.getParent(), $current);
	        }
	        
	        try {
	       		set($current, "ref", lv_ref_2, "Ref", currentNode);
	        } catch (ValueConverterException vce) {
				handleValueConverterException(vce);
	        }
	        currentNode = currentNode.getParent();
	    }
	
)'.' 
    {
        createLeafNode(grammarAccess.getPredDeclAccess().getFullStopKeyword_2_1(), null); 
    }
)?(	
	
	    
	    { 
	        currentNode=createCompositeNode(grammarAccess.getPredDeclAccess().getPredNameNameParserRuleCall_3_0(), currentNode); 
	    }
	    lv_predName_4=ruleName 
	    {
	        if ($current==null) {
	            $current = factory.create(grammarAccess.getPredDeclRule().getType().getClassifier());
	            associateNodeWithAstElement(currentNode.getParent(), $current);
	        }
	        
	        try {
	       		set($current, "predName", lv_predName_4, "Name", currentNode);
	        } catch (ValueConverterException vce) {
				handleValueConverterException(vce);
	        }
	        currentNode = currentNode.getParent();
	    }
	
)(('[' 
    {
        createLeafNode(grammarAccess.getPredDeclAccess().getLeftSquareBracketKeyword_4_0_0(), null); 
    }
((	
	
	    
	    { 
	        currentNode=createCompositeNode(grammarAccess.getPredDeclAccess().getDeclDeclParserRuleCall_4_0_1_0_0(), currentNode); 
	    }
	    lv_decl_6=ruleDecl 
	    {
	        if ($current==null) {
	            $current = factory.create(grammarAccess.getPredDeclRule().getType().getClassifier());
	            associateNodeWithAstElement(currentNode.getParent(), $current);
	        }
	        
	        try {
	       		set($current, "decl", lv_decl_6, "Decl", currentNode);
	        } catch (ValueConverterException vce) {
				handleValueConverterException(vce);
	        }
	        currentNode = currentNode.getParent();
	    }
	
)(',' 
    {
        createLeafNode(grammarAccess.getPredDeclAccess().getCommaKeyword_4_0_1_1_0(), null); 
    }
(	
	
	    
	    { 
	        currentNode=createCompositeNode(grammarAccess.getPredDeclAccess().getDecl2DeclParserRuleCall_4_0_1_1_1_0(), currentNode); 
	    }
	    lv_decl2_8=ruleDecl 
	    {
	        if ($current==null) {
	            $current = factory.create(grammarAccess.getPredDeclRule().getType().getClassifier());
	            associateNodeWithAstElement(currentNode.getParent(), $current);
	        }
	        
	        try {
	       		add($current, "decl2", lv_decl2_8, "Decl", currentNode);
	        } catch (ValueConverterException vce) {
				handleValueConverterException(vce);
	        }
	        currentNode = currentNode.getParent();
	    }
	
))*)?']' 
    {
        createLeafNode(grammarAccess.getPredDeclAccess().getRightSquareBracketKeyword_4_0_2(), null); 
    }
)
    |('(' 
    {
        createLeafNode(grammarAccess.getPredDeclAccess().getLeftParenthesisKeyword_4_1_0(), null); 
    }
((	
	
	    
	    { 
	        currentNode=createCompositeNode(grammarAccess.getPredDeclAccess().getDeclDeclParserRuleCall_4_1_1_0_0(), currentNode); 
	    }
	    lv_decl_11=ruleDecl 
	    {
	        if ($current==null) {
	            $current = factory.create(grammarAccess.getPredDeclRule().getType().getClassifier());
	            associateNodeWithAstElement(currentNode.getParent(), $current);
	        }
	        
	        try {
	       		set($current, "decl", lv_decl_11, "Decl", currentNode);
	        } catch (ValueConverterException vce) {
				handleValueConverterException(vce);
	        }
	        currentNode = currentNode.getParent();
	    }
	
)(',' 
    {
        createLeafNode(grammarAccess.getPredDeclAccess().getCommaKeyword_4_1_1_1_0(), null); 
    }
(	
	
	    
	    { 
	        currentNode=createCompositeNode(grammarAccess.getPredDeclAccess().getDecl2DeclParserRuleCall_4_1_1_1_1_0(), currentNode); 
	    }
	    lv_decl2_13=ruleDecl 
	    {
	        if ($current==null) {
	            $current = factory.create(grammarAccess.getPredDeclRule().getType().getClassifier());
	            associateNodeWithAstElement(currentNode.getParent(), $current);
	        }
	        
	        try {
	       		add($current, "decl2", lv_decl2_13, "Decl", currentNode);
	        } catch (ValueConverterException vce) {
				handleValueConverterException(vce);
	        }
	        currentNode = currentNode.getParent();
	    }
	
))*)?')' 
    {
        createLeafNode(grammarAccess.getPredDeclAccess().getRightParenthesisKeyword_4_1_2(), null); 
    }
))?(	
	
	    
	    { 
	        currentNode=createCompositeNode(grammarAccess.getPredDeclAccess().getBBlockBisParserRuleCall_5_0(), currentNode); 
	    }
	    lv_b_15=ruleBlockBis 
	    {
	        if ($current==null) {
	            $current = factory.create(grammarAccess.getPredDeclRule().getType().getClassifier());
	            associateNodeWithAstElement(currentNode.getParent(), $current);
	        }
	        
	        try {
	       		set($current, "b", lv_b_15, "BlockBis", currentNode);
	        } catch (ValueConverterException vce) {
				handleValueConverterException(vce);
	        }
	        currentNode = currentNode.getParent();
	    }
	
));





// Entry rule entryRuleRunDecl
entryRuleRunDecl returns [EObject current=null] :
	{ currentNode = createCompositeNode(grammarAccess.getRunDeclRule(), currentNode); }
	 iv_ruleRunDecl=ruleRunDecl 
	 { $current=$iv_ruleRunDecl.current; } 
	 EOF 
;

// Rule RunDecl
ruleRunDecl returns [EObject current=null] 
    @init { EObject temp=null; setCurrentLookahead(); resetLookahead(); 
    }
    @after { resetLookahead(); 
    	lastConsumedNode = currentNode;
    }:
(((	
	
	    
	    { 
	        currentNode=createCompositeNode(grammarAccess.getRunDeclAccess().getRunNameNameParserRuleCall_0_0_0(), currentNode); 
	    }
	    lv_runName_0=ruleName 
	    {
	        if ($current==null) {
	            $current = factory.create(grammarAccess.getRunDeclRule().getType().getClassifier());
	            associateNodeWithAstElement(currentNode.getParent(), $current);
	        }
	        
	        try {
	       		set($current, "runName", lv_runName_0, "Name", currentNode);
	        } catch (ValueConverterException vce) {
				handleValueConverterException(vce);
	        }
	        currentNode = currentNode.getParent();
	    }
	
)':' 
    {
        createLeafNode(grammarAccess.getRunDeclAccess().getColonKeyword_0_1(), null); 
    }
)?(	
	
	    lv_run_2='run' 
    {
        createLeafNode(grammarAccess.getRunDeclAccess().getRunRunKeyword_1_0(), "run"); 
    }

 
	    {
	        if ($current==null) {
	            $current = factory.create(grammarAccess.getRunDeclRule().getType().getClassifier());
	            associateNodeWithAstElement(currentNode, $current);
	        }
	        
	        try {
	       		set($current, "run", /* lv_run_2 */ input.LT(-1), "run", lastConsumedNode);
	        } catch (ValueConverterException vce) {
				handleValueConverterException(vce);
	        }
	    }
	
)((	
	
		
		{
			if ($current==null) {
	            $current = factory.create(grammarAccess.getRunDeclRule().getType().getClassifier());
	            associateNodeWithAstElement(currentNode, $current);
	        }
        }
	RULE_ID
	{
		createLeafNode(grammarAccess.getRunDeclAccess().getName2NameCrossReference_2_0_0(), "name2"); 
	}

		// TODO assign feature to currentNode
	
)
    |(	
	
	    
	    { 
	        currentNode=createCompositeNode(grammarAccess.getRunDeclAccess().getBBlockBisParserRuleCall_2_1_0(), currentNode); 
	    }
	    lv_b_4=ruleBlockBis 
	    {
	        if ($current==null) {
	            $current = factory.create(grammarAccess.getRunDeclRule().getType().getClassifier());
	            associateNodeWithAstElement(currentNode.getParent(), $current);
	        }
	        
	        try {
	       		set($current, "b", lv_b_4, "BlockBis", currentNode);
	        } catch (ValueConverterException vce) {
				handleValueConverterException(vce);
	        }
	        currentNode = currentNode.getParent();
	    }
	
))(	
	
	    
	    { 
	        currentNode=createCompositeNode(grammarAccess.getRunDeclAccess().getScopeScopeParserRuleCall_3_0(), currentNode); 
	    }
	    lv_scope_5=ruleScope 
	    {
	        if ($current==null) {
	            $current = factory.create(grammarAccess.getRunDeclRule().getType().getClassifier());
	            associateNodeWithAstElement(currentNode.getParent(), $current);
	        }
	        
	        try {
	       		set($current, "scope", lv_scope_5, "Scope", currentNode);
	        } catch (ValueConverterException vce) {
				handleValueConverterException(vce);
	        }
	        currentNode = currentNode.getParent();
	    }
	
));





// Entry rule entryRuleCheckDecl
entryRuleCheckDecl returns [EObject current=null] :
	{ currentNode = createCompositeNode(grammarAccess.getCheckDeclRule(), currentNode); }
	 iv_ruleCheckDecl=ruleCheckDecl 
	 { $current=$iv_ruleCheckDecl.current; } 
	 EOF 
;

// Rule CheckDecl
ruleCheckDecl returns [EObject current=null] 
    @init { EObject temp=null; setCurrentLookahead(); resetLookahead(); 
    }
    @after { resetLookahead(); 
    	lastConsumedNode = currentNode;
    }:
(((	
	
	    
	    { 
	        currentNode=createCompositeNode(grammarAccess.getCheckDeclAccess().getCheckNameNameParserRuleCall_0_0_0(), currentNode); 
	    }
	    lv_checkName_0=ruleName 
	    {
	        if ($current==null) {
	            $current = factory.create(grammarAccess.getCheckDeclRule().getType().getClassifier());
	            associateNodeWithAstElement(currentNode.getParent(), $current);
	        }
	        
	        try {
	       		set($current, "checkName", lv_checkName_0, "Name", currentNode);
	        } catch (ValueConverterException vce) {
				handleValueConverterException(vce);
	        }
	        currentNode = currentNode.getParent();
	    }
	
)':' 
    {
        createLeafNode(grammarAccess.getCheckDeclAccess().getColonKeyword_0_1(), null); 
    }
)?(	
	
	    lv_check_2='check' 
    {
        createLeafNode(grammarAccess.getCheckDeclAccess().getCheckCheckKeyword_1_0(), "check"); 
    }

 
	    {
	        if ($current==null) {
	            $current = factory.create(grammarAccess.getCheckDeclRule().getType().getClassifier());
	            associateNodeWithAstElement(currentNode, $current);
	        }
	        
	        try {
	       		set($current, "check", /* lv_check_2 */ input.LT(-1), "check", lastConsumedNode);
	        } catch (ValueConverterException vce) {
				handleValueConverterException(vce);
	        }
	    }
	
)((	
	
		
		{
			if ($current==null) {
	            $current = factory.create(grammarAccess.getCheckDeclRule().getType().getClassifier());
	            associateNodeWithAstElement(currentNode, $current);
	        }
        }
	RULE_ID
	{
		createLeafNode(grammarAccess.getCheckDeclAccess().getName2NameCrossReference_2_0_0(), "name2"); 
	}

		// TODO assign feature to currentNode
	
)
    |(	
	
	    
	    { 
	        currentNode=createCompositeNode(grammarAccess.getCheckDeclAccess().getBBlockBisParserRuleCall_2_1_0(), currentNode); 
	    }
	    lv_b_4=ruleBlockBis 
	    {
	        if ($current==null) {
	            $current = factory.create(grammarAccess.getCheckDeclRule().getType().getClassifier());
	            associateNodeWithAstElement(currentNode.getParent(), $current);
	        }
	        
	        try {
	       		set($current, "b", lv_b_4, "BlockBis", currentNode);
	        } catch (ValueConverterException vce) {
				handleValueConverterException(vce);
	        }
	        currentNode = currentNode.getParent();
	    }
	
))(	
	
	    
	    { 
	        currentNode=createCompositeNode(grammarAccess.getCheckDeclAccess().getScopeScopeParserRuleCall_3_0(), currentNode); 
	    }
	    lv_scope_5=ruleScope 
	    {
	        if ($current==null) {
	            $current = factory.create(grammarAccess.getCheckDeclRule().getType().getClassifier());
	            associateNodeWithAstElement(currentNode.getParent(), $current);
	        }
	        
	        try {
	       		set($current, "scope", lv_scope_5, "Scope", currentNode);
	        } catch (ValueConverterException vce) {
				handleValueConverterException(vce);
	        }
	        currentNode = currentNode.getParent();
	    }
	
));





// Entry rule entryRuleScope
entryRuleScope returns [EObject current=null] :
	{ currentNode = createCompositeNode(grammarAccess.getScopeRule(), currentNode); }
	 iv_ruleScope=ruleScope 
	 { $current=$iv_ruleScope.current; } 
	 EOF 
;

// Rule Scope
ruleScope returns [EObject current=null] 
    @init { EObject temp=null; setCurrentLookahead(); resetLookahead(); 
    }
    @after { resetLookahead(); 
    	lastConsumedNode = currentNode;
    }:
(('for' 
    {
        createLeafNode(grammarAccess.getScopeAccess().getForKeyword_0_0(), null); 
    }
((RULE_INT
    { 
    createLeafNode(grammarAccess.getScopeAccess().getINTTerminalRuleCall_0_1_0_0(), null); 
    }
('but' 
    {
        createLeafNode(grammarAccess.getScopeAccess().getButKeyword_0_1_0_1_0(), null); 
    }
(	
	
	    
	    { 
	        currentNode=createCompositeNode(grammarAccess.getScopeAccess().getTypescopeTypescopeParserRuleCall_0_1_0_1_1_0(), currentNode); 
	    }
	    lv_typescope_3=ruleTypescope 
	    {
	        if ($current==null) {
	            $current = factory.create(grammarAccess.getScopeRule().getType().getClassifier());
	            associateNodeWithAstElement(currentNode.getParent(), $current);
	        }
	        
	        try {
	       		set($current, "typescope", lv_typescope_3, "Typescope", currentNode);
	        } catch (ValueConverterException vce) {
				handleValueConverterException(vce);
	        }
	        currentNode = currentNode.getParent();
	    }
	
)(',' 
    {
        createLeafNode(grammarAccess.getScopeAccess().getCommaKeyword_0_1_0_1_2_0(), null); 
    }
(	
	
	    
	    { 
	        currentNode=createCompositeNode(grammarAccess.getScopeAccess().getTypescopeTypescopeParserRuleCall_0_1_0_1_2_1_0(), currentNode); 
	    }
	    lv_typescope_5=ruleTypescope 
	    {
	        if ($current==null) {
	            $current = factory.create(grammarAccess.getScopeRule().getType().getClassifier());
	            associateNodeWithAstElement(currentNode.getParent(), $current);
	        }
	        
	        try {
	       		set($current, "typescope", lv_typescope_5, "Typescope", currentNode);
	        } catch (ValueConverterException vce) {
				handleValueConverterException(vce);
	        }
	        currentNode = currentNode.getParent();
	    }
	
))*)?)
    |((	
	
	    
	    { 
	        currentNode=createCompositeNode(grammarAccess.getScopeAccess().getTypescopeTypescopeParserRuleCall_0_1_1_0_0(), currentNode); 
	    }
	    lv_typescope_6=ruleTypescope 
	    {
	        if ($current==null) {
	            $current = factory.create(grammarAccess.getScopeRule().getType().getClassifier());
	            associateNodeWithAstElement(currentNode.getParent(), $current);
	        }
	        
	        try {
	       		set($current, "typescope", lv_typescope_6, "Typescope", currentNode);
	        } catch (ValueConverterException vce) {
				handleValueConverterException(vce);
	        }
	        currentNode = currentNode.getParent();
	    }
	
)(',' 
    {
        createLeafNode(grammarAccess.getScopeAccess().getCommaKeyword_0_1_1_1_0(), null); 
    }
(	
	
	    
	    { 
	        currentNode=createCompositeNode(grammarAccess.getScopeAccess().getTypescopeTypescopeParserRuleCall_0_1_1_1_1_0(), currentNode); 
	    }
	    lv_typescope_8=ruleTypescope 
	    {
	        if ($current==null) {
	            $current = factory.create(grammarAccess.getScopeRule().getType().getClassifier());
	            associateNodeWithAstElement(currentNode.getParent(), $current);
	        }
	        
	        try {
	       		set($current, "typescope", lv_typescope_8, "Typescope", currentNode);
	        } catch (ValueConverterException vce) {
				handleValueConverterException(vce);
	        }
	        currentNode = currentNode.getParent();
	    }
	
))*))?)?('expect' 
    {
        createLeafNode(grammarAccess.getScopeAccess().getExpectKeyword_1_0(), null); 
    }
('0' 
    {
        createLeafNode(grammarAccess.getScopeAccess().getDigitZeroKeyword_1_1_0(), null); 
    }

    |'1' 
    {
        createLeafNode(grammarAccess.getScopeAccess().getDigitOneKeyword_1_1_1(), null); 
    }
))?);





// Entry rule entryRuleTypescope
entryRuleTypescope returns [EObject current=null] :
	{ currentNode = createCompositeNode(grammarAccess.getTypescopeRule(), currentNode); }
	 iv_ruleTypescope=ruleTypescope 
	 { $current=$iv_ruleTypescope.current; } 
	 EOF 
;

// Rule Typescope
ruleTypescope returns [EObject current=null] 
    @init { EObject temp=null; setCurrentLookahead(); resetLookahead(); 
    }
    @after { resetLookahead(); 
    	lastConsumedNode = currentNode;
    }:
(('exactly' 
    {
        createLeafNode(grammarAccess.getTypescopeAccess().getExactlyKeyword_0(), null); 
    }
)?RULE_INT
    { 
    createLeafNode(grammarAccess.getTypescopeAccess().getINTTerminalRuleCall_1(), null); 
    }
((	
	
		
		{
			if ($current==null) {
	            $current = factory.create(grammarAccess.getTypescopeRule().getType().getClassifier());
	            associateNodeWithAstElement(currentNode, $current);
	        }
        }
	RULE_ID
	{
		createLeafNode(grammarAccess.getTypescopeAccess().getNNameCrossReference_2_0_0(), "n"); 
	}

		// TODO assign feature to currentNode
	
)
    |('int' 
    {
        createLeafNode(grammarAccess.getTypescopeAccess().getIntKeyword_2_1_0(), null); 
    }

    |'seq' 
    {
        createLeafNode(grammarAccess.getTypescopeAccess().getSeqKeyword_2_1_1(), null); 
    }
)));





// Entry rule entryRuleEnumDecl
entryRuleEnumDecl returns [EObject current=null] :
	{ currentNode = createCompositeNode(grammarAccess.getEnumDeclRule(), currentNode); }
	 iv_ruleEnumDecl=ruleEnumDecl 
	 { $current=$iv_ruleEnumDecl.current; } 
	 EOF 
;

// Rule EnumDecl
ruleEnumDecl returns [EObject current=null] 
    @init { EObject temp=null; setCurrentLookahead(); resetLookahead(); 
    }
    @after { resetLookahead(); 
    	lastConsumedNode = currentNode;
    }:
('enum' 
    {
        createLeafNode(grammarAccess.getEnumDeclAccess().getEnumKeyword_0(), null); 
    }
(	
	
	    
	    { 
	        currentNode=createCompositeNode(grammarAccess.getEnumDeclAccess().getEnumNameNameParserRuleCall_1_0(), currentNode); 
	    }
	    lv_enumName_1=ruleName 
	    {
	        if ($current==null) {
	            $current = factory.create(grammarAccess.getEnumDeclRule().getType().getClassifier());
	            associateNodeWithAstElement(currentNode.getParent(), $current);
	        }
	        
	        try {
	       		set($current, "enumName", lv_enumName_1, "Name", currentNode);
	        } catch (ValueConverterException vce) {
				handleValueConverterException(vce);
	        }
	        currentNode = currentNode.getParent();
	    }
	
)'{' 
    {
        createLeafNode(grammarAccess.getEnumDeclAccess().getLeftCurlyBracketKeyword_2(), null); 
    }
(	
	
	    
	    { 
	        currentNode=createCompositeNode(grammarAccess.getEnumDeclAccess().getName2NameParserRuleCall_3_0(), currentNode); 
	    }
	    lv_name2_3=ruleName 
	    {
	        if ($current==null) {
	            $current = factory.create(grammarAccess.getEnumDeclRule().getType().getClassifier());
	            associateNodeWithAstElement(currentNode.getParent(), $current);
	        }
	        
	        try {
	       		set($current, "name2", lv_name2_3, "Name", currentNode);
	        } catch (ValueConverterException vce) {
				handleValueConverterException(vce);
	        }
	        currentNode = currentNode.getParent();
	    }
	
)(',' 
    {
        createLeafNode(grammarAccess.getEnumDeclAccess().getCommaKeyword_4_0(), null); 
    }
(	
	
	    
	    { 
	        currentNode=createCompositeNode(grammarAccess.getEnumDeclAccess().getName3NameParserRuleCall_4_1_0(), currentNode); 
	    }
	    lv_name3_5=ruleName 
	    {
	        if ($current==null) {
	            $current = factory.create(grammarAccess.getEnumDeclRule().getType().getClassifier());
	            associateNodeWithAstElement(currentNode.getParent(), $current);
	        }
	        
	        try {
	       		add($current, "name3", lv_name3_5, "Name", currentNode);
	        } catch (ValueConverterException vce) {
				handleValueConverterException(vce);
	        }
	        currentNode = currentNode.getParent();
	    }
	
))*'}' 
    {
        createLeafNode(grammarAccess.getEnumDeclAccess().getRightCurlyBracketKeyword_5(), null); 
    }
);





// Entry rule entryRuleSigDecl
entryRuleSigDecl returns [EObject current=null] :
	{ currentNode = createCompositeNode(grammarAccess.getSigDeclRule(), currentNode); }
	 iv_ruleSigDecl=ruleSigDecl 
	 { $current=$iv_ruleSigDecl.current; } 
	 EOF 
;

// Rule SigDecl
ruleSigDecl returns [EObject current=null] 
    @init { EObject temp=null; setCurrentLookahead(); resetLookahead(); 
    }
    @after { resetLookahead(); 
    	lastConsumedNode = currentNode;
    }:
((ruleSigQual)*'sig' 
    {
        createLeafNode(grammarAccess.getSigDeclAccess().getSigKeyword_1(), null); 
    }
(	
	
	    
	    { 
	        currentNode=createCompositeNode(grammarAccess.getSigDeclAccess().getSigNameNameParserRuleCall_2_0(), currentNode); 
	    }
	    lv_sigName_2=ruleName 
	    {
	        if ($current==null) {
	            $current = factory.create(grammarAccess.getSigDeclRule().getType().getClassifier());
	            associateNodeWithAstElement(currentNode.getParent(), $current);
	        }
	        
	        try {
	       		set($current, "sigName", lv_sigName_2, "Name", currentNode);
	        } catch (ValueConverterException vce) {
				handleValueConverterException(vce);
	        }
	        currentNode = currentNode.getParent();
	    }
	
)(',' 
    {
        createLeafNode(grammarAccess.getSigDeclAccess().getCommaKeyword_3_0(), null); 
    }
(	
	
	    
	    { 
	        currentNode=createCompositeNode(grammarAccess.getSigDeclAccess().getName2NameParserRuleCall_3_1_0(), currentNode); 
	    }
	    lv_name2_4=ruleName 
	    {
	        if ($current==null) {
	            $current = factory.create(grammarAccess.getSigDeclRule().getType().getClassifier());
	            associateNodeWithAstElement(currentNode.getParent(), $current);
	        }
	        
	        try {
	       		add($current, "name2", lv_name2_4, "Name", currentNode);
	        } catch (ValueConverterException vce) {
				handleValueConverterException(vce);
	        }
	        currentNode = currentNode.getParent();
	    }
	
))*(	
	
	    
	    { 
	        currentNode=createCompositeNode(grammarAccess.getSigDeclAccess().getSigExtSigExtParserRuleCall_4_0(), currentNode); 
	    }
	    lv_sigExt_5=ruleSigExt 
	    {
	        if ($current==null) {
	            $current = factory.create(grammarAccess.getSigDeclRule().getType().getClassifier());
	            associateNodeWithAstElement(currentNode.getParent(), $current);
	        }
	        
	        try {
	       		set($current, "sigExt", lv_sigExt_5, "SigExt", currentNode);
	        } catch (ValueConverterException vce) {
				handleValueConverterException(vce);
	        }
	        currentNode = currentNode.getParent();
	    }
	
)?'{' 
    {
        createLeafNode(grammarAccess.getSigDeclAccess().getLeftCurlyBracketKeyword_5(), null); 
    }
((	
	
	    
	    { 
	        currentNode=createCompositeNode(grammarAccess.getSigDeclAccess().getDeclDeclParserRuleCall_6_0_0(), currentNode); 
	    }
	    lv_decl_7=ruleDecl 
	    {
	        if ($current==null) {
	            $current = factory.create(grammarAccess.getSigDeclRule().getType().getClassifier());
	            associateNodeWithAstElement(currentNode.getParent(), $current);
	        }
	        
	        try {
	       		set($current, "decl", lv_decl_7, "Decl", currentNode);
	        } catch (ValueConverterException vce) {
				handleValueConverterException(vce);
	        }
	        currentNode = currentNode.getParent();
	    }
	
)(',' 
    {
        createLeafNode(grammarAccess.getSigDeclAccess().getCommaKeyword_6_1_0(), null); 
    }
(	
	
	    
	    { 
	        currentNode=createCompositeNode(grammarAccess.getSigDeclAccess().getDecl2DeclParserRuleCall_6_1_1_0(), currentNode); 
	    }
	    lv_decl2_9=ruleDecl 
	    {
	        if ($current==null) {
	            $current = factory.create(grammarAccess.getSigDeclRule().getType().getClassifier());
	            associateNodeWithAstElement(currentNode.getParent(), $current);
	        }
	        
	        try {
	       		add($current, "decl2", lv_decl2_9, "Decl", currentNode);
	        } catch (ValueConverterException vce) {
				handleValueConverterException(vce);
	        }
	        currentNode = currentNode.getParent();
	    }
	
))*)?'}' 
    {
        createLeafNode(grammarAccess.getSigDeclAccess().getRightCurlyBracketKeyword_7(), null); 
    }
(	
	
	    
	    { 
	        currentNode=createCompositeNode(grammarAccess.getSigDeclAccess().getBBlockBisParserRuleCall_8_0(), currentNode); 
	    }
	    lv_b_11=ruleBlockBis 
	    {
	        if ($current==null) {
	            $current = factory.create(grammarAccess.getSigDeclRule().getType().getClassifier());
	            associateNodeWithAstElement(currentNode.getParent(), $current);
	        }
	        
	        try {
	       		set($current, "b", lv_b_11, "BlockBis", currentNode);
	        } catch (ValueConverterException vce) {
				handleValueConverterException(vce);
	        }
	        currentNode = currentNode.getParent();
	    }
	
)?);





// Entry rule entryRuleSigQual
entryRuleSigQual returns [String current=null] :
	{ currentNode = createCompositeNode(grammarAccess.getSigQualRule(), currentNode); } 
	 iv_ruleSigQual=ruleSigQual 
	 { $current=$iv_ruleSigQual.current.getText(); }  
	 EOF 
;

// Rule SigQual
ruleSigQual returns [AntlrDatatypeRuleToken current=new AntlrDatatypeRuleToken()] 
    @init { setCurrentLookahead(); resetLookahead(); 
    }
    @after { resetLookahead(); 
	    lastConsumedNode = currentNode;
	    lastConsumedDatatypeToken = $current;
    }:
(
	kw='abstract' 
    {
        $current.merge(kw);
        createLeafNode(grammarAccess.getSigQualAccess().getAbstractKeyword_0(), null); 
    }

    |
	kw='lone' 
    {
        $current.merge(kw);
        createLeafNode(grammarAccess.getSigQualAccess().getLoneKeyword_1(), null); 
    }

    |
	kw='one' 
    {
        $current.merge(kw);
        createLeafNode(grammarAccess.getSigQualAccess().getOneKeyword_2(), null); 
    }

    |
	kw='some' 
    {
        $current.merge(kw);
        createLeafNode(grammarAccess.getSigQualAccess().getSomeKeyword_3(), null); 
    }

    |
	kw='private' 
    {
        $current.merge(kw);
        createLeafNode(grammarAccess.getSigQualAccess().getPrivateKeyword_4(), null); 
    }
)
    ;





// Entry rule entryRuleSigExt
entryRuleSigExt returns [EObject current=null] :
	{ currentNode = createCompositeNode(grammarAccess.getSigExtRule(), currentNode); }
	 iv_ruleSigExt=ruleSigExt 
	 { $current=$iv_ruleSigExt.current; } 
	 EOF 
;

// Rule SigExt
ruleSigExt returns [EObject current=null] 
    @init { EObject temp=null; setCurrentLookahead(); resetLookahead(); 
    }
    @after { resetLookahead(); 
    	lastConsumedNode = currentNode;
    }:
(('extends' 
    {
        createLeafNode(grammarAccess.getSigExtAccess().getExtendsKeyword_0_0(), null); 
    }
(	
	
	    
	    { 
	        currentNode=createCompositeNode(grammarAccess.getSigExtAccess().getRefRefParserRuleCall_0_1_0(), currentNode); 
	    }
	    lv_ref_1=ruleRef 
	    {
	        if ($current==null) {
	            $current = factory.create(grammarAccess.getSigExtRule().getType().getClassifier());
	            associateNodeWithAstElement(currentNode.getParent(), $current);
	        }
	        
	        try {
	       		set($current, "ref", lv_ref_1, "Ref", currentNode);
	        } catch (ValueConverterException vce) {
				handleValueConverterException(vce);
	        }
	        currentNode = currentNode.getParent();
	    }
	
))
    |('in' 
    {
        createLeafNode(grammarAccess.getSigExtAccess().getInKeyword_1_0(), null); 
    }
(	
	
	    
	    { 
	        currentNode=createCompositeNode(grammarAccess.getSigExtAccess().getRefRefParserRuleCall_1_1_0(), currentNode); 
	    }
	    lv_ref_3=ruleRef 
	    {
	        if ($current==null) {
	            $current = factory.create(grammarAccess.getSigExtRule().getType().getClassifier());
	            associateNodeWithAstElement(currentNode.getParent(), $current);
	        }
	        
	        try {
	       		set($current, "ref", lv_ref_3, "Ref", currentNode);
	        } catch (ValueConverterException vce) {
				handleValueConverterException(vce);
	        }
	        currentNode = currentNode.getParent();
	    }
	
)('+' 
    {
        createLeafNode(grammarAccess.getSigExtAccess().getPlusSignKeyword_1_2_0(), null); 
    }
(	
	
	    
	    { 
	        currentNode=createCompositeNode(grammarAccess.getSigExtAccess().getRef2RefParserRuleCall_1_2_1_0(), currentNode); 
	    }
	    lv_ref2_5=ruleRef 
	    {
	        if ($current==null) {
	            $current = factory.create(grammarAccess.getSigExtRule().getType().getClassifier());
	            associateNodeWithAstElement(currentNode.getParent(), $current);
	        }
	        
	        try {
	       		add($current, "ref2", lv_ref2_5, "Ref", currentNode);
	        } catch (ValueConverterException vce) {
				handleValueConverterException(vce);
	        }
	        currentNode = currentNode.getParent();
	    }
	
))*));





// Entry rule entryRuleExpression
entryRuleExpression returns [EObject current=null] :
	{ currentNode = createCompositeNode(grammarAccess.getExpressionRule(), currentNode); }
	 iv_ruleExpression=ruleExpression 
	 { $current=$iv_ruleExpression.current; } 
	 EOF 
;

// Rule Expression
ruleExpression returns [EObject current=null] 
    @init { EObject temp=null; setCurrentLookahead(); resetLookahead(); 
    }
    @after { resetLookahead(); 
    	lastConsumedNode = currentNode;
    }:
((	
	
	    
	    { 
	        currentNode=createCompositeNode(grammarAccess.getExpressionAccess().getTermTerminalExprParserRuleCall_0_0(), currentNode); 
	    }
	    lv_term_0=ruleTerminalExpr 
	    {
	        if ($current==null) {
	            $current = factory.create(grammarAccess.getExpressionRule().getType().getClassifier());
	            associateNodeWithAstElement(currentNode.getParent(), $current);
	        }
	        
	        try {
	       		set($current, "term", lv_term_0, "TerminalExpr", currentNode);
	        } catch (ValueConverterException vce) {
				handleValueConverterException(vce);
	        }
	        currentNode = currentNode.getParent();
	    }
	
)(('[' 
    {
        createLeafNode(grammarAccess.getExpressionAccess().getLeftSquareBracketKeyword_1_0_0(), null); 
    }
(	
	
	    
	    { 
	        currentNode=createCompositeNode(grammarAccess.getExpressionAccess().getExprTExpressionParserRuleCall_1_0_1_0(), currentNode); 
	    }
	    lv_exprT_2=ruleExpression 
	    {
	        if ($current==null) {
	            $current = factory.create(grammarAccess.getExpressionRule().getType().getClassifier());
	            associateNodeWithAstElement(currentNode.getParent(), $current);
	        }
	        
	        try {
	       		set($current, "exprT", lv_exprT_2, "Expression", currentNode);
	        } catch (ValueConverterException vce) {
				handleValueConverterException(vce);
	        }
	        currentNode = currentNode.getParent();
	    }
	
)*']' 
    {
        createLeafNode(grammarAccess.getExpressionAccess().getRightSquareBracketKeyword_1_0_2(), null); 
    }
)
    |((	
	
	    lv_op_4=('+' 
    {
        createLeafNode(grammarAccess.getExpressionAccess().getOpPlusSignKeyword_1_1_0_0_0(), "op"); 
    }


    |'&' 
    {
        createLeafNode(grammarAccess.getExpressionAccess().getOpAmpersandKeyword_1_1_0_0_1(), "op"); 
    }


    |'.' 
    {
        createLeafNode(grammarAccess.getExpressionAccess().getOpFullStopKeyword_1_1_0_0_2(), "op"); 
    }


    |'-' 
    {
        createLeafNode(grammarAccess.getExpressionAccess().getOpHyphenMinusKeyword_1_1_0_0_3(), "op"); 
    }


    |'||' 
    {
        createLeafNode(grammarAccess.getExpressionAccess().getOpVerticalLineVerticalLineKeyword_1_1_0_0_4(), "op"); 
    }


    |'or' 
    {
        createLeafNode(grammarAccess.getExpressionAccess().getOpOrKeyword_1_1_0_0_5(), "op"); 
    }


    |'&&' 
    {
        createLeafNode(grammarAccess.getExpressionAccess().getOpAmpersandAmpersandKeyword_1_1_0_0_6(), "op"); 
    }


    |'and' 
    {
        createLeafNode(grammarAccess.getExpressionAccess().getOpAndKeyword_1_1_0_0_7(), "op"); 
    }


    |'<=>' 
    {
        createLeafNode(grammarAccess.getExpressionAccess().getOpLessThanSignEqualsSignGreaterThanSignKeyword_1_1_0_0_8(), "op"); 
    }


    |'iff' 
    {
        createLeafNode(grammarAccess.getExpressionAccess().getOpIffKeyword_1_1_0_0_9(), "op"); 
    }


    |'++' 
    {
        createLeafNode(grammarAccess.getExpressionAccess().getOpPlusSignPlusSignKeyword_1_1_0_0_10(), "op"); 
    }


    |'<:' 
    {
        createLeafNode(grammarAccess.getExpressionAccess().getOpLessThanSignColonKeyword_1_1_0_0_11(), "op"); 
    }


    |':>' 
    {
        createLeafNode(grammarAccess.getExpressionAccess().getOpColonGreaterThanSignKeyword_1_1_0_0_12(), "op"); 
    }


    |'<<' 
    {
        createLeafNode(grammarAccess.getExpressionAccess().getOpLessThanSignLessThanSignKeyword_1_1_0_0_13(), "op"); 
    }


    |'>>' 
    {
        createLeafNode(grammarAccess.getExpressionAccess().getOpGreaterThanSignGreaterThanSignKeyword_1_1_0_0_14(), "op"); 
    }


    |'>>>' 
    {
        createLeafNode(grammarAccess.getExpressionAccess().getOpGreaterThanSignGreaterThanSignGreaterThanSignKeyword_1_1_0_0_15(), "op"); 
    }

)
 
	    {
	        if ($current==null) {
	            $current = factory.create(grammarAccess.getExpressionRule().getType().getClassifier());
	            associateNodeWithAstElement(currentNode, $current);
	        }
	        
	        try {
	       		set($current, "op", /* lv_op_4 */ input.LT(-1), null, lastConsumedNode);
	        } catch (ValueConverterException vce) {
				handleValueConverterException(vce);
	        }
	    }
	
)(	
	
	    
	    { 
	        currentNode=createCompositeNode(grammarAccess.getExpressionAccess().getRightExpressionParserRuleCall_1_1_1_0(), currentNode); 
	    }
	    lv_right_5=ruleExpression 
	    {
	        if ($current==null) {
	            $current = factory.create(grammarAccess.getExpressionRule().getType().getClassifier());
	            associateNodeWithAstElement(currentNode.getParent(), $current);
	        }
	        
	        try {
	       		set($current, "right", lv_right_5, "Expression", currentNode);
	        } catch (ValueConverterException vce) {
				handleValueConverterException(vce);
	        }
	        currentNode = currentNode.getParent();
	    }
	
))
    |(('!' 
    {
        createLeafNode(grammarAccess.getExpressionAccess().getExclamationMarkKeyword_1_2_0_0(), null); 
    }

    |'not' 
    {
        createLeafNode(grammarAccess.getExpressionAccess().getNotKeyword_1_2_0_1(), null); 
    }
)?(	
	
	    lv_op_8=('=' 
    {
        createLeafNode(grammarAccess.getExpressionAccess().getOpEqualsSignKeyword_1_2_1_0_0(), "op"); 
    }


    |'in' 
    {
        createLeafNode(grammarAccess.getExpressionAccess().getOpInKeyword_1_2_1_0_1(), "op"); 
    }


    |'<' 
    {
        createLeafNode(grammarAccess.getExpressionAccess().getOpLessThanSignKeyword_1_2_1_0_2(), "op"); 
    }


    |'>' 
    {
        createLeafNode(grammarAccess.getExpressionAccess().getOpGreaterThanSignKeyword_1_2_1_0_3(), "op"); 
    }


    |'<=' 
    {
        createLeafNode(grammarAccess.getExpressionAccess().getOpLessThanSignEqualsSignKeyword_1_2_1_0_4(), "op"); 
    }


    |'=>' 
    {
        createLeafNode(grammarAccess.getExpressionAccess().getOpEqualsSignGreaterThanSignKeyword_1_2_1_0_5(), "op"); 
    }

)
 
	    {
	        if ($current==null) {
	            $current = factory.create(grammarAccess.getExpressionRule().getType().getClassifier());
	            associateNodeWithAstElement(currentNode, $current);
	        }
	        
	        try {
	       		set($current, "op", /* lv_op_8 */ input.LT(-1), null, lastConsumedNode);
	        } catch (ValueConverterException vce) {
				handleValueConverterException(vce);
	        }
	    }
	
)(	
	
	    
	    { 
	        currentNode=createCompositeNode(grammarAccess.getExpressionAccess().getRightExpressionParserRuleCall_1_2_2_0(), currentNode); 
	    }
	    lv_right_9=ruleExpression 
	    {
	        if ($current==null) {
	            $current = factory.create(grammarAccess.getExpressionRule().getType().getClassifier());
	            associateNodeWithAstElement(currentNode.getParent(), $current);
	        }
	        
	        try {
	       		set($current, "right", lv_right_9, "Expression", currentNode);
	        } catch (ValueConverterException vce) {
				handleValueConverterException(vce);
	        }
	        currentNode = currentNode.getParent();
	    }
	
))
    |((	
	
	    
	    { 
	        currentNode=createCompositeNode(grammarAccess.getExpressionAccess().getArrowOpArrowOpParserRuleCall_1_3_0_0(), currentNode); 
	    }
	    lv_arrowOp_10=ruleArrowOp 
	    {
	        if ($current==null) {
	            $current = factory.create(grammarAccess.getExpressionRule().getType().getClassifier());
	            associateNodeWithAstElement(currentNode.getParent(), $current);
	        }
	        
	        try {
	       		set($current, "arrowOp", lv_arrowOp_10, "ArrowOp", currentNode);
	        } catch (ValueConverterException vce) {
				handleValueConverterException(vce);
	        }
	        currentNode = currentNode.getParent();
	    }
	
)(	
	
	    
	    { 
	        currentNode=createCompositeNode(grammarAccess.getExpressionAccess().getRightExpressionParserRuleCall_1_3_1_0(), currentNode); 
	    }
	    lv_right_11=ruleExpression 
	    {
	        if ($current==null) {
	            $current = factory.create(grammarAccess.getExpressionRule().getType().getClassifier());
	            associateNodeWithAstElement(currentNode.getParent(), $current);
	        }
	        
	        try {
	       		set($current, "right", lv_right_11, "Expression", currentNode);
	        } catch (ValueConverterException vce) {
				handleValueConverterException(vce);
	        }
	        currentNode = currentNode.getParent();
	    }
	
)))?);





// Entry rule entryRuleTerminalExpr
entryRuleTerminalExpr returns [EObject current=null] :
	{ currentNode = createCompositeNode(grammarAccess.getTerminalExprRule(), currentNode); }
	 iv_ruleTerminalExpr=ruleTerminalExpr 
	 { $current=$iv_ruleTerminalExpr.current; } 
	 EOF 
;

// Rule TerminalExpr
ruleTerminalExpr returns [EObject current=null] 
    @init { EObject temp=null; setCurrentLookahead(); resetLookahead(); 
    }
    @after { resetLookahead(); 
    	lastConsumedNode = currentNode;
    }:
(('let' 
    {
        createLeafNode(grammarAccess.getTerminalExprAccess().getLetKeyword_0_0(), null); 
    }

    { 
        currentNode=createCompositeNode(grammarAccess.getTerminalExprAccess().getLetDeclParserRuleCall_0_1(), currentNode); 
    }
    this_LetDecl_1=ruleLetDecl
    { 
        $current = $this_LetDecl_1.current; 
        currentNode = currentNode.getParent();
    }
(',' 
    {
        createLeafNode(grammarAccess.getTerminalExprAccess().getCommaKeyword_0_2_0(), null); 
    }
(	
	
	    
	    { 
	        currentNode=createCompositeNode(grammarAccess.getTerminalExprAccess().getLetDeclLetDeclParserRuleCall_0_2_1_0(), currentNode); 
	    }
	    lv_letDecl_3=ruleLetDecl 
	    {
	        if ($current==null) {
	            $current = factory.create(grammarAccess.getTerminalExprRule().getType().getClassifier());
	            associateNodeWithAstElement(currentNode.getParent(), $current);
	        }
	        
	        try {
	       		set($current, "letDecl", lv_letDecl_3, "LetDecl", currentNode);
	        } catch (ValueConverterException vce) {
				handleValueConverterException(vce);
	        }
	        currentNode = currentNode.getParent();
	    }
	
))*(	
	
	    
	    { 
	        currentNode=createCompositeNode(grammarAccess.getTerminalExprAccess().getBlockOrBarBisBlockOrBarBisParserRuleCall_0_3_0(), currentNode); 
	    }
	    lv_blockOrBarBis_4=ruleBlockOrBarBis 
	    {
	        if ($current==null) {
	            $current = factory.create(grammarAccess.getTerminalExprRule().getType().getClassifier());
	            associateNodeWithAstElement(currentNode.getParent(), $current);
	        }
	        
	        try {
	       		set($current, "blockOrBarBis", lv_blockOrBarBis_4, "BlockOrBarBis", currentNode);
	        } catch (ValueConverterException vce) {
				handleValueConverterException(vce);
	        }
	        currentNode = currentNode.getParent();
	    }
	
))
    |(('all' 
    {
        createLeafNode(grammarAccess.getTerminalExprAccess().getAllKeyword_1_0_0(), null); 
    }

    |'sum' 
    {
        createLeafNode(grammarAccess.getTerminalExprAccess().getSumKeyword_1_0_1(), null); 
    }
)(	
	
	    
	    { 
	        currentNode=createCompositeNode(grammarAccess.getTerminalExprAccess().getDeclDeclParserRuleCall_1_1_0(), currentNode); 
	    }
	    lv_decl_7=ruleDecl 
	    {
	        if ($current==null) {
	            $current = factory.create(grammarAccess.getTerminalExprRule().getType().getClassifier());
	            associateNodeWithAstElement(currentNode.getParent(), $current);
	        }
	        
	        try {
	       		set($current, "decl", lv_decl_7, "Decl", currentNode);
	        } catch (ValueConverterException vce) {
				handleValueConverterException(vce);
	        }
	        currentNode = currentNode.getParent();
	    }
	
)(	
	
	    
	    { 
	        currentNode=createCompositeNode(grammarAccess.getTerminalExprAccess().getBBlockOrBarBisParserRuleCall_1_2_0(), currentNode); 
	    }
	    lv_b_8=ruleBlockOrBarBis 
	    {
	        if ($current==null) {
	            $current = factory.create(grammarAccess.getTerminalExprRule().getType().getClassifier());
	            associateNodeWithAstElement(currentNode.getParent(), $current);
	        }
	        
	        try {
	       		set($current, "b", lv_b_8, "BlockOrBarBis", currentNode);
	        } catch (ValueConverterException vce) {
				handleValueConverterException(vce);
	        }
	        currentNode = currentNode.getParent();
	    }
	
))
    |(('!' 
    {
        createLeafNode(grammarAccess.getTerminalExprAccess().getExclamationMarkKeyword_2_0_0(), null); 
    }

    |'not' 
    {
        createLeafNode(grammarAccess.getTerminalExprAccess().getNotKeyword_2_0_1(), null); 
    }

    |'set' 
    {
        createLeafNode(grammarAccess.getTerminalExprAccess().getSetKeyword_2_0_2(), null); 
    }

    |'seq' 
    {
        createLeafNode(grammarAccess.getTerminalExprAccess().getSeqKeyword_2_0_3(), null); 
    }

    |'#' 
    {
        createLeafNode(grammarAccess.getTerminalExprAccess().getNumberSignKeyword_2_0_4(), null); 
    }

    |'~' 
    {
        createLeafNode(grammarAccess.getTerminalExprAccess().getTildeKeyword_2_0_5(), null); 
    }

    |'*' 
    {
        createLeafNode(grammarAccess.getTerminalExprAccess().getAsteriskKeyword_2_0_6(), null); 
    }

    |'^' 
    {
        createLeafNode(grammarAccess.getTerminalExprAccess().getCircumflexAccentKeyword_2_0_7(), null); 
    }
)
    { 
        currentNode=createCompositeNode(grammarAccess.getTerminalExprAccess().getTerminalExprParserRuleCall_2_1(), currentNode); 
    }
    this_TerminalExpr_17=ruleTerminalExpr
    { 
        $current = $this_TerminalExpr_17.current; 
        currentNode = currentNode.getParent();
    }
)
    |(('no' 
    {
        createLeafNode(grammarAccess.getTerminalExprAccess().getNoKeyword_3_0_0(), null); 
    }

    |'some' 
    {
        createLeafNode(grammarAccess.getTerminalExprAccess().getSomeKeyword_3_0_1(), null); 
    }

    |'lone' 
    {
        createLeafNode(grammarAccess.getTerminalExprAccess().getLoneKeyword_3_0_2(), null); 
    }

    |'one' 
    {
        createLeafNode(grammarAccess.getTerminalExprAccess().getOneKeyword_3_0_3(), null); 
    }
)(	
	
	    
	    { 
	        currentNode=createCompositeNode(grammarAccess.getTerminalExprAccess().getTTerminalExprParserRuleCall_3_1_0(), currentNode); 
	    }
	    lv_t_22=ruleTerminalExpr 
	    {
	        if ($current==null) {
	            $current = factory.create(grammarAccess.getTerminalExprRule().getType().getClassifier());
	            associateNodeWithAstElement(currentNode.getParent(), $current);
	        }
	        
	        try {
	       		set($current, "t", lv_t_22, "TerminalExpr", currentNode);
	        } catch (ValueConverterException vce) {
				handleValueConverterException(vce);
	        }
	        currentNode = currentNode.getParent();
	    }
	
))
    |RULE_INT
    { 
    createLeafNode(grammarAccess.getTerminalExprAccess().getINTTerminalRuleCall_4(), null); 
    }

    |RULE_INTEGER
    { 
    createLeafNode(grammarAccess.getTerminalExprAccess().getIntegerTerminalRuleCall_5(), null); 
    }

    |'none' 
    {
        createLeafNode(grammarAccess.getTerminalExprAccess().getNoneKeyword_6(), null); 
    }

    |'iden' 
    {
        createLeafNode(grammarAccess.getTerminalExprAccess().getIdenKeyword_7(), null); 
    }

    |'univ' 
    {
        createLeafNode(grammarAccess.getTerminalExprAccess().getUnivKeyword_8(), null); 
    }

    |'Int' 
    {
        createLeafNode(grammarAccess.getTerminalExprAccess().getIntKeyword_9(), null); 
    }

    |'seq/Int' 
    {
        createLeafNode(grammarAccess.getTerminalExprAccess().getSeqIntKeyword_10(), null); 
    }

    |('(' 
    {
        createLeafNode(grammarAccess.getTerminalExprAccess().getLeftParenthesisKeyword_11_0(), null); 
    }
(	
	
	    
	    { 
	        currentNode=createCompositeNode(grammarAccess.getTerminalExprAccess().getExprTExpressionParserRuleCall_11_1_0(), currentNode); 
	    }
	    lv_exprT_31=ruleExpression 
	    {
	        if ($current==null) {
	            $current = factory.create(grammarAccess.getTerminalExprRule().getType().getClassifier());
	            associateNodeWithAstElement(currentNode.getParent(), $current);
	        }
	        
	        try {
	       		set($current, "exprT", lv_exprT_31, "Expression", currentNode);
	        } catch (ValueConverterException vce) {
				handleValueConverterException(vce);
	        }
	        currentNode = currentNode.getParent();
	    }
	
)')' 
    {
        createLeafNode(grammarAccess.getTerminalExprAccess().getRightParenthesisKeyword_11_2(), null); 
    }
)
    |(('@' 
    {
        createLeafNode(grammarAccess.getTerminalExprAccess().getCommercialAtKeyword_12_0(), null); 
    }
)?(	
	
		
		{
			if ($current==null) {
	            $current = factory.create(grammarAccess.getTerminalExprRule().getType().getClassifier());
	            associateNodeWithAstElement(currentNode, $current);
	        }
        }
	RULE_ID
	{
		createLeafNode(grammarAccess.getTerminalExprAccess().getNameRefNameCrossReference_12_1_0(), "nameRef"); 
	}

		// TODO assign feature to currentNode
	
))
    |('{' 
    {
        createLeafNode(grammarAccess.getTerminalExprAccess().getLeftCurlyBracketKeyword_13_0(), null); 
    }
(
    { 
        currentNode=createCompositeNode(grammarAccess.getTerminalExprAccess().getBlockParserRuleCall_13_1_0(), currentNode); 
    }
    this_Block_36=ruleBlock
    { 
        $current = $this_Block_36.current; 
        currentNode = currentNode.getParent();
    }

    |(((	
	
	    
	    { 
	        currentNode=createCompositeNode(grammarAccess.getTerminalExprAccess().getDeclDeclParserRuleCall_13_1_1_0_0_0(), currentNode); 
	    }
	    lv_decl_37=ruleDecl 
	    {
	        if ($current==null) {
	            $current = factory.create(grammarAccess.getTerminalExprRule().getType().getClassifier());
	            associateNodeWithAstElement(currentNode.getParent(), $current);
	        }
	        
	        try {
	       		set($current, "decl", lv_decl_37, "Decl", currentNode);
	        } catch (ValueConverterException vce) {
				handleValueConverterException(vce);
	        }
	        currentNode = currentNode.getParent();
	    }
	
)',' 
    {
        createLeafNode(grammarAccess.getTerminalExprAccess().getCommaKeyword_13_1_1_0_1(), null); 
    }
)+(	
	
	    
	    { 
	        currentNode=createCompositeNode(grammarAccess.getTerminalExprAccess().getBlockOrBarBlockOrBarParserRuleCall_13_1_1_1_0(), currentNode); 
	    }
	    lv_blockOrBar_39=ruleBlockOrBar 
	    {
	        if ($current==null) {
	            $current = factory.create(grammarAccess.getTerminalExprRule().getType().getClassifier());
	            associateNodeWithAstElement(currentNode.getParent(), $current);
	        }
	        
	        try {
	       		set($current, "blockOrBar", lv_blockOrBar_39, "BlockOrBar", currentNode);
	        } catch (ValueConverterException vce) {
				handleValueConverterException(vce);
	        }
	        currentNode = currentNode.getParent();
	    }
	
)'}' 
    {
        createLeafNode(grammarAccess.getTerminalExprAccess().getRightCurlyBracketKeyword_13_1_1_2(), null); 
    }
))));





// Entry rule entryRuleDecl
entryRuleDecl returns [EObject current=null] :
	{ currentNode = createCompositeNode(grammarAccess.getDeclRule(), currentNode); }
	 iv_ruleDecl=ruleDecl 
	 { $current=$iv_ruleDecl.current; } 
	 EOF 
;

// Rule Decl
ruleDecl returns [EObject current=null] 
    @init { EObject temp=null; setCurrentLookahead(); resetLookahead(); 
    }
    @after { resetLookahead(); 
    	lastConsumedNode = currentNode;
    }:
(('private' 
    {
        createLeafNode(grammarAccess.getDeclAccess().getPrivateKeyword_0(), null); 
    }
)?('disj' 
    {
        createLeafNode(grammarAccess.getDeclAccess().getDisjKeyword_1(), null); 
    }
)?(	
	
	    
	    { 
	        currentNode=createCompositeNode(grammarAccess.getDeclAccess().getNameNameParserRuleCall_2_0(), currentNode); 
	    }
	    lv_name_2=ruleName 
	    {
	        if ($current==null) {
	            $current = factory.create(grammarAccess.getDeclRule().getType().getClassifier());
	            associateNodeWithAstElement(currentNode.getParent(), $current);
	        }
	        
	        try {
	       		set($current, "name", lv_name_2, "Name", currentNode);
	        } catch (ValueConverterException vce) {
				handleValueConverterException(vce);
	        }
	        currentNode = currentNode.getParent();
	    }
	
)(',' 
    {
        createLeafNode(grammarAccess.getDeclAccess().getCommaKeyword_3_0(), null); 
    }
(	
	
	    
	    { 
	        currentNode=createCompositeNode(grammarAccess.getDeclAccess().getSuiteNameParserRuleCall_3_1_0(), currentNode); 
	    }
	    lv_suite_4=ruleName 
	    {
	        if ($current==null) {
	            $current = factory.create(grammarAccess.getDeclRule().getType().getClassifier());
	            associateNodeWithAstElement(currentNode.getParent(), $current);
	        }
	        
	        try {
	       		add($current, "suite", lv_suite_4, "Name", currentNode);
	        } catch (ValueConverterException vce) {
				handleValueConverterException(vce);
	        }
	        currentNode = currentNode.getParent();
	    }
	
))*':' 
    {
        createLeafNode(grammarAccess.getDeclAccess().getColonKeyword_4(), null); 
    }
('disj' 
    {
        createLeafNode(grammarAccess.getDeclAccess().getDisjKeyword_5(), null); 
    }
)?(	
	
	    
	    { 
	        currentNode=createCompositeNode(grammarAccess.getDeclAccess().getExprDeclExpressionParserRuleCall_6_0(), currentNode); 
	    }
	    lv_exprDecl_7=ruleExpression 
	    {
	        if ($current==null) {
	            $current = factory.create(grammarAccess.getDeclRule().getType().getClassifier());
	            associateNodeWithAstElement(currentNode.getParent(), $current);
	        }
	        
	        try {
	       		set($current, "exprDecl", lv_exprDecl_7, "Expression", currentNode);
	        } catch (ValueConverterException vce) {
				handleValueConverterException(vce);
	        }
	        currentNode = currentNode.getParent();
	    }
	
));







// Entry rule entryRuleLetDecl
entryRuleLetDecl returns [EObject current=null] :
	{ currentNode = createCompositeNode(grammarAccess.getLetDeclRule(), currentNode); }
	 iv_ruleLetDecl=ruleLetDecl 
	 { $current=$iv_ruleLetDecl.current; } 
	 EOF 
;

// Rule LetDecl
ruleLetDecl returns [EObject current=null] 
    @init { EObject temp=null; setCurrentLookahead(); resetLookahead(); 
    }
    @after { resetLookahead(); 
    	lastConsumedNode = currentNode;
    }:
(
    { 
        currentNode=createCompositeNode(grammarAccess.getLetDeclAccess().getNameParserRuleCall_0(), currentNode); 
    }
    this_Name_0=ruleName
    { 
        $current = $this_Name_0.current; 
        currentNode = currentNode.getParent();
    }
'=' 
    {
        createLeafNode(grammarAccess.getLetDeclAccess().getEqualsSignKeyword_1(), null); 
    }
(	
	
	    
	    { 
	        currentNode=createCompositeNode(grammarAccess.getLetDeclAccess().getExprLetExpressionParserRuleCall_2_0(), currentNode); 
	    }
	    lv_exprLet_2=ruleExpression 
	    {
	        if ($current==null) {
	            $current = factory.create(grammarAccess.getLetDeclRule().getType().getClassifier());
	            associateNodeWithAstElement(currentNode.getParent(), $current);
	        }
	        
	        try {
	       		set($current, "exprLet", lv_exprLet_2, "Expression", currentNode);
	        } catch (ValueConverterException vce) {
				handleValueConverterException(vce);
	        }
	        currentNode = currentNode.getParent();
	    }
	
));





// Entry rule entryRuleArrowOp
entryRuleArrowOp returns [EObject current=null] :
	{ currentNode = createCompositeNode(grammarAccess.getArrowOpRule(), currentNode); }
	 iv_ruleArrowOp=ruleArrowOp 
	 { $current=$iv_ruleArrowOp.current; } 
	 EOF 
;

// Rule ArrowOp
ruleArrowOp returns [EObject current=null] 
    @init { EObject temp=null; setCurrentLookahead(); resetLookahead(); 
    }
    @after { resetLookahead(); 
    	lastConsumedNode = currentNode;
    }:
(('some' 
    {
        createLeafNode(grammarAccess.getArrowOpAccess().getSomeKeyword_0_0(), null); 
    }

    |'one' 
    {
        createLeafNode(grammarAccess.getArrowOpAccess().getOneKeyword_0_1(), null); 
    }

    |'lone' 
    {
        createLeafNode(grammarAccess.getArrowOpAccess().getLoneKeyword_0_2(), null); 
    }

    |'set' 
    {
        createLeafNode(grammarAccess.getArrowOpAccess().getSetKeyword_0_3(), null); 
    }
)?(	
	
	    lv_s_4='->' 
    {
        createLeafNode(grammarAccess.getArrowOpAccess().getSHyphenMinusGreaterThanSignKeyword_1_0(), "s"); 
    }

 
	    {
	        if ($current==null) {
	            $current = factory.create(grammarAccess.getArrowOpRule().getType().getClassifier());
	            associateNodeWithAstElement(currentNode, $current);
	        }
	        
	        try {
	       		set($current, "s", /* lv_s_4 */ input.LT(-1), "->", lastConsumedNode);
	        } catch (ValueConverterException vce) {
				handleValueConverterException(vce);
	        }
	    }
	
));





// Entry rule entryRuleBlock
entryRuleBlock returns [EObject current=null] :
	{ currentNode = createCompositeNode(grammarAccess.getBlockRule(), currentNode); }
	 iv_ruleBlock=ruleBlock 
	 { $current=$iv_ruleBlock.current; } 
	 EOF 
;

// Rule Block
ruleBlock returns [EObject current=null] 
    @init { EObject temp=null; setCurrentLookahead(); resetLookahead(); 
    }
    @after { resetLookahead(); 
    	lastConsumedNode = currentNode;
    }:
((	
	
	    
	    { 
	        currentNode=createCompositeNode(grammarAccess.getBlockAccess().getExprExpressionParserRuleCall_0_0(), currentNode); 
	    }
	    lv_expr_0=ruleExpression 
	    {
	        if ($current==null) {
	            $current = factory.create(grammarAccess.getBlockRule().getType().getClassifier());
	            associateNodeWithAstElement(currentNode.getParent(), $current);
	        }
	        
	        try {
	       		add($current, "expr", lv_expr_0, "Expression", currentNode);
	        } catch (ValueConverterException vce) {
				handleValueConverterException(vce);
	        }
	        currentNode = currentNode.getParent();
	    }
	
)*'}' 
    {
        createLeafNode(grammarAccess.getBlockAccess().getRightCurlyBracketKeyword_1(), null); 
    }
);





// Entry rule entryRuleBlockBis
entryRuleBlockBis returns [EObject current=null] :
	{ currentNode = createCompositeNode(grammarAccess.getBlockBisRule(), currentNode); }
	 iv_ruleBlockBis=ruleBlockBis 
	 { $current=$iv_ruleBlockBis.current; } 
	 EOF 
;

// Rule BlockBis
ruleBlockBis returns [EObject current=null] 
    @init { EObject temp=null; setCurrentLookahead(); resetLookahead(); 
    }
    @after { resetLookahead(); 
    	lastConsumedNode = currentNode;
    }:
('{' 
    {
        createLeafNode(grammarAccess.getBlockBisAccess().getLeftCurlyBracketKeyword_0(), null); 
    }

    { 
        currentNode=createCompositeNode(grammarAccess.getBlockBisAccess().getBlockParserRuleCall_1(), currentNode); 
    }
    this_Block_1=ruleBlock
    { 
        $current = $this_Block_1.current; 
        currentNode = currentNode.getParent();
    }
);





// Entry rule entryRuleBlockOrBar
entryRuleBlockOrBar returns [EObject current=null] :
	{ currentNode = createCompositeNode(grammarAccess.getBlockOrBarRule(), currentNode); }
	 iv_ruleBlockOrBar=ruleBlockOrBar 
	 { $current=$iv_ruleBlockOrBar.current; } 
	 EOF 
;

// Rule BlockOrBar
ruleBlockOrBar returns [EObject current=null] 
    @init { EObject temp=null; setCurrentLookahead(); resetLookahead(); 
    }
    @after { resetLookahead(); 
    	lastConsumedNode = currentNode;
    }:
(
    { 
        currentNode=createCompositeNode(grammarAccess.getBlockOrBarAccess().getBlockBisParserRuleCall_0(), currentNode); 
    }
    this_BlockBis_0=ruleBlockBis
    { 
        $current = $this_BlockBis_0.current; 
        currentNode = currentNode.getParent();
    }

    |('|' 
    {
        createLeafNode(grammarAccess.getBlockOrBarAccess().getVerticalLineKeyword_1_0(), null); 
    }

    { 
        currentNode=createCompositeNode(grammarAccess.getBlockOrBarAccess().getExpressionParserRuleCall_1_1(), currentNode); 
    }
    this_Expression_2=ruleExpression
    { 
        $current = $this_Expression_2.current; 
        currentNode = currentNode.getParent();
    }
));





// Entry rule entryRuleBlockOrBarBis
entryRuleBlockOrBarBis returns [EObject current=null] :
	{ currentNode = createCompositeNode(grammarAccess.getBlockOrBarBisRule(), currentNode); }
	 iv_ruleBlockOrBarBis=ruleBlockOrBarBis 
	 { $current=$iv_ruleBlockOrBarBis.current; } 
	 EOF 
;

// Rule BlockOrBarBis
ruleBlockOrBarBis returns [EObject current=null] 
    @init { EObject temp=null; setCurrentLookahead(); resetLookahead(); 
    }
    @after { resetLookahead(); 
    	lastConsumedNode = currentNode;
    }:
(
    { 
        currentNode=createCompositeNode(grammarAccess.getBlockOrBarBisAccess().getBlockBisParserRuleCall_0(), currentNode); 
    }
    this_BlockBis_0=ruleBlockBis
    { 
        $current = $this_BlockBis_0.current; 
        currentNode = currentNode.getParent();
    }

    |('|' 
    {
        createLeafNode(grammarAccess.getBlockOrBarBisAccess().getVerticalLineKeyword_1_0(), null); 
    }

    { 
        currentNode=createCompositeNode(grammarAccess.getBlockOrBarBisAccess().getTerminalExprParserRuleCall_1_1(), currentNode); 
    }
    this_TerminalExpr_2=ruleTerminalExpr
    { 
        $current = $this_TerminalExpr_2.current; 
        currentNode = currentNode.getParent();
    }
));





// Entry rule entryRuleName
entryRuleName returns [EObject current=null] :
	{ currentNode = createCompositeNode(grammarAccess.getNameRule(), currentNode); }
	 iv_ruleName=ruleName 
	 { $current=$iv_ruleName.current; } 
	 EOF 
;

// Rule Name
ruleName returns [EObject current=null] 
    @init { EObject temp=null; setCurrentLookahead(); resetLookahead(); 
    }
    @after { resetLookahead(); 
    	lastConsumedNode = currentNode;
    }:
((	
	
	    lv_this_0='this' 
    {
        createLeafNode(grammarAccess.getNameAccess().getThisThisKeyword_0_0(), "this"); 
    }

 
	    {
	        if ($current==null) {
	            $current = factory.create(grammarAccess.getNameRule().getType().getClassifier());
	            associateNodeWithAstElement(currentNode, $current);
	        }
	        
	        try {
	       		set($current, "this", /* lv_this_0 */ input.LT(-1), "this", lastConsumedNode);
	        } catch (ValueConverterException vce) {
				handleValueConverterException(vce);
	        }
	    }
	
)
    |(	
	
	    lv_name_1=	RULE_ID
	{
		createLeafNode(grammarAccess.getNameAccess().getNameIDTerminalRuleCall_1_0(), "name"); 
	}
 
	    {
	        if ($current==null) {
	            $current = factory.create(grammarAccess.getNameRule().getType().getClassifier());
	            associateNodeWithAstElement(currentNode, $current);
	        }
	        
	        try {
	       		set($current, "name", lv_name_1, "ID", lastConsumedNode);
	        } catch (ValueConverterException vce) {
				handleValueConverterException(vce);
	        }
	    }
	
)
    |(	
	
	    
	    { 
	        currentNode=createCompositeNode(grammarAccess.getNameAccess().getNameCompleteNameBisParserRuleCall_2_0(), currentNode); 
	    }
	    lv_nameComplete_2=ruleNameBis 
	    {
	        if ($current==null) {
	            $current = factory.create(grammarAccess.getNameRule().getType().getClassifier());
	            associateNodeWithAstElement(currentNode.getParent(), $current);
	        }
	        
	        try {
	       		set($current, "nameComplete", lv_nameComplete_2, "NameBis", currentNode);
	        } catch (ValueConverterException vce) {
				handleValueConverterException(vce);
	        }
	        currentNode = currentNode.getParent();
	    }
	
));





// Entry rule entryRuleNameBis
entryRuleNameBis returns [EObject current=null] :
	{ currentNode = createCompositeNode(grammarAccess.getNameBisRule(), currentNode); }
	 iv_ruleNameBis=ruleNameBis 
	 { $current=$iv_ruleNameBis.current; } 
	 EOF 
;

// Rule NameBis
ruleNameBis returns [EObject current=null] 
    @init { EObject temp=null; setCurrentLookahead(); resetLookahead(); 
    }
    @after { resetLookahead(); 
    	lastConsumedNode = currentNode;
    }:
(('this' 
    {
        createLeafNode(grammarAccess.getNameBisAccess().getThisKeyword_0_0(), null); 
    }

    |RULE_ID
    { 
    createLeafNode(grammarAccess.getNameBisAccess().getIDTerminalRuleCall_0_1(), null); 
    }
)('/' 
    {
        createLeafNode(grammarAccess.getNameBisAccess().getSolidusKeyword_1_0(), null); 
    }
(	
	
	    lv_suite_3=	RULE_ID
	{
		createLeafNode(grammarAccess.getNameBisAccess().getSuiteIDTerminalRuleCall_1_1_0(), "suite"); 
	}
 
	    {
	        if ($current==null) {
	            $current = factory.create(grammarAccess.getNameBisRule().getType().getClassifier());
	            associateNodeWithAstElement(currentNode, $current);
	        }
	        
	        try {
	       		set($current, "suite", lv_suite_3, "ID", lastConsumedNode);
	        } catch (ValueConverterException vce) {
				handleValueConverterException(vce);
	        }
	    }
	
))+);





// Entry rule entryRuleRef
entryRuleRef returns [EObject current=null] :
	{ currentNode = createCompositeNode(grammarAccess.getRefRule(), currentNode); }
	 iv_ruleRef=ruleRef 
	 { $current=$iv_ruleRef.current; } 
	 EOF 
;

// Rule Ref
ruleRef returns [EObject current=null] 
    @init { EObject temp=null; setCurrentLookahead(); resetLookahead(); 
    }
    @after { resetLookahead(); 
    	lastConsumedNode = currentNode;
    }:
((	
	
		
		{
			if ($current==null) {
	            $current = factory.create(grammarAccess.getRefRule().getType().getClassifier());
	            associateNodeWithAstElement(currentNode, $current);
	        }
        }
	RULE_ID
	{
		createLeafNode(grammarAccess.getRefAccess().getNameNameCrossReference_0_0(), "name"); 
	}

		// TODO assign feature to currentNode
	
)
    |'univ' 
    {
        createLeafNode(grammarAccess.getRefAccess().getUnivKeyword_1(), null); 
    }

    |'Int' 
    {
        createLeafNode(grammarAccess.getRefAccess().getIntKeyword_2(), null); 
    }

    |'seq/Int' 
    {
        createLeafNode(grammarAccess.getRefAccess().getSeqIntKeyword_3(), null); 
    }
);





RULE_INTEGER : '-' RULE_INT;

RULE_COMMENT : '--' ( options {greedy=false;} : . )*'\n';

RULE_ID : ('a'..'z'|'A'..'Z'|'_') ('a'..'z'|'A'..'Z'|'_'|'0'..'9')* '\''*;

RULE_INT : ('0'..'9')+;

RULE_STRING : ('"' ('\\' ('b'|'t'|'n'|'f'|'r'|'"'|'\''|'\\')|~(('\\'|'"')))* '"'|'\'' ('\\' ('b'|'t'|'n'|'f'|'r'|'"'|'\''|'\\')|~(('\\'|'\'')))* '\'');

RULE_ML_COMMENT : '/*' ( options {greedy=false;} : . )*'*/';

RULE_SL_COMMENT : '//' ~(('\n'|'\r'))* ('\r'? '\n')?;

RULE_WS : (' '|'\t'|'\r'|'\n')+;

RULE_ANY_OTHER : .;


