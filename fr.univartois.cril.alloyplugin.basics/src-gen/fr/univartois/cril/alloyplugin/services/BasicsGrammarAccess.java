/*
* generated by Xtext
*/

package fr.univartois.cril.alloyplugin.services;

import com.google.inject.Singleton;
import com.google.inject.Inject;

import org.eclipse.xtext.*;

import org.eclipse.xtext.service.GrammarProvider;

import org.eclipse.xtext.common.services.TerminalsGrammarAccess;

@Singleton
public class BasicsGrammarAccess implements IGrammarAccess {
	
	
	public class SpecificationElements implements IParserRuleAccess {
		private final ParserRule rule = (ParserRule) GrammarUtil.findRuleForName(getGrammar(), "Specification");
		private final Group cGroup = (Group)rule.eContents().get(1);
		private final Assignment cModuleAssignment_0 = (Assignment)cGroup.eContents().get(0);
		private final RuleCall cModuleModuleParserRuleCall_0_0 = (RuleCall)cModuleAssignment_0.eContents().get(0);
		private final Assignment cOpenAssignment_1 = (Assignment)cGroup.eContents().get(1);
		private final RuleCall cOpenOpenParserRuleCall_1_0 = (RuleCall)cOpenAssignment_1.eContents().get(0);
		private final Assignment cParagraphAssignment_2 = (Assignment)cGroup.eContents().get(2);
		private final RuleCall cParagraphParagraphParserRuleCall_2_0 = (RuleCall)cParagraphAssignment_2.eContents().get(0);
		
		//Specification:
		//  module=Module? open+=Open* paragraph+=Paragraph*; 
		//
		/// *
		//	specification ::= [module] open* paragraph*
		// * /
		//	 
		//	      
		//	
		/// *
		//	module ::= "module" name  [ "["  ["exactly"] name  ("," ["exactly"] num)*    "]" ]
		// * /
		public ParserRule getRule() { return rule; }

		//module=Module? open+=Open* paragraph+=Paragraph*
		public Group getGroup() { return cGroup; }

		//module=Module?
		public Assignment getModuleAssignment_0() { return cModuleAssignment_0; }

		//Module
		public RuleCall getModuleModuleParserRuleCall_0_0() { return cModuleModuleParserRuleCall_0_0; }

		//open+=Open*
		public Assignment getOpenAssignment_1() { return cOpenAssignment_1; }

		//Open
		public RuleCall getOpenOpenParserRuleCall_1_0() { return cOpenOpenParserRuleCall_1_0; }

		//paragraph+=Paragraph*
		public Assignment getParagraphAssignment_2() { return cParagraphAssignment_2; }

		//Paragraph
		public RuleCall getParagraphParagraphParserRuleCall_2_0() { return cParagraphParagraphParserRuleCall_2_0; }
	}

	public class ModuleElements implements IParserRuleAccess {
		private final ParserRule rule = (ParserRule) GrammarUtil.findRuleForName(getGrammar(), "Module");
		private final Group cGroup = (Group)rule.eContents().get(1);
		private final Keyword cModuleKeyword_0 = (Keyword)cGroup.eContents().get(0);
		private final Assignment cModuleNameAssignment_1 = (Assignment)cGroup.eContents().get(1);
		private final RuleCall cModuleNameNameParserRuleCall_1_0 = (RuleCall)cModuleNameAssignment_1.eContents().get(0);
		private final Group cGroup_2 = (Group)cGroup.eContents().get(2);
		private final Keyword cLeftSquareBracketKeyword_2_0 = (Keyword)cGroup_2.eContents().get(0);
		private final Keyword cExactlyKeyword_2_1 = (Keyword)cGroup_2.eContents().get(1);
		private final Assignment cSuiteAssignment_2_2 = (Assignment)cGroup_2.eContents().get(2);
		private final RuleCall cSuiteNameParserRuleCall_2_2_0 = (RuleCall)cSuiteAssignment_2_2.eContents().get(0);
		private final Group cGroup_2_3 = (Group)cGroup_2.eContents().get(3);
		private final Keyword cCommaKeyword_2_3_0 = (Keyword)cGroup_2_3.eContents().get(0);
		private final Keyword cExactlyKeyword_2_3_1 = (Keyword)cGroup_2_3.eContents().get(1);
		private final RuleCall cINTTerminalRuleCall_2_3_2 = (RuleCall)cGroup_2_3.eContents().get(2);
		private final Keyword cRightSquareBracketKeyword_2_4 = (Keyword)cGroup_2.eContents().get(4);
		
		//Module:
		//  "module" moduleName=Name ("[" "exactly"? suite=Name ("," "exactly"? INT)* "]")?; 
		//	
		/// *
		//	module ::= "module" name  [ "["  ["exactly"] name  ("," ["exactly"] num)*    "]" ]
		// * /	
		//	 
		//	                
		//	
		/// *
		//	open ::= ["private"]  "open"  name  [ "[" ref,+ "]" ]  [ "as" name ]
		// * /
		public ParserRule getRule() { return rule; }

		//"module" moduleName=Name ("[" "exactly"? suite=Name ("," "exactly"? INT)* "]")?
		public Group getGroup() { return cGroup; }

		//"module"
		public Keyword getModuleKeyword_0() { return cModuleKeyword_0; }

		//moduleName=Name
		public Assignment getModuleNameAssignment_1() { return cModuleNameAssignment_1; }

		//Name
		public RuleCall getModuleNameNameParserRuleCall_1_0() { return cModuleNameNameParserRuleCall_1_0; }

		//("[" "exactly"? suite=Name ("," "exactly"? INT)* "]")?
		public Group getGroup_2() { return cGroup_2; }

		//"["
		public Keyword getLeftSquareBracketKeyword_2_0() { return cLeftSquareBracketKeyword_2_0; }

		//"exactly"?
		public Keyword getExactlyKeyword_2_1() { return cExactlyKeyword_2_1; }

		//suite=Name
		public Assignment getSuiteAssignment_2_2() { return cSuiteAssignment_2_2; }

		//Name
		public RuleCall getSuiteNameParserRuleCall_2_2_0() { return cSuiteNameParserRuleCall_2_2_0; }

		//("," "exactly"? INT)*
		public Group getGroup_2_3() { return cGroup_2_3; }

		//","
		public Keyword getCommaKeyword_2_3_0() { return cCommaKeyword_2_3_0; }

		//"exactly"?
		public Keyword getExactlyKeyword_2_3_1() { return cExactlyKeyword_2_3_1; }

		//INT
		public RuleCall getINTTerminalRuleCall_2_3_2() { return cINTTerminalRuleCall_2_3_2; }

		//"]"
		public Keyword getRightSquareBracketKeyword_2_4() { return cRightSquareBracketKeyword_2_4; }
	}

	public class OpenElements implements IParserRuleAccess {
		private final ParserRule rule = (ParserRule) GrammarUtil.findRuleForName(getGrammar(), "Open");
		private final Group cGroup = (Group)rule.eContents().get(1);
		private final Keyword cPrivateKeyword_0 = (Keyword)cGroup.eContents().get(0);
		private final Keyword cOpenKeyword_1 = (Keyword)cGroup.eContents().get(1);
		private final Assignment cNameAssignment_2 = (Assignment)cGroup.eContents().get(2);
		private final RuleCall cNameNameParserRuleCall_2_0 = (RuleCall)cNameAssignment_2.eContents().get(0);
		private final Group cGroup_3 = (Group)cGroup.eContents().get(3);
		private final Keyword cLeftSquareBracketKeyword_3_0 = (Keyword)cGroup_3.eContents().get(0);
		private final Assignment cRefAssignment_3_1 = (Assignment)cGroup_3.eContents().get(1);
		private final RuleCall cRefRefParserRuleCall_3_1_0 = (RuleCall)cRefAssignment_3_1.eContents().get(0);
		private final Group cGroup_3_2 = (Group)cGroup_3.eContents().get(2);
		private final Keyword cCommaKeyword_3_2_0 = (Keyword)cGroup_3_2.eContents().get(0);
		private final Assignment cRef2Assignment_3_2_1 = (Assignment)cGroup_3_2.eContents().get(1);
		private final RuleCall cRef2RefParserRuleCall_3_2_1_0 = (RuleCall)cRef2Assignment_3_2_1.eContents().get(0);
		private final Keyword cRightSquareBracketKeyword_3_3 = (Keyword)cGroup_3.eContents().get(3);
		private final Group cGroup_4 = (Group)cGroup.eContents().get(4);
		private final Keyword cAsKeyword_4_0 = (Keyword)cGroup_4.eContents().get(0);
		private final Assignment cName2Assignment_4_1 = (Assignment)cGroup_4.eContents().get(1);
		private final RuleCall cName2NameParserRuleCall_4_1_0 = (RuleCall)cName2Assignment_4_1.eContents().get(0);
		
		//Open:
		//  "private"? "open" name=Name ("[" ref=Ref ("," ref2+=Ref)* "]")? ("as" name2=Name)?; 
		//	
		/// *
		//	open ::= ["private"]  "open"  name  [ "[" ref,+ "]" ]  [ "as" name ]
		// * /	
		//	 
		//	                  
		//	
		/// *
		//	paragraph ::= factDecl | assertDecl | funDecl | cmdDecl | enumDecl | sigDecl
		// * /
		public ParserRule getRule() { return rule; }

		//"private"? "open" name=Name ("[" ref=Ref ("," ref2+=Ref)* "]")? ("as" name2=Name)?
		public Group getGroup() { return cGroup; }

		//"private"?
		public Keyword getPrivateKeyword_0() { return cPrivateKeyword_0; }

		//"open"
		public Keyword getOpenKeyword_1() { return cOpenKeyword_1; }

		//name=Name
		public Assignment getNameAssignment_2() { return cNameAssignment_2; }

		//Name
		public RuleCall getNameNameParserRuleCall_2_0() { return cNameNameParserRuleCall_2_0; }

		//("[" ref=Ref ("," ref2+=Ref)* "]")?
		public Group getGroup_3() { return cGroup_3; }

		//"["
		public Keyword getLeftSquareBracketKeyword_3_0() { return cLeftSquareBracketKeyword_3_0; }

		//ref=Ref
		public Assignment getRefAssignment_3_1() { return cRefAssignment_3_1; }

		//Ref
		public RuleCall getRefRefParserRuleCall_3_1_0() { return cRefRefParserRuleCall_3_1_0; }

		//("," ref2+=Ref)*
		public Group getGroup_3_2() { return cGroup_3_2; }

		//","
		public Keyword getCommaKeyword_3_2_0() { return cCommaKeyword_3_2_0; }

		//ref2+=Ref
		public Assignment getRef2Assignment_3_2_1() { return cRef2Assignment_3_2_1; }

		//Ref
		public RuleCall getRef2RefParserRuleCall_3_2_1_0() { return cRef2RefParserRuleCall_3_2_1_0; }

		//"]"
		public Keyword getRightSquareBracketKeyword_3_3() { return cRightSquareBracketKeyword_3_3; }

		//("as" name2=Name)?
		public Group getGroup_4() { return cGroup_4; }

		//"as"
		public Keyword getAsKeyword_4_0() { return cAsKeyword_4_0; }

		//name2=Name
		public Assignment getName2Assignment_4_1() { return cName2Assignment_4_1; }

		//Name
		public RuleCall getName2NameParserRuleCall_4_1_0() { return cName2NameParserRuleCall_4_1_0; }
	}

	public class ParagraphElements implements IParserRuleAccess {
		private final ParserRule rule = (ParserRule) GrammarUtil.findRuleForName(getGrammar(), "Paragraph");
		private final Alternatives cAlternatives = (Alternatives)rule.eContents().get(1);
		private final RuleCall cFactDeclParserRuleCall_0 = (RuleCall)cAlternatives.eContents().get(0);
		private final RuleCall cAssertDeclParserRuleCall_1 = (RuleCall)cAlternatives.eContents().get(1);
		private final RuleCall cFunDeclParserRuleCall_2 = (RuleCall)cAlternatives.eContents().get(2);
		private final RuleCall cPredDeclParserRuleCall_3 = (RuleCall)cAlternatives.eContents().get(3);
		private final RuleCall cRunDeclParserRuleCall_4 = (RuleCall)cAlternatives.eContents().get(4);
		private final RuleCall cCheckDeclParserRuleCall_5 = (RuleCall)cAlternatives.eContents().get(5);
		private final RuleCall cEnumDeclParserRuleCall_6 = (RuleCall)cAlternatives.eContents().get(6);
		private final RuleCall cSigDeclParserRuleCall_7 = (RuleCall)cAlternatives.eContents().get(7);
		
		//Paragraph:
		//  FactDecl|AssertDecl|FunDecl|PredDecl|RunDecl|CheckDecl|EnumDecl|SigDecl; 
		//	
		/// *
		//	paragraph ::= factDecl | assertDecl | funDecl | cmdDecl | enumDecl | sigDecl
		// * /
		//	 
		//		 
		//		 
		//			 
		//		 
		//			 
		//		 
		//		 
		//			 
		//
		/// *
		//	factDecl ::= "fact" [name] block
		// * /
		public ParserRule getRule() { return rule; }

		//FactDecl|AssertDecl|FunDecl|PredDecl|RunDecl|CheckDecl|EnumDecl|SigDecl 
		//	
		/// *
		//	paragraph ::= factDecl | assertDecl | funDecl | cmdDecl | enumDecl | sigDecl
		// * /
		//	 
		//		 
		//		 
		//			 
		//		 
		//			 
		//		 
		//		 
		//			 
		//
		/// *
		//	factDecl ::= "fact" [name] block
		// * /
		public Alternatives getAlternatives() { return cAlternatives; }

		//FactDecl
		public RuleCall getFactDeclParserRuleCall_0() { return cFactDeclParserRuleCall_0; }

		//AssertDecl
		public RuleCall getAssertDeclParserRuleCall_1() { return cAssertDeclParserRuleCall_1; }

		//FunDecl
		public RuleCall getFunDeclParserRuleCall_2() { return cFunDeclParserRuleCall_2; }

		//PredDecl
		public RuleCall getPredDeclParserRuleCall_3() { return cPredDeclParserRuleCall_3; }

		//RunDecl
		public RuleCall getRunDeclParserRuleCall_4() { return cRunDeclParserRuleCall_4; }

		//CheckDecl
		public RuleCall getCheckDeclParserRuleCall_5() { return cCheckDeclParserRuleCall_5; }

		//EnumDecl
		public RuleCall getEnumDeclParserRuleCall_6() { return cEnumDeclParserRuleCall_6; }

		//SigDecl
		public RuleCall getSigDeclParserRuleCall_7() { return cSigDeclParserRuleCall_7; }
	}

	public class FactDeclElements implements IParserRuleAccess {
		private final ParserRule rule = (ParserRule) GrammarUtil.findRuleForName(getGrammar(), "FactDecl");
		private final Group cGroup = (Group)rule.eContents().get(1);
		private final Keyword cFactKeyword_0 = (Keyword)cGroup.eContents().get(0);
		private final Assignment cFactNameAssignment_1 = (Assignment)cGroup.eContents().get(1);
		private final RuleCall cFactNameNameParserRuleCall_1_0 = (RuleCall)cFactNameAssignment_1.eContents().get(0);
		private final Assignment cBAssignment_2 = (Assignment)cGroup.eContents().get(2);
		private final RuleCall cBBlockBisParserRuleCall_2_0 = (RuleCall)cBAssignment_2.eContents().get(0);
		
		//FactDecl:
		//  "fact" factName=Name? b=BlockBis; 
		//
		/// *
		//	factDecl ::= "fact" [name] block
		// * /
		//	 
		//	    
		//
		/// *
		//	assertDecl ::= "assert" [name] block
		// * /
		public ParserRule getRule() { return rule; }

		//"fact" factName=Name? b=BlockBis
		public Group getGroup() { return cGroup; }

		//"fact"
		public Keyword getFactKeyword_0() { return cFactKeyword_0; }

		//factName=Name?
		public Assignment getFactNameAssignment_1() { return cFactNameAssignment_1; }

		//Name
		public RuleCall getFactNameNameParserRuleCall_1_0() { return cFactNameNameParserRuleCall_1_0; }

		//b=BlockBis
		public Assignment getBAssignment_2() { return cBAssignment_2; }

		//BlockBis
		public RuleCall getBBlockBisParserRuleCall_2_0() { return cBBlockBisParserRuleCall_2_0; }
	}

	public class AssertDeclElements implements IParserRuleAccess {
		private final ParserRule rule = (ParserRule) GrammarUtil.findRuleForName(getGrammar(), "AssertDecl");
		private final Group cGroup = (Group)rule.eContents().get(1);
		private final Keyword cAssertKeyword_0 = (Keyword)cGroup.eContents().get(0);
		private final Assignment cAssertNameAssignment_1 = (Assignment)cGroup.eContents().get(1);
		private final RuleCall cAssertNameNameParserRuleCall_1_0 = (RuleCall)cAssertNameAssignment_1.eContents().get(0);
		private final Assignment cBAssignment_2 = (Assignment)cGroup.eContents().get(2);
		private final RuleCall cBBlockBisParserRuleCall_2_0 = (RuleCall)cBAssignment_2.eContents().get(0);
		
		//AssertDecl:
		//  "assert" assertName=Name? b=BlockBis; 
		//
		/// *
		//	assertDecl ::= "assert" [name] block
		// * /
		//	 
		//	    
		//	
		/// *
		//	funDecl ::= ["private"] "fun" [ref "."] name "(" decl,* ")" ":" expr block
		//	funDecl ::= ["private"] "fun" [ref "."] name "[" decl,* "]" ":" expr block
		//	funDecl ::= ["private"] "fun" [ref "."] name                ":" expr block
		// * /
		public ParserRule getRule() { return rule; }

		//"assert" assertName=Name? b=BlockBis
		public Group getGroup() { return cGroup; }

		//"assert"
		public Keyword getAssertKeyword_0() { return cAssertKeyword_0; }

		//assertName=Name?
		public Assignment getAssertNameAssignment_1() { return cAssertNameAssignment_1; }

		//Name
		public RuleCall getAssertNameNameParserRuleCall_1_0() { return cAssertNameNameParserRuleCall_1_0; }

		//b=BlockBis
		public Assignment getBAssignment_2() { return cBAssignment_2; }

		//BlockBis
		public RuleCall getBBlockBisParserRuleCall_2_0() { return cBBlockBisParserRuleCall_2_0; }
	}

	public class FunDeclElements implements IParserRuleAccess {
		private final ParserRule rule = (ParserRule) GrammarUtil.findRuleForName(getGrammar(), "FunDecl");
		private final Group cGroup = (Group)rule.eContents().get(1);
		private final Keyword cPrivateKeyword_0 = (Keyword)cGroup.eContents().get(0);
		private final Keyword cFunKeyword_1 = (Keyword)cGroup.eContents().get(1);
		private final Group cGroup_2 = (Group)cGroup.eContents().get(2);
		private final Assignment cRefAssignment_2_0 = (Assignment)cGroup_2.eContents().get(0);
		private final RuleCall cRefRefParserRuleCall_2_0_0 = (RuleCall)cRefAssignment_2_0.eContents().get(0);
		private final Keyword cFullStopKeyword_2_1 = (Keyword)cGroup_2.eContents().get(1);
		private final Assignment cFunNameAssignment_3 = (Assignment)cGroup.eContents().get(3);
		private final RuleCall cFunNameNameParserRuleCall_3_0 = (RuleCall)cFunNameAssignment_3.eContents().get(0);
		private final Alternatives cAlternatives_4 = (Alternatives)cGroup.eContents().get(4);
		private final Group cGroup_4_0 = (Group)cAlternatives_4.eContents().get(0);
		private final Keyword cLeftSquareBracketKeyword_4_0_0 = (Keyword)cGroup_4_0.eContents().get(0);
		private final Group cGroup_4_0_1 = (Group)cGroup_4_0.eContents().get(1);
		private final Assignment cDeclAssignment_4_0_1_0 = (Assignment)cGroup_4_0_1.eContents().get(0);
		private final RuleCall cDeclDeclParserRuleCall_4_0_1_0_0 = (RuleCall)cDeclAssignment_4_0_1_0.eContents().get(0);
		private final Group cGroup_4_0_1_1 = (Group)cGroup_4_0_1.eContents().get(1);
		private final Keyword cCommaKeyword_4_0_1_1_0 = (Keyword)cGroup_4_0_1_1.eContents().get(0);
		private final Assignment cDecl2Assignment_4_0_1_1_1 = (Assignment)cGroup_4_0_1_1.eContents().get(1);
		private final RuleCall cDecl2DeclParserRuleCall_4_0_1_1_1_0 = (RuleCall)cDecl2Assignment_4_0_1_1_1.eContents().get(0);
		private final Keyword cRightSquareBracketKeyword_4_0_2 = (Keyword)cGroup_4_0.eContents().get(2);
		private final Group cGroup_4_1 = (Group)cAlternatives_4.eContents().get(1);
		private final Keyword cLeftParenthesisKeyword_4_1_0 = (Keyword)cGroup_4_1.eContents().get(0);
		private final Group cGroup_4_1_1 = (Group)cGroup_4_1.eContents().get(1);
		private final Assignment cDeclAssignment_4_1_1_0 = (Assignment)cGroup_4_1_1.eContents().get(0);
		private final RuleCall cDeclDeclParserRuleCall_4_1_1_0_0 = (RuleCall)cDeclAssignment_4_1_1_0.eContents().get(0);
		private final Group cGroup_4_1_1_1 = (Group)cGroup_4_1_1.eContents().get(1);
		private final Keyword cCommaKeyword_4_1_1_1_0 = (Keyword)cGroup_4_1_1_1.eContents().get(0);
		private final Assignment cDecl2Assignment_4_1_1_1_1 = (Assignment)cGroup_4_1_1_1.eContents().get(1);
		private final RuleCall cDecl2DeclParserRuleCall_4_1_1_1_1_0 = (RuleCall)cDecl2Assignment_4_1_1_1_1.eContents().get(0);
		private final Keyword cRightParenthesisKeyword_4_1_2 = (Keyword)cGroup_4_1.eContents().get(2);
		private final Keyword cColonKeyword_5 = (Keyword)cGroup.eContents().get(5);
		private final Assignment cExprAssignment_6 = (Assignment)cGroup.eContents().get(6);
		private final RuleCall cExprExpressionParserRuleCall_6_0 = (RuleCall)cExprAssignment_6.eContents().get(0);
		private final Assignment cBAssignment_7 = (Assignment)cGroup.eContents().get(7);
		private final RuleCall cBBlockBisParserRuleCall_7_0 = (RuleCall)cBAssignment_7.eContents().get(0);
		
		//FunDecl:
		//  "private"? "fun" (ref=Ref ".")? funName=Name ("[" (decl=Decl ("," decl2+=Decl)*)? "]"|"("
		//  (decl=Decl ("," decl2+=Decl)*)? ")") ":" expr=Expression b=BlockBis; 
		//	
		/// *
		//	funDecl ::= ["private"] "fun" [ref "."] name "(" decl,* ")" ":" expr block
		//	funDecl ::= ["private"] "fun" [ref "."] name "[" decl,* "]" ":" expr block
		//	funDecl ::= ["private"] "fun" [ref "."] name                ":" expr block
		// * /	
		//	 
		//	        	                               	 
		//
		/// *
		//	funDecl ::= ["private"] "pred" [ref "."] name "(" decl,* ")" block
		//	funDecl ::= ["private"] "pred" [ref "."] name "[" decl,* "]" block
		//	funDecl ::= ["private"] "pred" [ref "."] name                block
		// * /
		public ParserRule getRule() { return rule; }

		//"private"? "fun" (ref=Ref ".")? funName=Name ("[" (decl=Decl ("," decl2+=Decl)*)? "]"|"("
		//(decl=Decl ("," decl2+=Decl)*)? ")") ":" expr=Expression b=BlockBis
		public Group getGroup() { return cGroup; }

		//"private"?
		public Keyword getPrivateKeyword_0() { return cPrivateKeyword_0; }

		//"fun"
		public Keyword getFunKeyword_1() { return cFunKeyword_1; }

		//(ref=Ref ".")?
		public Group getGroup_2() { return cGroup_2; }

		//ref=Ref
		public Assignment getRefAssignment_2_0() { return cRefAssignment_2_0; }

		//Ref
		public RuleCall getRefRefParserRuleCall_2_0_0() { return cRefRefParserRuleCall_2_0_0; }

		//"."
		public Keyword getFullStopKeyword_2_1() { return cFullStopKeyword_2_1; }

		//funName=Name
		public Assignment getFunNameAssignment_3() { return cFunNameAssignment_3; }

		//Name
		public RuleCall getFunNameNameParserRuleCall_3_0() { return cFunNameNameParserRuleCall_3_0; }

		//"[" (decl=Decl ("," decl2+=Decl)*)? "]"|"(" (decl=Decl ("," decl2+=Decl)*)? ")"
		public Alternatives getAlternatives_4() { return cAlternatives_4; }

		//"[" (decl=Decl ("," decl2+=Decl)*)? "]"
		public Group getGroup_4_0() { return cGroup_4_0; }

		//"["
		public Keyword getLeftSquareBracketKeyword_4_0_0() { return cLeftSquareBracketKeyword_4_0_0; }

		//(decl=Decl ("," decl2+=Decl)*)?
		public Group getGroup_4_0_1() { return cGroup_4_0_1; }

		//decl=Decl
		public Assignment getDeclAssignment_4_0_1_0() { return cDeclAssignment_4_0_1_0; }

		//Decl
		public RuleCall getDeclDeclParserRuleCall_4_0_1_0_0() { return cDeclDeclParserRuleCall_4_0_1_0_0; }

		//("," decl2+=Decl)*
		public Group getGroup_4_0_1_1() { return cGroup_4_0_1_1; }

		//","
		public Keyword getCommaKeyword_4_0_1_1_0() { return cCommaKeyword_4_0_1_1_0; }

		//decl2+=Decl
		public Assignment getDecl2Assignment_4_0_1_1_1() { return cDecl2Assignment_4_0_1_1_1; }

		//Decl
		public RuleCall getDecl2DeclParserRuleCall_4_0_1_1_1_0() { return cDecl2DeclParserRuleCall_4_0_1_1_1_0; }

		//"]"
		public Keyword getRightSquareBracketKeyword_4_0_2() { return cRightSquareBracketKeyword_4_0_2; }

		//"(" (decl=Decl ("," decl2+=Decl)*)? ")"
		public Group getGroup_4_1() { return cGroup_4_1; }

		//"("
		public Keyword getLeftParenthesisKeyword_4_1_0() { return cLeftParenthesisKeyword_4_1_0; }

		//(decl=Decl ("," decl2+=Decl)*)?
		public Group getGroup_4_1_1() { return cGroup_4_1_1; }

		//decl=Decl
		public Assignment getDeclAssignment_4_1_1_0() { return cDeclAssignment_4_1_1_0; }

		//Decl
		public RuleCall getDeclDeclParserRuleCall_4_1_1_0_0() { return cDeclDeclParserRuleCall_4_1_1_0_0; }

		//("," decl2+=Decl)*
		public Group getGroup_4_1_1_1() { return cGroup_4_1_1_1; }

		//","
		public Keyword getCommaKeyword_4_1_1_1_0() { return cCommaKeyword_4_1_1_1_0; }

		//decl2+=Decl
		public Assignment getDecl2Assignment_4_1_1_1_1() { return cDecl2Assignment_4_1_1_1_1; }

		//Decl
		public RuleCall getDecl2DeclParserRuleCall_4_1_1_1_1_0() { return cDecl2DeclParserRuleCall_4_1_1_1_1_0; }

		//")"
		public Keyword getRightParenthesisKeyword_4_1_2() { return cRightParenthesisKeyword_4_1_2; }

		//":"
		public Keyword getColonKeyword_5() { return cColonKeyword_5; }

		//expr=Expression
		public Assignment getExprAssignment_6() { return cExprAssignment_6; }

		//Expression
		public RuleCall getExprExpressionParserRuleCall_6_0() { return cExprExpressionParserRuleCall_6_0; }

		//b=BlockBis
		public Assignment getBAssignment_7() { return cBAssignment_7; }

		//BlockBis
		public RuleCall getBBlockBisParserRuleCall_7_0() { return cBBlockBisParserRuleCall_7_0; }
	}

	public class PredDeclElements implements IParserRuleAccess {
		private final ParserRule rule = (ParserRule) GrammarUtil.findRuleForName(getGrammar(), "PredDecl");
		private final Group cGroup = (Group)rule.eContents().get(1);
		private final Keyword cPrivateKeyword_0 = (Keyword)cGroup.eContents().get(0);
		private final Assignment cPredAssignment_1 = (Assignment)cGroup.eContents().get(1);
		private final Keyword cPredPredKeyword_1_0 = (Keyword)cPredAssignment_1.eContents().get(0);
		private final Group cGroup_2 = (Group)cGroup.eContents().get(2);
		private final Assignment cRefAssignment_2_0 = (Assignment)cGroup_2.eContents().get(0);
		private final RuleCall cRefRefParserRuleCall_2_0_0 = (RuleCall)cRefAssignment_2_0.eContents().get(0);
		private final Keyword cFullStopKeyword_2_1 = (Keyword)cGroup_2.eContents().get(1);
		private final Assignment cPredNameAssignment_3 = (Assignment)cGroup.eContents().get(3);
		private final RuleCall cPredNameNameParserRuleCall_3_0 = (RuleCall)cPredNameAssignment_3.eContents().get(0);
		private final Alternatives cAlternatives_4 = (Alternatives)cGroup.eContents().get(4);
		private final Group cGroup_4_0 = (Group)cAlternatives_4.eContents().get(0);
		private final Keyword cLeftSquareBracketKeyword_4_0_0 = (Keyword)cGroup_4_0.eContents().get(0);
		private final Group cGroup_4_0_1 = (Group)cGroup_4_0.eContents().get(1);
		private final Assignment cDeclAssignment_4_0_1_0 = (Assignment)cGroup_4_0_1.eContents().get(0);
		private final RuleCall cDeclDeclParserRuleCall_4_0_1_0_0 = (RuleCall)cDeclAssignment_4_0_1_0.eContents().get(0);
		private final Group cGroup_4_0_1_1 = (Group)cGroup_4_0_1.eContents().get(1);
		private final Keyword cCommaKeyword_4_0_1_1_0 = (Keyword)cGroup_4_0_1_1.eContents().get(0);
		private final Assignment cDecl2Assignment_4_0_1_1_1 = (Assignment)cGroup_4_0_1_1.eContents().get(1);
		private final RuleCall cDecl2DeclParserRuleCall_4_0_1_1_1_0 = (RuleCall)cDecl2Assignment_4_0_1_1_1.eContents().get(0);
		private final Keyword cRightSquareBracketKeyword_4_0_2 = (Keyword)cGroup_4_0.eContents().get(2);
		private final Group cGroup_4_1 = (Group)cAlternatives_4.eContents().get(1);
		private final Keyword cLeftParenthesisKeyword_4_1_0 = (Keyword)cGroup_4_1.eContents().get(0);
		private final Group cGroup_4_1_1 = (Group)cGroup_4_1.eContents().get(1);
		private final Assignment cDeclAssignment_4_1_1_0 = (Assignment)cGroup_4_1_1.eContents().get(0);
		private final RuleCall cDeclDeclParserRuleCall_4_1_1_0_0 = (RuleCall)cDeclAssignment_4_1_1_0.eContents().get(0);
		private final Group cGroup_4_1_1_1 = (Group)cGroup_4_1_1.eContents().get(1);
		private final Keyword cCommaKeyword_4_1_1_1_0 = (Keyword)cGroup_4_1_1_1.eContents().get(0);
		private final Assignment cDecl2Assignment_4_1_1_1_1 = (Assignment)cGroup_4_1_1_1.eContents().get(1);
		private final RuleCall cDecl2DeclParserRuleCall_4_1_1_1_1_0 = (RuleCall)cDecl2Assignment_4_1_1_1_1.eContents().get(0);
		private final Keyword cRightParenthesisKeyword_4_1_2 = (Keyword)cGroup_4_1.eContents().get(2);
		private final Assignment cBAssignment_5 = (Assignment)cGroup.eContents().get(5);
		private final RuleCall cBBlockBisParserRuleCall_5_0 = (RuleCall)cBAssignment_5.eContents().get(0);
		
		//PredDecl:
		//  "private"? pred="pred" (ref=Ref ".")? predName=Name ("[" (decl=Decl ("," decl2+=Decl)*)?
		//  "]"|"(" (decl=Decl ("," decl2+=Decl)*)? ")")? b=BlockBis; 
		//
		/// *
		//	funDecl ::= ["private"] "pred" [ref "."] name "(" decl,* ")" block
		//	funDecl ::= ["private"] "pred" [ref "."] name "[" decl,* "]" block
		//	funDecl ::= ["private"] "pred" [ref "."] name                block
		// * /	
		//	 
		//	        	                            	 
		//
		/// *
		//	cmdDecl ::= [name ":"] ["run"|"check"] [name|block] scope //JUST RUN
		// * /
		public ParserRule getRule() { return rule; }

		//"private"? pred="pred" (ref=Ref ".")? predName=Name ("[" (decl=Decl ("," decl2+=Decl)*)?
		//"]"|"(" (decl=Decl ("," decl2+=Decl)*)? ")")? b=BlockBis
		public Group getGroup() { return cGroup; }

		//"private"?
		public Keyword getPrivateKeyword_0() { return cPrivateKeyword_0; }

		//pred="pred"
		public Assignment getPredAssignment_1() { return cPredAssignment_1; }

		//"pred"
		public Keyword getPredPredKeyword_1_0() { return cPredPredKeyword_1_0; }

		//(ref=Ref ".")?
		public Group getGroup_2() { return cGroup_2; }

		//ref=Ref
		public Assignment getRefAssignment_2_0() { return cRefAssignment_2_0; }

		//Ref
		public RuleCall getRefRefParserRuleCall_2_0_0() { return cRefRefParserRuleCall_2_0_0; }

		//"."
		public Keyword getFullStopKeyword_2_1() { return cFullStopKeyword_2_1; }

		//predName=Name
		public Assignment getPredNameAssignment_3() { return cPredNameAssignment_3; }

		//Name
		public RuleCall getPredNameNameParserRuleCall_3_0() { return cPredNameNameParserRuleCall_3_0; }

		//("[" (decl=Decl ("," decl2+=Decl)*)? "]"|"(" (decl=Decl ("," decl2+=Decl)*)? ")")?
		public Alternatives getAlternatives_4() { return cAlternatives_4; }

		//"[" (decl=Decl ("," decl2+=Decl)*)? "]"
		public Group getGroup_4_0() { return cGroup_4_0; }

		//"["
		public Keyword getLeftSquareBracketKeyword_4_0_0() { return cLeftSquareBracketKeyword_4_0_0; }

		//(decl=Decl ("," decl2+=Decl)*)?
		public Group getGroup_4_0_1() { return cGroup_4_0_1; }

		//decl=Decl
		public Assignment getDeclAssignment_4_0_1_0() { return cDeclAssignment_4_0_1_0; }

		//Decl
		public RuleCall getDeclDeclParserRuleCall_4_0_1_0_0() { return cDeclDeclParserRuleCall_4_0_1_0_0; }

		//("," decl2+=Decl)*
		public Group getGroup_4_0_1_1() { return cGroup_4_0_1_1; }

		//","
		public Keyword getCommaKeyword_4_0_1_1_0() { return cCommaKeyword_4_0_1_1_0; }

		//decl2+=Decl
		public Assignment getDecl2Assignment_4_0_1_1_1() { return cDecl2Assignment_4_0_1_1_1; }

		//Decl
		public RuleCall getDecl2DeclParserRuleCall_4_0_1_1_1_0() { return cDecl2DeclParserRuleCall_4_0_1_1_1_0; }

		//"]"
		public Keyword getRightSquareBracketKeyword_4_0_2() { return cRightSquareBracketKeyword_4_0_2; }

		//"(" (decl=Decl ("," decl2+=Decl)*)? ")"
		public Group getGroup_4_1() { return cGroup_4_1; }

		//"("
		public Keyword getLeftParenthesisKeyword_4_1_0() { return cLeftParenthesisKeyword_4_1_0; }

		//(decl=Decl ("," decl2+=Decl)*)?
		public Group getGroup_4_1_1() { return cGroup_4_1_1; }

		//decl=Decl
		public Assignment getDeclAssignment_4_1_1_0() { return cDeclAssignment_4_1_1_0; }

		//Decl
		public RuleCall getDeclDeclParserRuleCall_4_1_1_0_0() { return cDeclDeclParserRuleCall_4_1_1_0_0; }

		//("," decl2+=Decl)*
		public Group getGroup_4_1_1_1() { return cGroup_4_1_1_1; }

		//","
		public Keyword getCommaKeyword_4_1_1_1_0() { return cCommaKeyword_4_1_1_1_0; }

		//decl2+=Decl
		public Assignment getDecl2Assignment_4_1_1_1_1() { return cDecl2Assignment_4_1_1_1_1; }

		//Decl
		public RuleCall getDecl2DeclParserRuleCall_4_1_1_1_1_0() { return cDecl2DeclParserRuleCall_4_1_1_1_1_0; }

		//")"
		public Keyword getRightParenthesisKeyword_4_1_2() { return cRightParenthesisKeyword_4_1_2; }

		//b=BlockBis
		public Assignment getBAssignment_5() { return cBAssignment_5; }

		//BlockBis
		public RuleCall getBBlockBisParserRuleCall_5_0() { return cBBlockBisParserRuleCall_5_0; }
	}

	public class RunDeclElements implements IParserRuleAccess {
		private final ParserRule rule = (ParserRule) GrammarUtil.findRuleForName(getGrammar(), "RunDecl");
		private final Group cGroup = (Group)rule.eContents().get(1);
		private final Group cGroup_0 = (Group)cGroup.eContents().get(0);
		private final Assignment cRunNameAssignment_0_0 = (Assignment)cGroup_0.eContents().get(0);
		private final RuleCall cRunNameNameParserRuleCall_0_0_0 = (RuleCall)cRunNameAssignment_0_0.eContents().get(0);
		private final Keyword cColonKeyword_0_1 = (Keyword)cGroup_0.eContents().get(1);
		private final Assignment cRunAssignment_1 = (Assignment)cGroup.eContents().get(1);
		private final Keyword cRunRunKeyword_1_0 = (Keyword)cRunAssignment_1.eContents().get(0);
		private final Alternatives cAlternatives_2 = (Alternatives)cGroup.eContents().get(2);
		private final Assignment cName2Assignment_2_0 = (Assignment)cAlternatives_2.eContents().get(0);
		private final CrossReference cName2NameCrossReference_2_0_0 = (CrossReference)cName2Assignment_2_0.eContents().get(0);
		private final RuleCall cName2NameIDTerminalRuleCall_2_0_0_1 = (RuleCall)cName2NameCrossReference_2_0_0.eContents().get(1);
		private final Assignment cBAssignment_2_1 = (Assignment)cAlternatives_2.eContents().get(1);
		private final RuleCall cBBlockBisParserRuleCall_2_1_0 = (RuleCall)cBAssignment_2_1.eContents().get(0);
		private final Assignment cScopeAssignment_3 = (Assignment)cGroup.eContents().get(3);
		private final RuleCall cScopeScopeParserRuleCall_3_0 = (RuleCall)cScopeAssignment_3.eContents().get(0);
		
		//RunDecl:
		//  (runName=Name ":")? run="run" (name2=[Name]|b=BlockBis) scope=Scope; 
		//
		/// *
		//	cmdDecl ::= [name ":"] ["run"|"check"] [name|block] scope //JUST RUN
		// * /
		//	 
		//	            
		//
		/// *
		//	cmdDecl ::= [name ":"] ["run"|"check"] [name|block] scope //JUST CHECK
		// * /
		public ParserRule getRule() { return rule; }

		//(runName=Name ":")? run="run" (name2=[Name]|b=BlockBis) scope=Scope
		public Group getGroup() { return cGroup; }

		//(runName=Name ":")?
		public Group getGroup_0() { return cGroup_0; }

		//runName=Name
		public Assignment getRunNameAssignment_0_0() { return cRunNameAssignment_0_0; }

		//Name
		public RuleCall getRunNameNameParserRuleCall_0_0_0() { return cRunNameNameParserRuleCall_0_0_0; }

		//":"
		public Keyword getColonKeyword_0_1() { return cColonKeyword_0_1; }

		//run="run"
		public Assignment getRunAssignment_1() { return cRunAssignment_1; }

		//"run"
		public Keyword getRunRunKeyword_1_0() { return cRunRunKeyword_1_0; }

		//name2=[Name]|b=BlockBis
		public Alternatives getAlternatives_2() { return cAlternatives_2; }

		//name2=[Name]
		public Assignment getName2Assignment_2_0() { return cName2Assignment_2_0; }

		//[Name]
		public CrossReference getName2NameCrossReference_2_0_0() { return cName2NameCrossReference_2_0_0; }

		//ID
		public RuleCall getName2NameIDTerminalRuleCall_2_0_0_1() { return cName2NameIDTerminalRuleCall_2_0_0_1; }

		//b=BlockBis
		public Assignment getBAssignment_2_1() { return cBAssignment_2_1; }

		//BlockBis
		public RuleCall getBBlockBisParserRuleCall_2_1_0() { return cBBlockBisParserRuleCall_2_1_0; }

		//scope=Scope
		public Assignment getScopeAssignment_3() { return cScopeAssignment_3; }

		//Scope
		public RuleCall getScopeScopeParserRuleCall_3_0() { return cScopeScopeParserRuleCall_3_0; }
	}

	public class CheckDeclElements implements IParserRuleAccess {
		private final ParserRule rule = (ParserRule) GrammarUtil.findRuleForName(getGrammar(), "CheckDecl");
		private final Group cGroup = (Group)rule.eContents().get(1);
		private final Group cGroup_0 = (Group)cGroup.eContents().get(0);
		private final Assignment cCheckNameAssignment_0_0 = (Assignment)cGroup_0.eContents().get(0);
		private final RuleCall cCheckNameNameParserRuleCall_0_0_0 = (RuleCall)cCheckNameAssignment_0_0.eContents().get(0);
		private final Keyword cColonKeyword_0_1 = (Keyword)cGroup_0.eContents().get(1);
		private final Assignment cCheckAssignment_1 = (Assignment)cGroup.eContents().get(1);
		private final Keyword cCheckCheckKeyword_1_0 = (Keyword)cCheckAssignment_1.eContents().get(0);
		private final Alternatives cAlternatives_2 = (Alternatives)cGroup.eContents().get(2);
		private final Assignment cName2Assignment_2_0 = (Assignment)cAlternatives_2.eContents().get(0);
		private final CrossReference cName2NameCrossReference_2_0_0 = (CrossReference)cName2Assignment_2_0.eContents().get(0);
		private final RuleCall cName2NameIDTerminalRuleCall_2_0_0_1 = (RuleCall)cName2NameCrossReference_2_0_0.eContents().get(1);
		private final Assignment cBAssignment_2_1 = (Assignment)cAlternatives_2.eContents().get(1);
		private final RuleCall cBBlockBisParserRuleCall_2_1_0 = (RuleCall)cBAssignment_2_1.eContents().get(0);
		private final Assignment cScopeAssignment_3 = (Assignment)cGroup.eContents().get(3);
		private final RuleCall cScopeScopeParserRuleCall_3_0 = (RuleCall)cScopeAssignment_3.eContents().get(0);
		
		//CheckDecl:
		//  (checkName=Name ":")? check="check" (name2=[Name]|b=BlockBis) scope=Scope; 
		//
		/// *
		//	cmdDecl ::= [name ":"] ["run"|"check"] [name|block] scope //JUST CHECK
		// * /	
		//	 
		//	            
		//	
		/// *
		//	scope ::= "for" number                   ["expect" [0|1]]
		//	scope ::= "for" number "but" typescope,+ ["expect" [0|1]]
		//	scope ::= "for"              typescope,+ ["expect" [0|1]]
		//	scope ::=                                ["expect" [0|1]]
		//	
		// * /
		public ParserRule getRule() { return rule; }

		//(checkName=Name ":")? check="check" (name2=[Name]|b=BlockBis) scope=Scope
		public Group getGroup() { return cGroup; }

		//(checkName=Name ":")?
		public Group getGroup_0() { return cGroup_0; }

		//checkName=Name
		public Assignment getCheckNameAssignment_0_0() { return cCheckNameAssignment_0_0; }

		//Name
		public RuleCall getCheckNameNameParserRuleCall_0_0_0() { return cCheckNameNameParserRuleCall_0_0_0; }

		//":"
		public Keyword getColonKeyword_0_1() { return cColonKeyword_0_1; }

		//check="check"
		public Assignment getCheckAssignment_1() { return cCheckAssignment_1; }

		//"check"
		public Keyword getCheckCheckKeyword_1_0() { return cCheckCheckKeyword_1_0; }

		//name2=[Name]|b=BlockBis
		public Alternatives getAlternatives_2() { return cAlternatives_2; }

		//name2=[Name]
		public Assignment getName2Assignment_2_0() { return cName2Assignment_2_0; }

		//[Name]
		public CrossReference getName2NameCrossReference_2_0_0() { return cName2NameCrossReference_2_0_0; }

		//ID
		public RuleCall getName2NameIDTerminalRuleCall_2_0_0_1() { return cName2NameIDTerminalRuleCall_2_0_0_1; }

		//b=BlockBis
		public Assignment getBAssignment_2_1() { return cBAssignment_2_1; }

		//BlockBis
		public RuleCall getBBlockBisParserRuleCall_2_1_0() { return cBBlockBisParserRuleCall_2_1_0; }

		//scope=Scope
		public Assignment getScopeAssignment_3() { return cScopeAssignment_3; }

		//Scope
		public RuleCall getScopeScopeParserRuleCall_3_0() { return cScopeScopeParserRuleCall_3_0; }
	}

	public class ScopeElements implements IParserRuleAccess {
		private final ParserRule rule = (ParserRule) GrammarUtil.findRuleForName(getGrammar(), "Scope");
		private final Group cGroup = (Group)rule.eContents().get(1);
		private final Group cGroup_0 = (Group)cGroup.eContents().get(0);
		private final Keyword cForKeyword_0_0 = (Keyword)cGroup_0.eContents().get(0);
		private final Alternatives cAlternatives_0_1 = (Alternatives)cGroup_0.eContents().get(1);
		private final Group cGroup_0_1_0 = (Group)cAlternatives_0_1.eContents().get(0);
		private final RuleCall cINTTerminalRuleCall_0_1_0_0 = (RuleCall)cGroup_0_1_0.eContents().get(0);
		private final Group cGroup_0_1_0_1 = (Group)cGroup_0_1_0.eContents().get(1);
		private final Keyword cButKeyword_0_1_0_1_0 = (Keyword)cGroup_0_1_0_1.eContents().get(0);
		private final Assignment cTypescopeAssignment_0_1_0_1_1 = (Assignment)cGroup_0_1_0_1.eContents().get(1);
		private final RuleCall cTypescopeTypescopeParserRuleCall_0_1_0_1_1_0 = (RuleCall)cTypescopeAssignment_0_1_0_1_1.eContents().get(0);
		private final Group cGroup_0_1_0_1_2 = (Group)cGroup_0_1_0_1.eContents().get(2);
		private final Keyword cCommaKeyword_0_1_0_1_2_0 = (Keyword)cGroup_0_1_0_1_2.eContents().get(0);
		private final Assignment cTypescopeAssignment_0_1_0_1_2_1 = (Assignment)cGroup_0_1_0_1_2.eContents().get(1);
		private final RuleCall cTypescopeTypescopeParserRuleCall_0_1_0_1_2_1_0 = (RuleCall)cTypescopeAssignment_0_1_0_1_2_1.eContents().get(0);
		private final Group cGroup_0_1_1 = (Group)cAlternatives_0_1.eContents().get(1);
		private final Assignment cTypescopeAssignment_0_1_1_0 = (Assignment)cGroup_0_1_1.eContents().get(0);
		private final RuleCall cTypescopeTypescopeParserRuleCall_0_1_1_0_0 = (RuleCall)cTypescopeAssignment_0_1_1_0.eContents().get(0);
		private final Group cGroup_0_1_1_1 = (Group)cGroup_0_1_1.eContents().get(1);
		private final Keyword cCommaKeyword_0_1_1_1_0 = (Keyword)cGroup_0_1_1_1.eContents().get(0);
		private final Assignment cTypescopeAssignment_0_1_1_1_1 = (Assignment)cGroup_0_1_1_1.eContents().get(1);
		private final RuleCall cTypescopeTypescopeParserRuleCall_0_1_1_1_1_0 = (RuleCall)cTypescopeAssignment_0_1_1_1_1.eContents().get(0);
		private final Group cGroup_1 = (Group)cGroup.eContents().get(1);
		private final Keyword cExpectKeyword_1_0 = (Keyword)cGroup_1.eContents().get(0);
		private final Alternatives cAlternatives_1_1 = (Alternatives)cGroup_1.eContents().get(1);
		private final Keyword cDigitZeroKeyword_1_1_0 = (Keyword)cAlternatives_1_1.eContents().get(0);
		private final Keyword cDigitOneKeyword_1_1_1 = (Keyword)cAlternatives_1_1.eContents().get(1);
		
		//Scope:
		//  ("for" (INT ("but" typescope=Typescope ("," typescope=Typescope)*)?|typescope=
		//  Typescope ("," typescope=Typescope)*)?)? ("expect" ("0"|"1"))?; 
		//	
		/// *
		//	scope ::= "for" number                   ["expect" [0|1]]
		//	scope ::= "for" number "but" typescope,+ ["expect" [0|1]]
		//	scope ::= "for"              typescope,+ ["expect" [0|1]]
		//	scope ::=                                ["expect" [0|1]]
		//	
		// * /	
		//	 
		//	                	      	 										
		//
		/// *
		//	typescope ::= ["exactly"] number [name|"int"|"seq"]
		// * /
		public ParserRule getRule() { return rule; }

		//("for" (INT ("but" typescope=Typescope ("," typescope=Typescope)*)?|typescope=
		//Typescope ("," typescope=Typescope)*)?)? ("expect" ("0"|"1"))?
		public Group getGroup() { return cGroup; }

		//("for" (INT ("but" typescope=Typescope ("," typescope=Typescope)*)?|typescope=
		//Typescope ("," typescope=Typescope)*)?)?
		public Group getGroup_0() { return cGroup_0; }

		//"for"
		public Keyword getForKeyword_0_0() { return cForKeyword_0_0; }

		//(INT ("but" typescope=Typescope ("," typescope=Typescope)*)?|typescope=Typescope (","
		//typescope=Typescope)*)?
		public Alternatives getAlternatives_0_1() { return cAlternatives_0_1; }

		//INT ("but" typescope=Typescope ("," typescope=Typescope)*)?
		public Group getGroup_0_1_0() { return cGroup_0_1_0; }

		//INT
		public RuleCall getINTTerminalRuleCall_0_1_0_0() { return cINTTerminalRuleCall_0_1_0_0; }

		//("but" typescope=Typescope ("," typescope=Typescope)*)?
		public Group getGroup_0_1_0_1() { return cGroup_0_1_0_1; }

		//"but"
		public Keyword getButKeyword_0_1_0_1_0() { return cButKeyword_0_1_0_1_0; }

		//typescope=Typescope
		public Assignment getTypescopeAssignment_0_1_0_1_1() { return cTypescopeAssignment_0_1_0_1_1; }

		//Typescope
		public RuleCall getTypescopeTypescopeParserRuleCall_0_1_0_1_1_0() { return cTypescopeTypescopeParserRuleCall_0_1_0_1_1_0; }

		//("," typescope=Typescope)*
		public Group getGroup_0_1_0_1_2() { return cGroup_0_1_0_1_2; }

		//","
		public Keyword getCommaKeyword_0_1_0_1_2_0() { return cCommaKeyword_0_1_0_1_2_0; }

		//typescope=Typescope
		public Assignment getTypescopeAssignment_0_1_0_1_2_1() { return cTypescopeAssignment_0_1_0_1_2_1; }

		//Typescope
		public RuleCall getTypescopeTypescopeParserRuleCall_0_1_0_1_2_1_0() { return cTypescopeTypescopeParserRuleCall_0_1_0_1_2_1_0; }

		//typescope=Typescope ("," typescope=Typescope)*
		public Group getGroup_0_1_1() { return cGroup_0_1_1; }

		//typescope=Typescope
		public Assignment getTypescopeAssignment_0_1_1_0() { return cTypescopeAssignment_0_1_1_0; }

		//Typescope
		public RuleCall getTypescopeTypescopeParserRuleCall_0_1_1_0_0() { return cTypescopeTypescopeParserRuleCall_0_1_1_0_0; }

		//("," typescope=Typescope)*
		public Group getGroup_0_1_1_1() { return cGroup_0_1_1_1; }

		//","
		public Keyword getCommaKeyword_0_1_1_1_0() { return cCommaKeyword_0_1_1_1_0; }

		//typescope=Typescope
		public Assignment getTypescopeAssignment_0_1_1_1_1() { return cTypescopeAssignment_0_1_1_1_1; }

		//Typescope
		public RuleCall getTypescopeTypescopeParserRuleCall_0_1_1_1_1_0() { return cTypescopeTypescopeParserRuleCall_0_1_1_1_1_0; }

		//("expect" ("0"|"1"))?
		public Group getGroup_1() { return cGroup_1; }

		//"expect"
		public Keyword getExpectKeyword_1_0() { return cExpectKeyword_1_0; }

		//"0"|"1"
		public Alternatives getAlternatives_1_1() { return cAlternatives_1_1; }

		//"0"
		public Keyword getDigitZeroKeyword_1_1_0() { return cDigitZeroKeyword_1_1_0; }

		//"1"
		public Keyword getDigitOneKeyword_1_1_1() { return cDigitOneKeyword_1_1_1; }
	}

	public class TypescopeElements implements IParserRuleAccess {
		private final ParserRule rule = (ParserRule) GrammarUtil.findRuleForName(getGrammar(), "Typescope");
		private final Group cGroup = (Group)rule.eContents().get(1);
		private final Keyword cExactlyKeyword_0 = (Keyword)cGroup.eContents().get(0);
		private final RuleCall cINTTerminalRuleCall_1 = (RuleCall)cGroup.eContents().get(1);
		private final Alternatives cAlternatives_2 = (Alternatives)cGroup.eContents().get(2);
		private final Assignment cNAssignment_2_0 = (Assignment)cAlternatives_2.eContents().get(0);
		private final CrossReference cNNameCrossReference_2_0_0 = (CrossReference)cNAssignment_2_0.eContents().get(0);
		private final RuleCall cNNameIDTerminalRuleCall_2_0_0_1 = (RuleCall)cNNameCrossReference_2_0_0.eContents().get(1);
		private final Alternatives cAlternatives_2_1 = (Alternatives)cAlternatives_2.eContents().get(1);
		private final Keyword cIntKeyword_2_1_0 = (Keyword)cAlternatives_2_1.eContents().get(0);
		private final Keyword cSeqKeyword_2_1_1 = (Keyword)cAlternatives_2_1.eContents().get(1);
		
		//Typescope:
		//  "exactly"? INT (n=[Name]|("int"|"seq")); 										
		//
		/// *
		//	typescope ::= ["exactly"] number [name|"int"|"seq"]
		// * /
		//	 
		//	    	 
		//		
		/// *
		//	enumDecl ::= "enum" name "{" name  ("," name)*  "}"
		// * /
		public ParserRule getRule() { return rule; }

		//"exactly"? INT (n=[Name]|("int"|"seq"))
		public Group getGroup() { return cGroup; }

		//"exactly"?
		public Keyword getExactlyKeyword_0() { return cExactlyKeyword_0; }

		//INT
		public RuleCall getINTTerminalRuleCall_1() { return cINTTerminalRuleCall_1; }

		//n=[Name]|("int"|"seq")
		public Alternatives getAlternatives_2() { return cAlternatives_2; }

		//n=[Name]
		public Assignment getNAssignment_2_0() { return cNAssignment_2_0; }

		//[Name]
		public CrossReference getNNameCrossReference_2_0_0() { return cNNameCrossReference_2_0_0; }

		//ID
		public RuleCall getNNameIDTerminalRuleCall_2_0_0_1() { return cNNameIDTerminalRuleCall_2_0_0_1; }

		//"int"|"seq"
		public Alternatives getAlternatives_2_1() { return cAlternatives_2_1; }

		//"int"
		public Keyword getIntKeyword_2_1_0() { return cIntKeyword_2_1_0; }

		//"seq"
		public Keyword getSeqKeyword_2_1_1() { return cSeqKeyword_2_1_1; }
	}

	public class EnumDeclElements implements IParserRuleAccess {
		private final ParserRule rule = (ParserRule) GrammarUtil.findRuleForName(getGrammar(), "EnumDecl");
		private final Group cGroup = (Group)rule.eContents().get(1);
		private final Keyword cEnumKeyword_0 = (Keyword)cGroup.eContents().get(0);
		private final Assignment cEnumNameAssignment_1 = (Assignment)cGroup.eContents().get(1);
		private final RuleCall cEnumNameNameParserRuleCall_1_0 = (RuleCall)cEnumNameAssignment_1.eContents().get(0);
		private final Keyword cLeftCurlyBracketKeyword_2 = (Keyword)cGroup.eContents().get(2);
		private final Assignment cName2Assignment_3 = (Assignment)cGroup.eContents().get(3);
		private final RuleCall cName2NameParserRuleCall_3_0 = (RuleCall)cName2Assignment_3.eContents().get(0);
		private final Group cGroup_4 = (Group)cGroup.eContents().get(4);
		private final Keyword cCommaKeyword_4_0 = (Keyword)cGroup_4.eContents().get(0);
		private final Assignment cName3Assignment_4_1 = (Assignment)cGroup_4.eContents().get(1);
		private final RuleCall cName3NameParserRuleCall_4_1_0 = (RuleCall)cName3Assignment_4_1.eContents().get(0);
		private final Keyword cRightCurlyBracketKeyword_5 = (Keyword)cGroup.eContents().get(5);
		
		//EnumDecl:
		//  "enum" enumName=Name "{" name2=Name ("," name3+=Name)* "}"; 
		//		
		/// *
		//	enumDecl ::= "enum" name "{" name  ("," name)*  "}"
		// * /
		//	 
		//	            
		//
		/// *
		//	sigDecl ::= sigQual* "sig" name,+ [sigExt] "{" decl,* "}" [block]
		// * /
		public ParserRule getRule() { return rule; }

		//"enum" enumName=Name "{" name2=Name ("," name3+=Name)* "}"
		public Group getGroup() { return cGroup; }

		//"enum"
		public Keyword getEnumKeyword_0() { return cEnumKeyword_0; }

		//enumName=Name
		public Assignment getEnumNameAssignment_1() { return cEnumNameAssignment_1; }

		//Name
		public RuleCall getEnumNameNameParserRuleCall_1_0() { return cEnumNameNameParserRuleCall_1_0; }

		//"{"
		public Keyword getLeftCurlyBracketKeyword_2() { return cLeftCurlyBracketKeyword_2; }

		//name2=Name
		public Assignment getName2Assignment_3() { return cName2Assignment_3; }

		//Name
		public RuleCall getName2NameParserRuleCall_3_0() { return cName2NameParserRuleCall_3_0; }

		//("," name3+=Name)*
		public Group getGroup_4() { return cGroup_4; }

		//","
		public Keyword getCommaKeyword_4_0() { return cCommaKeyword_4_0; }

		//name3+=Name
		public Assignment getName3Assignment_4_1() { return cName3Assignment_4_1; }

		//Name
		public RuleCall getName3NameParserRuleCall_4_1_0() { return cName3NameParserRuleCall_4_1_0; }

		//"}"
		public Keyword getRightCurlyBracketKeyword_5() { return cRightCurlyBracketKeyword_5; }
	}

	public class SigDeclElements implements IParserRuleAccess {
		private final ParserRule rule = (ParserRule) GrammarUtil.findRuleForName(getGrammar(), "SigDecl");
		private final Group cGroup = (Group)rule.eContents().get(1);
		private final RuleCall cSigQualParserRuleCall_0 = (RuleCall)cGroup.eContents().get(0);
		private final Keyword cSigKeyword_1 = (Keyword)cGroup.eContents().get(1);
		private final Assignment cSigNameAssignment_2 = (Assignment)cGroup.eContents().get(2);
		private final RuleCall cSigNameNameParserRuleCall_2_0 = (RuleCall)cSigNameAssignment_2.eContents().get(0);
		private final Group cGroup_3 = (Group)cGroup.eContents().get(3);
		private final Keyword cCommaKeyword_3_0 = (Keyword)cGroup_3.eContents().get(0);
		private final Assignment cName2Assignment_3_1 = (Assignment)cGroup_3.eContents().get(1);
		private final RuleCall cName2NameParserRuleCall_3_1_0 = (RuleCall)cName2Assignment_3_1.eContents().get(0);
		private final Assignment cSigExtAssignment_4 = (Assignment)cGroup.eContents().get(4);
		private final RuleCall cSigExtSigExtParserRuleCall_4_0 = (RuleCall)cSigExtAssignment_4.eContents().get(0);
		private final Keyword cLeftCurlyBracketKeyword_5 = (Keyword)cGroup.eContents().get(5);
		private final Group cGroup_6 = (Group)cGroup.eContents().get(6);
		private final Assignment cDeclAssignment_6_0 = (Assignment)cGroup_6.eContents().get(0);
		private final RuleCall cDeclDeclParserRuleCall_6_0_0 = (RuleCall)cDeclAssignment_6_0.eContents().get(0);
		private final Group cGroup_6_1 = (Group)cGroup_6.eContents().get(1);
		private final Keyword cCommaKeyword_6_1_0 = (Keyword)cGroup_6_1.eContents().get(0);
		private final Assignment cDecl2Assignment_6_1_1 = (Assignment)cGroup_6_1.eContents().get(1);
		private final RuleCall cDecl2DeclParserRuleCall_6_1_1_0 = (RuleCall)cDecl2Assignment_6_1_1.eContents().get(0);
		private final Keyword cRightCurlyBracketKeyword_7 = (Keyword)cGroup.eContents().get(7);
		private final Assignment cBAssignment_8 = (Assignment)cGroup.eContents().get(8);
		private final RuleCall cBBlockBisParserRuleCall_8_0 = (RuleCall)cBAssignment_8.eContents().get(0);
		
		//SigDecl:
		//  SigQual* "sig" sigName=Name ("," name2+=Name)* sigExt=SigExt? "{" (decl=Decl ("," decl2+=
		//  Decl)*)? "}" b=BlockBis?; 
		//
		/// *
		//	sigDecl ::= sigQual* "sig" name,+ [sigExt] "{" decl,* "}" [block]
		// * /	
		//	 
		//	                        
		//	
		/// *
		//	sigQual ::= "abstract" | "lone" | "one" | "some" | "private"	
		// * /
		public ParserRule getRule() { return rule; }

		//SigQual* "sig" sigName=Name ("," name2+=Name)* sigExt=SigExt? "{" (decl=Decl ("," decl2+=
		//Decl)*)? "}" b=BlockBis?
		public Group getGroup() { return cGroup; }

		//SigQual*
		public RuleCall getSigQualParserRuleCall_0() { return cSigQualParserRuleCall_0; }

		//"sig"
		public Keyword getSigKeyword_1() { return cSigKeyword_1; }

		//sigName=Name
		public Assignment getSigNameAssignment_2() { return cSigNameAssignment_2; }

		//Name
		public RuleCall getSigNameNameParserRuleCall_2_0() { return cSigNameNameParserRuleCall_2_0; }

		//("," name2+=Name)*
		public Group getGroup_3() { return cGroup_3; }

		//","
		public Keyword getCommaKeyword_3_0() { return cCommaKeyword_3_0; }

		//name2+=Name
		public Assignment getName2Assignment_3_1() { return cName2Assignment_3_1; }

		//Name
		public RuleCall getName2NameParserRuleCall_3_1_0() { return cName2NameParserRuleCall_3_1_0; }

		//sigExt=SigExt?
		public Assignment getSigExtAssignment_4() { return cSigExtAssignment_4; }

		//SigExt
		public RuleCall getSigExtSigExtParserRuleCall_4_0() { return cSigExtSigExtParserRuleCall_4_0; }

		//"{"
		public Keyword getLeftCurlyBracketKeyword_5() { return cLeftCurlyBracketKeyword_5; }

		//(decl=Decl ("," decl2+=Decl)*)?
		public Group getGroup_6() { return cGroup_6; }

		//decl=Decl
		public Assignment getDeclAssignment_6_0() { return cDeclAssignment_6_0; }

		//Decl
		public RuleCall getDeclDeclParserRuleCall_6_0_0() { return cDeclDeclParserRuleCall_6_0_0; }

		//("," decl2+=Decl)*
		public Group getGroup_6_1() { return cGroup_6_1; }

		//","
		public Keyword getCommaKeyword_6_1_0() { return cCommaKeyword_6_1_0; }

		//decl2+=Decl
		public Assignment getDecl2Assignment_6_1_1() { return cDecl2Assignment_6_1_1; }

		//Decl
		public RuleCall getDecl2DeclParserRuleCall_6_1_1_0() { return cDecl2DeclParserRuleCall_6_1_1_0; }

		//"}"
		public Keyword getRightCurlyBracketKeyword_7() { return cRightCurlyBracketKeyword_7; }

		//b=BlockBis?
		public Assignment getBAssignment_8() { return cBAssignment_8; }

		//BlockBis
		public RuleCall getBBlockBisParserRuleCall_8_0() { return cBBlockBisParserRuleCall_8_0; }
	}

	public class SigQualElements implements IParserRuleAccess {
		private final ParserRule rule = (ParserRule) GrammarUtil.findRuleForName(getGrammar(), "SigQual");
		private final Alternatives cAlternatives = (Alternatives)rule.eContents().get(1);
		private final Keyword cAbstractKeyword_0 = (Keyword)cAlternatives.eContents().get(0);
		private final Keyword cLoneKeyword_1 = (Keyword)cAlternatives.eContents().get(1);
		private final Keyword cOneKeyword_2 = (Keyword)cAlternatives.eContents().get(2);
		private final Keyword cSomeKeyword_3 = (Keyword)cAlternatives.eContents().get(3);
		private final Keyword cPrivateKeyword_4 = (Keyword)cAlternatives.eContents().get(4);
		
		//SigQual returns ecore::EString:
		//  "abstract"|"lone"|"one"|"some"|"private"; 
		//	
		/// *
		//	sigQual ::= "abstract" | "lone" | "one" | "some" | "private"	
		// * /
		//	 
		//			 
		//				 
		//				 
		//				 
		//			 
		//
		/// *
		//	sigExt ::= "extends" ref
		//	sigExt ::= "in" ref ["+" ref]*
		// * /
		public ParserRule getRule() { return rule; }

		//"abstract"|"lone"|"one"|"some"|"private" 
		//	
		/// *
		//	sigQual ::= "abstract" | "lone" | "one" | "some" | "private"	
		// * /
		//	 
		//			 
		//				 
		//				 
		//				 
		//			 
		//
		/// *
		//	sigExt ::= "extends" ref
		//	sigExt ::= "in" ref ["+" ref]*
		// * /
		public Alternatives getAlternatives() { return cAlternatives; }

		//"abstract"
		public Keyword getAbstractKeyword_0() { return cAbstractKeyword_0; }

		//"lone"
		public Keyword getLoneKeyword_1() { return cLoneKeyword_1; }

		//"one"
		public Keyword getOneKeyword_2() { return cOneKeyword_2; }

		//"some"
		public Keyword getSomeKeyword_3() { return cSomeKeyword_3; }

		//"private"
		public Keyword getPrivateKeyword_4() { return cPrivateKeyword_4; }
	}

	public class SigExtElements implements IParserRuleAccess {
		private final ParserRule rule = (ParserRule) GrammarUtil.findRuleForName(getGrammar(), "SigExt");
		private final Alternatives cAlternatives = (Alternatives)rule.eContents().get(1);
		private final Group cGroup_0 = (Group)cAlternatives.eContents().get(0);
		private final Keyword cExtendsKeyword_0_0 = (Keyword)cGroup_0.eContents().get(0);
		private final Assignment cRefAssignment_0_1 = (Assignment)cGroup_0.eContents().get(1);
		private final RuleCall cRefRefParserRuleCall_0_1_0 = (RuleCall)cRefAssignment_0_1.eContents().get(0);
		private final Group cGroup_1 = (Group)cAlternatives.eContents().get(1);
		private final Keyword cInKeyword_1_0 = (Keyword)cGroup_1.eContents().get(0);
		private final Assignment cRefAssignment_1_1 = (Assignment)cGroup_1.eContents().get(1);
		private final RuleCall cRefRefParserRuleCall_1_1_0 = (RuleCall)cRefAssignment_1_1.eContents().get(0);
		private final Group cGroup_1_2 = (Group)cGroup_1.eContents().get(2);
		private final Keyword cPlusSignKeyword_1_2_0 = (Keyword)cGroup_1_2.eContents().get(0);
		private final Assignment cRef2Assignment_1_2_1 = (Assignment)cGroup_1_2.eContents().get(1);
		private final RuleCall cRef2RefParserRuleCall_1_2_1_0 = (RuleCall)cRef2Assignment_1_2_1.eContents().get(0);
		
		//SigExt:
		//  "extends" ref=Ref|"in" ref=Ref ("+" ref2+=Ref)*; 
		//
		/// *
		//	sigExt ::= "extends" ref
		//	sigExt ::= "in" ref ["+" ref]*
		// * /	
		//	 
		//	  				   
		//	      	 
		//
		/// *
		//	expr ::= "let" letDecl,+ blockOrBar						1./	
		//       | quant decl,+    blockOrBar							2./
		//       | unOp expr											3./
		//       | expr binOp   expr									4./
		//       | expr arrowOp expr									5./
		//       | expr ["!"|"not"]? compareOp expr					6./
		//       | expr ["=>"|"implies"] expr "else" expr //PROBLEM	7./
		//       | expr "[" expr,* "]"								8./
		//       |     number											9./
		//       | "-" number											10./
		//       | "none"												11./
		//       | "iden"												12./
		//       | "univ"												13./
		//       | "Int"												14./
		//       | "seq/Int"											15./
		//       | "(" expr ")"										16./
		//       | ["@"] Name											17./
		//       | block												18./
		//       | "{" decl,+ blockOrBar "}"							19./
		//	
		// * /
		public ParserRule getRule() { return rule; }

		//"extends" ref=Ref|"in" ref=Ref ("+" ref2+=Ref)* 
		//
		/// *
		//	sigExt ::= "extends" ref
		//	sigExt ::= "in" ref ["+" ref]*
		// * /	
		//	 
		//	  				   
		//	      	 
		//
		/// *
		//	expr ::= "let" letDecl,+ blockOrBar						1./	
		//       | quant decl,+    blockOrBar							2./
		//       | unOp expr											3./
		//       | expr binOp   expr									4./
		//       | expr arrowOp expr									5./
		//       | expr ["!"|"not"]? compareOp expr					6./
		//       | expr ["=>"|"implies"] expr "else" expr //PROBLEM	7./
		//       | expr "[" expr,* "]"								8./
		//       |     number											9./
		//       | "-" number											10./
		//       | "none"												11./
		//       | "iden"												12./
		//       | "univ"												13./
		//       | "Int"												14./
		//       | "seq/Int"											15./
		//       | "(" expr ")"										16./
		//       | ["@"] Name											17./
		//       | block												18./
		//       | "{" decl,+ blockOrBar "}"							19./
		//	
		// * /
		public Alternatives getAlternatives() { return cAlternatives; }

		//"extends" ref=Ref
		public Group getGroup_0() { return cGroup_0; }

		//"extends"
		public Keyword getExtendsKeyword_0_0() { return cExtendsKeyword_0_0; }

		//ref=Ref
		public Assignment getRefAssignment_0_1() { return cRefAssignment_0_1; }

		//Ref
		public RuleCall getRefRefParserRuleCall_0_1_0() { return cRefRefParserRuleCall_0_1_0; }

		//"in" ref=Ref ("+" ref2+=Ref)*
		public Group getGroup_1() { return cGroup_1; }

		//"in"
		public Keyword getInKeyword_1_0() { return cInKeyword_1_0; }

		//ref=Ref
		public Assignment getRefAssignment_1_1() { return cRefAssignment_1_1; }

		//Ref
		public RuleCall getRefRefParserRuleCall_1_1_0() { return cRefRefParserRuleCall_1_1_0; }

		//("+" ref2+=Ref)*
		public Group getGroup_1_2() { return cGroup_1_2; }

		//"+"
		public Keyword getPlusSignKeyword_1_2_0() { return cPlusSignKeyword_1_2_0; }

		//ref2+=Ref
		public Assignment getRef2Assignment_1_2_1() { return cRef2Assignment_1_2_1; }

		//Ref
		public RuleCall getRef2RefParserRuleCall_1_2_1_0() { return cRef2RefParserRuleCall_1_2_1_0; }
	}

	public class ExpressionElements implements IParserRuleAccess {
		private final ParserRule rule = (ParserRule) GrammarUtil.findRuleForName(getGrammar(), "Expression");
		private final Group cGroup = (Group)rule.eContents().get(1);
		private final Assignment cTermAssignment_0 = (Assignment)cGroup.eContents().get(0);
		private final RuleCall cTermTerminalExprParserRuleCall_0_0 = (RuleCall)cTermAssignment_0.eContents().get(0);
		private final Alternatives cAlternatives_1 = (Alternatives)cGroup.eContents().get(1);
		private final Group cGroup_1_0 = (Group)cAlternatives_1.eContents().get(0);
		private final Keyword cLeftSquareBracketKeyword_1_0_0 = (Keyword)cGroup_1_0.eContents().get(0);
		private final Assignment cExprTAssignment_1_0_1 = (Assignment)cGroup_1_0.eContents().get(1);
		private final RuleCall cExprTExpressionParserRuleCall_1_0_1_0 = (RuleCall)cExprTAssignment_1_0_1.eContents().get(0);
		private final Keyword cRightSquareBracketKeyword_1_0_2 = (Keyword)cGroup_1_0.eContents().get(2);
		private final Group cGroup_1_1 = (Group)cAlternatives_1.eContents().get(1);
		private final Assignment cOpAssignment_1_1_0 = (Assignment)cGroup_1_1.eContents().get(0);
		private final Alternatives cOpAlternatives_1_1_0_0 = (Alternatives)cOpAssignment_1_1_0.eContents().get(0);
		private final Keyword cOpPlusSignKeyword_1_1_0_0_0 = (Keyword)cOpAlternatives_1_1_0_0.eContents().get(0);
		private final Keyword cOpAmpersandKeyword_1_1_0_0_1 = (Keyword)cOpAlternatives_1_1_0_0.eContents().get(1);
		private final Keyword cOpFullStopKeyword_1_1_0_0_2 = (Keyword)cOpAlternatives_1_1_0_0.eContents().get(2);
		private final Keyword cOpHyphenMinusKeyword_1_1_0_0_3 = (Keyword)cOpAlternatives_1_1_0_0.eContents().get(3);
		private final Keyword cOpVerticalLineVerticalLineKeyword_1_1_0_0_4 = (Keyword)cOpAlternatives_1_1_0_0.eContents().get(4);
		private final Keyword cOpOrKeyword_1_1_0_0_5 = (Keyword)cOpAlternatives_1_1_0_0.eContents().get(5);
		private final Keyword cOpAmpersandAmpersandKeyword_1_1_0_0_6 = (Keyword)cOpAlternatives_1_1_0_0.eContents().get(6);
		private final Keyword cOpAndKeyword_1_1_0_0_7 = (Keyword)cOpAlternatives_1_1_0_0.eContents().get(7);
		private final Keyword cOpLessThanSignEqualsSignGreaterThanSignKeyword_1_1_0_0_8 = (Keyword)cOpAlternatives_1_1_0_0.eContents().get(8);
		private final Keyword cOpIffKeyword_1_1_0_0_9 = (Keyword)cOpAlternatives_1_1_0_0.eContents().get(9);
		private final Keyword cOpPlusSignPlusSignKeyword_1_1_0_0_10 = (Keyword)cOpAlternatives_1_1_0_0.eContents().get(10);
		private final Keyword cOpLessThanSignColonKeyword_1_1_0_0_11 = (Keyword)cOpAlternatives_1_1_0_0.eContents().get(11);
		private final Keyword cOpColonGreaterThanSignKeyword_1_1_0_0_12 = (Keyword)cOpAlternatives_1_1_0_0.eContents().get(12);
		private final Keyword cOpLessThanSignLessThanSignKeyword_1_1_0_0_13 = (Keyword)cOpAlternatives_1_1_0_0.eContents().get(13);
		private final Keyword cOpGreaterThanSignGreaterThanSignKeyword_1_1_0_0_14 = (Keyword)cOpAlternatives_1_1_0_0.eContents().get(14);
		private final Keyword cOpGreaterThanSignGreaterThanSignGreaterThanSignKeyword_1_1_0_0_15 = (Keyword)cOpAlternatives_1_1_0_0.eContents().get(15);
		private final Assignment cRightAssignment_1_1_1 = (Assignment)cGroup_1_1.eContents().get(1);
		private final RuleCall cRightExpressionParserRuleCall_1_1_1_0 = (RuleCall)cRightAssignment_1_1_1.eContents().get(0);
		private final Group cGroup_1_2 = (Group)cAlternatives_1.eContents().get(2);
		private final Alternatives cAlternatives_1_2_0 = (Alternatives)cGroup_1_2.eContents().get(0);
		private final Keyword cExclamationMarkKeyword_1_2_0_0 = (Keyword)cAlternatives_1_2_0.eContents().get(0);
		private final Keyword cNotKeyword_1_2_0_1 = (Keyword)cAlternatives_1_2_0.eContents().get(1);
		private final Assignment cOpAssignment_1_2_1 = (Assignment)cGroup_1_2.eContents().get(1);
		private final Alternatives cOpAlternatives_1_2_1_0 = (Alternatives)cOpAssignment_1_2_1.eContents().get(0);
		private final Keyword cOpEqualsSignKeyword_1_2_1_0_0 = (Keyword)cOpAlternatives_1_2_1_0.eContents().get(0);
		private final Keyword cOpInKeyword_1_2_1_0_1 = (Keyword)cOpAlternatives_1_2_1_0.eContents().get(1);
		private final Keyword cOpLessThanSignKeyword_1_2_1_0_2 = (Keyword)cOpAlternatives_1_2_1_0.eContents().get(2);
		private final Keyword cOpGreaterThanSignKeyword_1_2_1_0_3 = (Keyword)cOpAlternatives_1_2_1_0.eContents().get(3);
		private final Keyword cOpLessThanSignEqualsSignKeyword_1_2_1_0_4 = (Keyword)cOpAlternatives_1_2_1_0.eContents().get(4);
		private final Keyword cOpEqualsSignGreaterThanSignKeyword_1_2_1_0_5 = (Keyword)cOpAlternatives_1_2_1_0.eContents().get(5);
		private final Assignment cRightAssignment_1_2_2 = (Assignment)cGroup_1_2.eContents().get(2);
		private final RuleCall cRightExpressionParserRuleCall_1_2_2_0 = (RuleCall)cRightAssignment_1_2_2.eContents().get(0);
		private final Group cGroup_1_3 = (Group)cAlternatives_1.eContents().get(3);
		private final Assignment cArrowOpAssignment_1_3_0 = (Assignment)cGroup_1_3.eContents().get(0);
		private final RuleCall cArrowOpArrowOpParserRuleCall_1_3_0_0 = (RuleCall)cArrowOpAssignment_1_3_0.eContents().get(0);
		private final Assignment cRightAssignment_1_3_1 = (Assignment)cGroup_1_3.eContents().get(1);
		private final RuleCall cRightExpressionParserRuleCall_1_3_1_0 = (RuleCall)cRightAssignment_1_3_1.eContents().get(0);
		
		//Expression:
		//  term=TerminalExpr ("[" exprT=Expression* "]"|op=( "+" | "&" | "." | "-" | "||" | "or" | "&&" |
		//  "and" | "<=>" | "iff" | "++" | "<:" | ":>" | "<<" | ">>" | ">>>" ) right=Expression|("!"|"not")? op
		//  =( "=" | "in" | "<" | ">" | "<=" | "=>" ) right=Expression|arrowOp=ArrowOp right=Expression)?; 
		//
		/// *
		//	expr ::= "let" letDecl,+ blockOrBar						1./	
		//       | quant decl,+    blockOrBar							2./
		//       | unOp expr											3./
		//       | expr binOp   expr									4./
		//       | expr arrowOp expr									5./
		//       | expr ["!"|"not"]? compareOp expr					6./
		//       | expr ["=>"|"implies"] expr "else" expr //PROBLEM	7./
		//       | expr "[" expr,* "]"								8./
		//       |     number											9./
		//       | "-" number											10./
		//       | "none"												11./
		//       | "iden"												12./
		//       | "univ"												13./
		//       | "Int"												14./
		//       | "seq/Int"											15./
		//       | "(" expr ")"										16./
		//       | ["@"] Name											17./
		//       | block												18./
		//       | "{" decl,+ blockOrBar "}"							19./
		//	
		// * /	
		//  
		//	
		//	 	 
		//						    											 //8./												
		//						 / *|"=>"|"implies"* / 	    	 //4./
		//						     		 //6./													
		//						   									 //5./																						//|	
		//						 //("=>"|"implies") (then=Expression ("else" right=Expression)? )    //7./
		public ParserRule getRule() { return rule; }

		//term=TerminalExpr ("[" exprT=Expression* "]"|op=( "+" | "&" | "." | "-" | "||" | "or" | "&&" |
		//"and" | "<=>" | "iff" | "++" | "<:" | ":>" | "<<" | ">>" | ">>>" ) right=Expression|("!"|"not")? op
		//=( "=" | "in" | "<" | ">" | "<=" | "=>" ) right=Expression|arrowOp=ArrowOp right=Expression)? 
		//	
		//	 	 
		//						    											 //8./												
		//						 / *|"=>"|"implies"* / 	    	 //4./
		//						     		 //6./													
		//						   									 //5./																						//|	
		//						 //("=>"|"implies") (then=Expression ("else" right=Expression)? )    //7./
		public Group getGroup() { return cGroup; }

		//term=TerminalExpr
		public Assignment getTermAssignment_0() { return cTermAssignment_0; }

		//TerminalExpr
		public RuleCall getTermTerminalExprParserRuleCall_0_0() { return cTermTerminalExprParserRuleCall_0_0; }

		//("[" exprT=Expression* "]"|op=( "+" | "&" | "." | "-" | "||" | "or" | "&&" | "and" | "<=>" | "iff" |
		//"++" | "<:" | ":>" | "<<" | ">>" | ">>>" ) right=Expression|("!"|"not")? op=( "=" | "in" | "<" | ">"
		//| "<=" | "=>" ) right=Expression|arrowOp=ArrowOp right=Expression)?  	 
		//						    											 //8./												
		//						 / *|"=>"|"implies"* / 	    	 //4./
		//						     		 //6./													
		//						   									 //5./																						//|	
		//						 //("=>"|"implies") (then=Expression ("else" right=Expression)? )    //7./
		public Alternatives getAlternatives_1() { return cAlternatives_1; }

		//"[" exprT=Expression* "]"
		public Group getGroup_1_0() { return cGroup_1_0; }

		//"["
		public Keyword getLeftSquareBracketKeyword_1_0_0() { return cLeftSquareBracketKeyword_1_0_0; }

		//exprT=Expression*
		public Assignment getExprTAssignment_1_0_1() { return cExprTAssignment_1_0_1; }

		//Expression
		public RuleCall getExprTExpressionParserRuleCall_1_0_1_0() { return cExprTExpressionParserRuleCall_1_0_1_0; }

		//"]"
		public Keyword getRightSquareBracketKeyword_1_0_2() { return cRightSquareBracketKeyword_1_0_2; }

		//op=( "+" | "&" | "." | "-" | "||" | "or" | "&&" | "and" | "<=>" | "iff" | "++" | "<:" | ":>" | "<<" | ">>" |
		//">>>" ) right=Expression 
		//						    											 //8./												
		//						 / *|"=>"|"implies"* / 	    	 //4./
		//						     		 //6./													
		//						   									 //5./																						//|	
		//						 //("=>"|"implies") (then=Expression ("else" right=Expression)? )    //7./
		public Group getGroup_1_1() { return cGroup_1_1; }

		//op=( "+" | "&" | "." | "-" | "||" | "or" | "&&" | "and" | "<=>" | "iff" | "++" | "<:" | ":>" | "<<" | ">>" |
		//">>>" ) //8./												
		//						 / *|"=>"|"implies"* /
		public Assignment getOpAssignment_1_1_0() { return cOpAssignment_1_1_0; }

		//"+"|"&"|"."|"-"|"||"|"or"|"&&"|"and"|"<=>"|"iff"|"++"|"<:"|":>"|"<<"|">>"|">>>"
		/// *|"=>"|"implies"* /
		public Alternatives getOpAlternatives_1_1_0_0() { return cOpAlternatives_1_1_0_0; }

		//"+"
		public Keyword getOpPlusSignKeyword_1_1_0_0_0() { return cOpPlusSignKeyword_1_1_0_0_0; }

		//"&"
		public Keyword getOpAmpersandKeyword_1_1_0_0_1() { return cOpAmpersandKeyword_1_1_0_0_1; }

		//"."
		public Keyword getOpFullStopKeyword_1_1_0_0_2() { return cOpFullStopKeyword_1_1_0_0_2; }

		//"-"
		public Keyword getOpHyphenMinusKeyword_1_1_0_0_3() { return cOpHyphenMinusKeyword_1_1_0_0_3; }

		//"||"
		public Keyword getOpVerticalLineVerticalLineKeyword_1_1_0_0_4() { return cOpVerticalLineVerticalLineKeyword_1_1_0_0_4; }

		//"or"
		public Keyword getOpOrKeyword_1_1_0_0_5() { return cOpOrKeyword_1_1_0_0_5; }

		//"&&"
		public Keyword getOpAmpersandAmpersandKeyword_1_1_0_0_6() { return cOpAmpersandAmpersandKeyword_1_1_0_0_6; }

		//"and"
		public Keyword getOpAndKeyword_1_1_0_0_7() { return cOpAndKeyword_1_1_0_0_7; }

		//"<=>"
		public Keyword getOpLessThanSignEqualsSignGreaterThanSignKeyword_1_1_0_0_8() { return cOpLessThanSignEqualsSignGreaterThanSignKeyword_1_1_0_0_8; }

		//"iff" / *|"=>"|"implies"* /
		public Keyword getOpIffKeyword_1_1_0_0_9() { return cOpIffKeyword_1_1_0_0_9; }

		//"++"
		public Keyword getOpPlusSignPlusSignKeyword_1_1_0_0_10() { return cOpPlusSignPlusSignKeyword_1_1_0_0_10; }

		//"<:"
		public Keyword getOpLessThanSignColonKeyword_1_1_0_0_11() { return cOpLessThanSignColonKeyword_1_1_0_0_11; }

		//":>"
		public Keyword getOpColonGreaterThanSignKeyword_1_1_0_0_12() { return cOpColonGreaterThanSignKeyword_1_1_0_0_12; }

		//"<<"
		public Keyword getOpLessThanSignLessThanSignKeyword_1_1_0_0_13() { return cOpLessThanSignLessThanSignKeyword_1_1_0_0_13; }

		//">>"
		public Keyword getOpGreaterThanSignGreaterThanSignKeyword_1_1_0_0_14() { return cOpGreaterThanSignGreaterThanSignKeyword_1_1_0_0_14; }

		//">>>"
		public Keyword getOpGreaterThanSignGreaterThanSignGreaterThanSignKeyword_1_1_0_0_15() { return cOpGreaterThanSignGreaterThanSignGreaterThanSignKeyword_1_1_0_0_15; }

		//right=Expression
		public Assignment getRightAssignment_1_1_1() { return cRightAssignment_1_1_1; }

		//Expression
		public RuleCall getRightExpressionParserRuleCall_1_1_1_0() { return cRightExpressionParserRuleCall_1_1_1_0; }

		//("!"|"not")? op=( "=" | "in" | "<" | ">" | "<=" | "=>" ) right=Expression 
		//						    											 //8./												
		//						 / *|"=>"|"implies"* / 	    	 //4./
		//						     		 //6./													
		//						   									 //5./																						//|	
		//						 //("=>"|"implies") (then=Expression ("else" right=Expression)? )    //7./
		public Group getGroup_1_2() { return cGroup_1_2; }

		//("!"|"not")? //4./
		public Alternatives getAlternatives_1_2_0() { return cAlternatives_1_2_0; }

		//"!"
		public Keyword getExclamationMarkKeyword_1_2_0_0() { return cExclamationMarkKeyword_1_2_0_0; }

		//"not"
		public Keyword getNotKeyword_1_2_0_1() { return cNotKeyword_1_2_0_1; }

		//op=( "=" | "in" | "<" | ">" | "<=" | "=>" )
		public Assignment getOpAssignment_1_2_1() { return cOpAssignment_1_2_1; }

		//"="|"in"|"<"|">"|"<="|"=>"
		public Alternatives getOpAlternatives_1_2_1_0() { return cOpAlternatives_1_2_1_0; }

		//"="
		public Keyword getOpEqualsSignKeyword_1_2_1_0_0() { return cOpEqualsSignKeyword_1_2_1_0_0; }

		//"in"
		public Keyword getOpInKeyword_1_2_1_0_1() { return cOpInKeyword_1_2_1_0_1; }

		//"<"
		public Keyword getOpLessThanSignKeyword_1_2_1_0_2() { return cOpLessThanSignKeyword_1_2_1_0_2; }

		//">"
		public Keyword getOpGreaterThanSignKeyword_1_2_1_0_3() { return cOpGreaterThanSignKeyword_1_2_1_0_3; }

		//"<="
		public Keyword getOpLessThanSignEqualsSignKeyword_1_2_1_0_4() { return cOpLessThanSignEqualsSignKeyword_1_2_1_0_4; }

		//"=>"
		public Keyword getOpEqualsSignGreaterThanSignKeyword_1_2_1_0_5() { return cOpEqualsSignGreaterThanSignKeyword_1_2_1_0_5; }

		//right=Expression
		public Assignment getRightAssignment_1_2_2() { return cRightAssignment_1_2_2; }

		//Expression
		public RuleCall getRightExpressionParserRuleCall_1_2_2_0() { return cRightExpressionParserRuleCall_1_2_2_0; }

		//arrowOp=ArrowOp right=Expression 
		//						    											 //8./												
		//						 / *|"=>"|"implies"* / 	    	 //4./
		//						     		 //6./													
		//						   									 //5./																						//|	
		//						 //("=>"|"implies") (then=Expression ("else" right=Expression)? )    //7./
		public Group getGroup_1_3() { return cGroup_1_3; }

		//arrowOp=ArrowOp //6./
		public Assignment getArrowOpAssignment_1_3_0() { return cArrowOpAssignment_1_3_0; }

		//ArrowOp
		public RuleCall getArrowOpArrowOpParserRuleCall_1_3_0_0() { return cArrowOpArrowOpParserRuleCall_1_3_0_0; }

		//right=Expression   									 //5./																						//|	
		//						 //("=>"|"implies") (then=Expression ("else" right=Expression)? )    //7./
		public Assignment getRightAssignment_1_3_1() { return cRightAssignment_1_3_1; }

		//Expression 									 //5./																						//|	
		//						 //("=>"|"implies") (then=Expression ("else" right=Expression)? )    //7./
		public RuleCall getRightExpressionParserRuleCall_1_3_1_0() { return cRightExpressionParserRuleCall_1_3_1_0; }
	}

	public class TerminalExprElements implements IParserRuleAccess {
		private final ParserRule rule = (ParserRule) GrammarUtil.findRuleForName(getGrammar(), "TerminalExpr");
		private final Alternatives cAlternatives = (Alternatives)rule.eContents().get(1);
		private final Group cGroup_0 = (Group)cAlternatives.eContents().get(0);
		private final Keyword cLetKeyword_0_0 = (Keyword)cGroup_0.eContents().get(0);
		private final RuleCall cLetDeclParserRuleCall_0_1 = (RuleCall)cGroup_0.eContents().get(1);
		private final Group cGroup_0_2 = (Group)cGroup_0.eContents().get(2);
		private final Keyword cCommaKeyword_0_2_0 = (Keyword)cGroup_0_2.eContents().get(0);
		private final Assignment cLetDeclAssignment_0_2_1 = (Assignment)cGroup_0_2.eContents().get(1);
		private final RuleCall cLetDeclLetDeclParserRuleCall_0_2_1_0 = (RuleCall)cLetDeclAssignment_0_2_1.eContents().get(0);
		private final Assignment cBlockOrBarBisAssignment_0_3 = (Assignment)cGroup_0.eContents().get(3);
		private final RuleCall cBlockOrBarBisBlockOrBarBisParserRuleCall_0_3_0 = (RuleCall)cBlockOrBarBisAssignment_0_3.eContents().get(0);
		private final Group cGroup_1 = (Group)cAlternatives.eContents().get(1);
		private final Alternatives cAlternatives_1_0 = (Alternatives)cGroup_1.eContents().get(0);
		private final Keyword cAllKeyword_1_0_0 = (Keyword)cAlternatives_1_0.eContents().get(0);
		private final Keyword cSumKeyword_1_0_1 = (Keyword)cAlternatives_1_0.eContents().get(1);
		private final Assignment cDeclAssignment_1_1 = (Assignment)cGroup_1.eContents().get(1);
		private final RuleCall cDeclDeclParserRuleCall_1_1_0 = (RuleCall)cDeclAssignment_1_1.eContents().get(0);
		private final Assignment cBAssignment_1_2 = (Assignment)cGroup_1.eContents().get(2);
		private final RuleCall cBBlockOrBarBisParserRuleCall_1_2_0 = (RuleCall)cBAssignment_1_2.eContents().get(0);
		private final Group cGroup_2 = (Group)cAlternatives.eContents().get(2);
		private final Alternatives cAlternatives_2_0 = (Alternatives)cGroup_2.eContents().get(0);
		private final Keyword cExclamationMarkKeyword_2_0_0 = (Keyword)cAlternatives_2_0.eContents().get(0);
		private final Keyword cNotKeyword_2_0_1 = (Keyword)cAlternatives_2_0.eContents().get(1);
		private final Keyword cSetKeyword_2_0_2 = (Keyword)cAlternatives_2_0.eContents().get(2);
		private final Keyword cSeqKeyword_2_0_3 = (Keyword)cAlternatives_2_0.eContents().get(3);
		private final Keyword cNumberSignKeyword_2_0_4 = (Keyword)cAlternatives_2_0.eContents().get(4);
		private final Keyword cTildeKeyword_2_0_5 = (Keyword)cAlternatives_2_0.eContents().get(5);
		private final Keyword cAsteriskKeyword_2_0_6 = (Keyword)cAlternatives_2_0.eContents().get(6);
		private final Keyword cCircumflexAccentKeyword_2_0_7 = (Keyword)cAlternatives_2_0.eContents().get(7);
		private final RuleCall cTerminalExprParserRuleCall_2_1 = (RuleCall)cGroup_2.eContents().get(1);
		private final Group cGroup_3 = (Group)cAlternatives.eContents().get(3);
		private final Alternatives cAlternatives_3_0 = (Alternatives)cGroup_3.eContents().get(0);
		private final Keyword cNoKeyword_3_0_0 = (Keyword)cAlternatives_3_0.eContents().get(0);
		private final Keyword cSomeKeyword_3_0_1 = (Keyword)cAlternatives_3_0.eContents().get(1);
		private final Keyword cLoneKeyword_3_0_2 = (Keyword)cAlternatives_3_0.eContents().get(2);
		private final Keyword cOneKeyword_3_0_3 = (Keyword)cAlternatives_3_0.eContents().get(3);
		private final Assignment cTAssignment_3_1 = (Assignment)cGroup_3.eContents().get(1);
		private final RuleCall cTTerminalExprParserRuleCall_3_1_0 = (RuleCall)cTAssignment_3_1.eContents().get(0);
		private final RuleCall cINTTerminalRuleCall_4 = (RuleCall)cAlternatives.eContents().get(4);
		private final RuleCall cIntegerTerminalRuleCall_5 = (RuleCall)cAlternatives.eContents().get(5);
		private final Keyword cNoneKeyword_6 = (Keyword)cAlternatives.eContents().get(6);
		private final Keyword cIdenKeyword_7 = (Keyword)cAlternatives.eContents().get(7);
		private final Keyword cUnivKeyword_8 = (Keyword)cAlternatives.eContents().get(8);
		private final Keyword cIntKeyword_9 = (Keyword)cAlternatives.eContents().get(9);
		private final Keyword cSeqIntKeyword_10 = (Keyword)cAlternatives.eContents().get(10);
		private final Group cGroup_11 = (Group)cAlternatives.eContents().get(11);
		private final Keyword cLeftParenthesisKeyword_11_0 = (Keyword)cGroup_11.eContents().get(0);
		private final Assignment cExprTAssignment_11_1 = (Assignment)cGroup_11.eContents().get(1);
		private final RuleCall cExprTExpressionParserRuleCall_11_1_0 = (RuleCall)cExprTAssignment_11_1.eContents().get(0);
		private final Keyword cRightParenthesisKeyword_11_2 = (Keyword)cGroup_11.eContents().get(2);
		private final Group cGroup_12 = (Group)cAlternatives.eContents().get(12);
		private final Keyword cCommercialAtKeyword_12_0 = (Keyword)cGroup_12.eContents().get(0);
		private final Assignment cNameRefAssignment_12_1 = (Assignment)cGroup_12.eContents().get(1);
		private final CrossReference cNameRefNameCrossReference_12_1_0 = (CrossReference)cNameRefAssignment_12_1.eContents().get(0);
		private final RuleCall cNameRefNameIDTerminalRuleCall_12_1_0_1 = (RuleCall)cNameRefNameCrossReference_12_1_0.eContents().get(1);
		private final Group cGroup_13 = (Group)cAlternatives.eContents().get(13);
		private final Keyword cLeftCurlyBracketKeyword_13_0 = (Keyword)cGroup_13.eContents().get(0);
		private final Alternatives cAlternatives_13_1 = (Alternatives)cGroup_13.eContents().get(1);
		private final RuleCall cBlockParserRuleCall_13_1_0 = (RuleCall)cAlternatives_13_1.eContents().get(0);
		private final Group cGroup_13_1_1 = (Group)cAlternatives_13_1.eContents().get(1);
		private final Group cGroup_13_1_1_0 = (Group)cGroup_13_1_1.eContents().get(0);
		private final Assignment cDeclAssignment_13_1_1_0_0 = (Assignment)cGroup_13_1_1_0.eContents().get(0);
		private final RuleCall cDeclDeclParserRuleCall_13_1_1_0_0_0 = (RuleCall)cDeclAssignment_13_1_1_0_0.eContents().get(0);
		private final Keyword cCommaKeyword_13_1_1_0_1 = (Keyword)cGroup_13_1_1_0.eContents().get(1);
		private final Assignment cBlockOrBarAssignment_13_1_1_1 = (Assignment)cGroup_13_1_1.eContents().get(1);
		private final RuleCall cBlockOrBarBlockOrBarParserRuleCall_13_1_1_1_0 = (RuleCall)cBlockOrBarAssignment_13_1_1_1.eContents().get(0);
		private final Keyword cRightCurlyBracketKeyword_13_1_1_2 = (Keyword)cGroup_13_1_1.eContents().get(2);
		
		//TerminalExpr returns Expression:
		//  "let" LetDecl ("," letDecl=LetDecl)* blockOrBarBis=BlockOrBarBis|("all"|"sum") decl=
		//  Decl b=BlockOrBarBis|("!"|"not"|"set"|"seq"|"#"|"~"|"*"|"^") TerminalExpr|("no"|
		//  "some"|"lone"|"one") t=TerminalExpr|INT|Integer|"none"|"iden"|"univ"|"Int"|
		//  "seq/Int"|"(" exprT=Expression ")"|"@"? nameRef=[Name]|"{" (Block|(decl=Decl ",")+
		//  blockOrBar=BlockOrBar "}"); 
		//						
		//    
		//	        		 //1./
		//	     					 //2./
		//	   	 //3./
		//   	     / *Decl ("," declSuite+=Decl)* block=BlockOrBarBis |* /   //2./ AND 3./ ERROR with Decl here 
		//     																			 //9./
		//   	 																		 //10./
		//	 																		 //11./
		//	 																		 //12./
		//	 																		 //13./
		//	 																		 //14./
		//	 																	 //15./
		//	     													 //16./
		//	   														 //17./
		//	             					 //18 AND 19./
		//	
		/// *
		//	decl ::= ["private"] ["disj"] name,+ ":" ["disj"] expr
		// * /
		public ParserRule getRule() { return rule; }

		//"let" LetDecl ("," letDecl=LetDecl)* blockOrBarBis=BlockOrBarBis|("all"|"sum") decl=
		//Decl b=BlockOrBarBis|("!"|"not"|"set"|"seq"|"#"|"~"|"*"|"^") TerminalExpr|("no"|
		//"some"|"lone"|"one") t=TerminalExpr|INT|Integer|"none"|"iden"|"univ"|"Int"|
		//"seq/Int"|"(" exprT=Expression ")"|"@"? nameRef=[Name]|"{" (Block|(decl=Decl ",")+
		//blockOrBar=BlockOrBar "}") 
		//						
		//    
		//	        		 //1./
		//	     					 //2./
		//	   	 //3./
		//   	     / *Decl ("," declSuite+=Decl)* block=BlockOrBarBis |* /   //2./ AND 3./ ERROR with Decl here 
		//     																			 //9./
		//   	 																		 //10./
		//	 																		 //11./
		//	 																		 //12./
		//	 																		 //13./
		//	 																		 //14./
		//	 																	 //15./
		//	     													 //16./
		//	   														 //17./
		//	             					 //18 AND 19./
		//	
		/// *
		//	decl ::= ["private"] ["disj"] name,+ ":" ["disj"] expr
		// * /
		public Alternatives getAlternatives() { return cAlternatives; }

		//"let" LetDecl ("," letDecl=LetDecl)* blockOrBarBis=BlockOrBarBis
		public Group getGroup_0() { return cGroup_0; }

		//"let"
		public Keyword getLetKeyword_0_0() { return cLetKeyword_0_0; }

		//LetDecl
		public RuleCall getLetDeclParserRuleCall_0_1() { return cLetDeclParserRuleCall_0_1; }

		//("," letDecl=LetDecl)*
		public Group getGroup_0_2() { return cGroup_0_2; }

		//","
		public Keyword getCommaKeyword_0_2_0() { return cCommaKeyword_0_2_0; }

		//letDecl=LetDecl
		public Assignment getLetDeclAssignment_0_2_1() { return cLetDeclAssignment_0_2_1; }

		//LetDecl
		public RuleCall getLetDeclLetDeclParserRuleCall_0_2_1_0() { return cLetDeclLetDeclParserRuleCall_0_2_1_0; }

		//blockOrBarBis=BlockOrBarBis
		public Assignment getBlockOrBarBisAssignment_0_3() { return cBlockOrBarBisAssignment_0_3; }

		//BlockOrBarBis
		public RuleCall getBlockOrBarBisBlockOrBarBisParserRuleCall_0_3_0() { return cBlockOrBarBisBlockOrBarBisParserRuleCall_0_3_0; }

		//("all"|"sum") decl=Decl b=BlockOrBarBis 
		//	        		 //1./
		//	     					 //2./
		//	   	 //3./
		//   	     / *Decl ("," declSuite+=Decl)* block=BlockOrBarBis |* /   //2./ AND 3./ ERROR with Decl here 
		//     																			 //9./
		//   	 																		 //10./
		//	 																		 //11./
		//	 																		 //12./
		//	 																		 //13./
		//	 																		 //14./
		//	 																	 //15./
		//	     													 //16./
		//	   														 //17./
		public Group getGroup_1() { return cGroup_1; }

		//"all"|"sum" //1./
		public Alternatives getAlternatives_1_0() { return cAlternatives_1_0; }

		//"all"
		public Keyword getAllKeyword_1_0_0() { return cAllKeyword_1_0_0; }

		//"sum"
		public Keyword getSumKeyword_1_0_1() { return cSumKeyword_1_0_1; }

		//decl=Decl
		public Assignment getDeclAssignment_1_1() { return cDeclAssignment_1_1; }

		//Decl
		public RuleCall getDeclDeclParserRuleCall_1_1_0() { return cDeclDeclParserRuleCall_1_1_0; }

		//b=BlockOrBarBis
		public Assignment getBAssignment_1_2() { return cBAssignment_1_2; }

		//BlockOrBarBis
		public RuleCall getBBlockOrBarBisParserRuleCall_1_2_0() { return cBBlockOrBarBisParserRuleCall_1_2_0; }

		//("!"|"not"|"set"|"seq"|"#"|"~"|"*"|"^") TerminalExpr 
		//	        		 //1./
		//	     					 //2./
		//	   	 //3./
		//   	     / *Decl ("," declSuite+=Decl)* block=BlockOrBarBis |* /   //2./ AND 3./ ERROR with Decl here 
		//     																			 //9./
		//   	 																		 //10./
		//	 																		 //11./
		//	 																		 //12./
		//	 																		 //13./
		//	 																		 //14./
		//	 																	 //15./
		//	     													 //16./
		//	   														 //17./
		public Group getGroup_2() { return cGroup_2; }

		//"!"|"not"|"set"|"seq"|"#"|"~"|"*"|"^" //2./
		public Alternatives getAlternatives_2_0() { return cAlternatives_2_0; }

		//"!"
		public Keyword getExclamationMarkKeyword_2_0_0() { return cExclamationMarkKeyword_2_0_0; }

		//"not"
		public Keyword getNotKeyword_2_0_1() { return cNotKeyword_2_0_1; }

		//"set"
		public Keyword getSetKeyword_2_0_2() { return cSetKeyword_2_0_2; }

		//"seq"
		public Keyword getSeqKeyword_2_0_3() { return cSeqKeyword_2_0_3; }

		//"#"
		public Keyword getNumberSignKeyword_2_0_4() { return cNumberSignKeyword_2_0_4; }

		//"~"
		public Keyword getTildeKeyword_2_0_5() { return cTildeKeyword_2_0_5; }

		//"*"
		public Keyword getAsteriskKeyword_2_0_6() { return cAsteriskKeyword_2_0_6; }

		//"^"
		public Keyword getCircumflexAccentKeyword_2_0_7() { return cCircumflexAccentKeyword_2_0_7; }

		//TerminalExpr
		public RuleCall getTerminalExprParserRuleCall_2_1() { return cTerminalExprParserRuleCall_2_1; }

		//("no"|"some"|"lone"|"one") t=TerminalExpr 
		//	        		 //1./
		//	     					 //2./
		//	   	 //3./
		//   	     / *Decl ("," declSuite+=Decl)* block=BlockOrBarBis |* /   //2./ AND 3./ ERROR with Decl here 
		//     																			 //9./
		//   	 																		 //10./
		//	 																		 //11./
		//	 																		 //12./
		//	 																		 //13./
		//	 																		 //14./
		//	 																	 //15./
		//	     													 //16./
		//	   														 //17./
		public Group getGroup_3() { return cGroup_3; }

		//"no"|"some"|"lone"|"one" //3./
		public Alternatives getAlternatives_3_0() { return cAlternatives_3_0; }

		//"no"
		public Keyword getNoKeyword_3_0_0() { return cNoKeyword_3_0_0; }

		//"some"
		public Keyword getSomeKeyword_3_0_1() { return cSomeKeyword_3_0_1; }

		//"lone"
		public Keyword getLoneKeyword_3_0_2() { return cLoneKeyword_3_0_2; }

		//"one"
		public Keyword getOneKeyword_3_0_3() { return cOneKeyword_3_0_3; }

		//t=TerminalExpr   / *Decl ("," declSuite+=Decl)* block=BlockOrBarBis |* /
		public Assignment getTAssignment_3_1() { return cTAssignment_3_1; }

		//TerminalExpr
		public RuleCall getTTerminalExprParserRuleCall_3_1_0() { return cTTerminalExprParserRuleCall_3_1_0; }

		//INT //2./ AND 3./ ERROR with Decl here
		public RuleCall getINTTerminalRuleCall_4() { return cINTTerminalRuleCall_4; }

		//Integer //9./
		public RuleCall getIntegerTerminalRuleCall_5() { return cIntegerTerminalRuleCall_5; }

		//"none" //10./
		public Keyword getNoneKeyword_6() { return cNoneKeyword_6; }

		//"iden" //11./
		public Keyword getIdenKeyword_7() { return cIdenKeyword_7; }

		//"univ" //12./
		public Keyword getUnivKeyword_8() { return cUnivKeyword_8; }

		//"Int" //13./
		public Keyword getIntKeyword_9() { return cIntKeyword_9; }

		//"seq/Int" //14./
		public Keyword getSeqIntKeyword_10() { return cSeqIntKeyword_10; }

		//"(" exprT=Expression ")" 
		//	        		 //1./
		//	     					 //2./
		//	   	 //3./
		//   	     / *Decl ("," declSuite+=Decl)* block=BlockOrBarBis |* /   //2./ AND 3./ ERROR with Decl here 
		//     																			 //9./
		//   	 																		 //10./
		//	 																		 //11./
		//	 																		 //12./
		//	 																		 //13./
		//	 																		 //14./
		//	 																	 //15./
		//	     													 //16./
		//	   														 //17./
		public Group getGroup_11() { return cGroup_11; }

		//"(" //15./
		public Keyword getLeftParenthesisKeyword_11_0() { return cLeftParenthesisKeyword_11_0; }

		//exprT=Expression
		public Assignment getExprTAssignment_11_1() { return cExprTAssignment_11_1; }

		//Expression
		public RuleCall getExprTExpressionParserRuleCall_11_1_0() { return cExprTExpressionParserRuleCall_11_1_0; }

		//")"
		public Keyword getRightParenthesisKeyword_11_2() { return cRightParenthesisKeyword_11_2; }

		//"@"? nameRef=[Name] 
		//	        		 //1./
		//	     					 //2./
		//	   	 //3./
		//   	     / *Decl ("," declSuite+=Decl)* block=BlockOrBarBis |* /   //2./ AND 3./ ERROR with Decl here 
		//     																			 //9./
		//   	 																		 //10./
		//	 																		 //11./
		//	 																		 //12./
		//	 																		 //13./
		//	 																		 //14./
		//	 																	 //15./
		//	     													 //16./
		//	   														 //17./
		public Group getGroup_12() { return cGroup_12; }

		//"@"? //16./
		public Keyword getCommercialAtKeyword_12_0() { return cCommercialAtKeyword_12_0; }

		//nameRef=[Name]
		public Assignment getNameRefAssignment_12_1() { return cNameRefAssignment_12_1; }

		//[Name]
		public CrossReference getNameRefNameCrossReference_12_1_0() { return cNameRefNameCrossReference_12_1_0; }

		//ID
		public RuleCall getNameRefNameIDTerminalRuleCall_12_1_0_1() { return cNameRefNameIDTerminalRuleCall_12_1_0_1; }

		//"{" (Block|(decl=Decl ",")+ blockOrBar=BlockOrBar "}") 
		//	        		 //1./
		//	     					 //2./
		//	   	 //3./
		//   	     / *Decl ("," declSuite+=Decl)* block=BlockOrBarBis |* /   //2./ AND 3./ ERROR with Decl here 
		//     																			 //9./
		//   	 																		 //10./
		//	 																		 //11./
		//	 																		 //12./
		//	 																		 //13./
		//	 																		 //14./
		//	 																	 //15./
		//	     													 //16./
		//	   														 //17./
		public Group getGroup_13() { return cGroup_13; }

		//"{" //17./
		public Keyword getLeftCurlyBracketKeyword_13_0() { return cLeftCurlyBracketKeyword_13_0; }

		//Block|(decl=Decl ",")+ blockOrBar=BlockOrBar "}"
		public Alternatives getAlternatives_13_1() { return cAlternatives_13_1; }

		//Block
		public RuleCall getBlockParserRuleCall_13_1_0() { return cBlockParserRuleCall_13_1_0; }

		//(decl=Decl ",")+ blockOrBar=BlockOrBar "}"
		public Group getGroup_13_1_1() { return cGroup_13_1_1; }

		//(decl=Decl ",")+
		public Group getGroup_13_1_1_0() { return cGroup_13_1_1_0; }

		//decl=Decl
		public Assignment getDeclAssignment_13_1_1_0_0() { return cDeclAssignment_13_1_1_0_0; }

		//Decl
		public RuleCall getDeclDeclParserRuleCall_13_1_1_0_0_0() { return cDeclDeclParserRuleCall_13_1_1_0_0_0; }

		//","
		public Keyword getCommaKeyword_13_1_1_0_1() { return cCommaKeyword_13_1_1_0_1; }

		//blockOrBar=BlockOrBar
		public Assignment getBlockOrBarAssignment_13_1_1_1() { return cBlockOrBarAssignment_13_1_1_1; }

		//BlockOrBar
		public RuleCall getBlockOrBarBlockOrBarParserRuleCall_13_1_1_1_0() { return cBlockOrBarBlockOrBarParserRuleCall_13_1_1_1_0; }

		//"}"
		public Keyword getRightCurlyBracketKeyword_13_1_1_2() { return cRightCurlyBracketKeyword_13_1_1_2; }
	}

	public class DeclElements implements IParserRuleAccess {
		private final ParserRule rule = (ParserRule) GrammarUtil.findRuleForName(getGrammar(), "Decl");
		private final Group cGroup = (Group)rule.eContents().get(1);
		private final Keyword cPrivateKeyword_0 = (Keyword)cGroup.eContents().get(0);
		private final Keyword cDisjKeyword_1 = (Keyword)cGroup.eContents().get(1);
		private final Assignment cNameAssignment_2 = (Assignment)cGroup.eContents().get(2);
		private final RuleCall cNameNameParserRuleCall_2_0 = (RuleCall)cNameAssignment_2.eContents().get(0);
		private final Group cGroup_3 = (Group)cGroup.eContents().get(3);
		private final Keyword cCommaKeyword_3_0 = (Keyword)cGroup_3.eContents().get(0);
		private final Assignment cSuiteAssignment_3_1 = (Assignment)cGroup_3.eContents().get(1);
		private final RuleCall cSuiteNameParserRuleCall_3_1_0 = (RuleCall)cSuiteAssignment_3_1.eContents().get(0);
		private final Keyword cColonKeyword_4 = (Keyword)cGroup.eContents().get(4);
		private final Keyword cDisjKeyword_5 = (Keyword)cGroup.eContents().get(5);
		private final Assignment cExprDeclAssignment_6 = (Assignment)cGroup.eContents().get(6);
		private final RuleCall cExprDeclExpressionParserRuleCall_6_0 = (RuleCall)cExprDeclAssignment_6.eContents().get(0);
		
		//Decl:
		//  "private"? "disj"? name=Name ("," suite+=Name)* ":" "disj"? exprDecl=Expression; //18 AND 19./
		//	
		/// *
		//	decl ::= ["private"] ["disj"] name,+ ":" ["disj"] expr
		// * /	
		//	 
		//	                 	 
		//
		/// *
		//	REMOVE
		// * /
		public ParserRule getRule() { return rule; }

		//"private"? "disj"? name=Name ("," suite+=Name)* ":" "disj"? exprDecl=Expression
		public Group getGroup() { return cGroup; }

		//"private"?
		public Keyword getPrivateKeyword_0() { return cPrivateKeyword_0; }

		//"disj"?
		public Keyword getDisjKeyword_1() { return cDisjKeyword_1; }

		//name=Name
		public Assignment getNameAssignment_2() { return cNameAssignment_2; }

		//Name
		public RuleCall getNameNameParserRuleCall_2_0() { return cNameNameParserRuleCall_2_0; }

		//("," suite+=Name)*
		public Group getGroup_3() { return cGroup_3; }

		//","
		public Keyword getCommaKeyword_3_0() { return cCommaKeyword_3_0; }

		//suite+=Name
		public Assignment getSuiteAssignment_3_1() { return cSuiteAssignment_3_1; }

		//Name
		public RuleCall getSuiteNameParserRuleCall_3_1_0() { return cSuiteNameParserRuleCall_3_1_0; }

		//":"
		public Keyword getColonKeyword_4() { return cColonKeyword_4; }

		//"disj"?
		public Keyword getDisjKeyword_5() { return cDisjKeyword_5; }

		//exprDecl=Expression
		public Assignment getExprDeclAssignment_6() { return cExprDeclAssignment_6; }

		//Expression
		public RuleCall getExprDeclExpressionParserRuleCall_6_0() { return cExprDeclExpressionParserRuleCall_6_0; }
	}

	public class Decl2Elements implements IParserRuleAccess {
		private final ParserRule rule = (ParserRule) GrammarUtil.findRuleForName(getGrammar(), "Decl2");
		private final Group cGroup = (Group)rule.eContents().get(1);
		private final Keyword cPrivateKeyword_0 = (Keyword)cGroup.eContents().get(0);
		private final Keyword cDisjKeyword_1 = (Keyword)cGroup.eContents().get(1);
		private final RuleCall cNameParserRuleCall_2 = (RuleCall)cGroup.eContents().get(2);
		private final Keyword cColonKeyword_3 = (Keyword)cGroup.eContents().get(3);
		private final Keyword cDisjKeyword_4 = (Keyword)cGroup.eContents().get(4);
		private final Assignment cExprDeclAssignment_5 = (Assignment)cGroup.eContents().get(5);
		private final RuleCall cExprDeclExpressionParserRuleCall_5_0 = (RuleCall)cExprDeclAssignment_5.eContents().get(0);
		
		//Decl2:
		//  "private"? "disj"? Name ":" "disj"? exprDecl=Expression; 
		//
		/// *
		//	REMOVE
		// * /
		//	 
		//	          	 
		//	
		/// *
		//	letDecl ::= name "=" expr
		// * /
		public ParserRule getRule() { return rule; }

		//"private"? "disj"? Name ":" "disj"? exprDecl=Expression
		public Group getGroup() { return cGroup; }

		//"private"?
		public Keyword getPrivateKeyword_0() { return cPrivateKeyword_0; }

		//"disj"?
		public Keyword getDisjKeyword_1() { return cDisjKeyword_1; }

		//Name
		public RuleCall getNameParserRuleCall_2() { return cNameParserRuleCall_2; }

		//":"
		public Keyword getColonKeyword_3() { return cColonKeyword_3; }

		//"disj"?
		public Keyword getDisjKeyword_4() { return cDisjKeyword_4; }

		//exprDecl=Expression
		public Assignment getExprDeclAssignment_5() { return cExprDeclAssignment_5; }

		//Expression
		public RuleCall getExprDeclExpressionParserRuleCall_5_0() { return cExprDeclExpressionParserRuleCall_5_0; }
	}

	public class LetDeclElements implements IParserRuleAccess {
		private final ParserRule rule = (ParserRule) GrammarUtil.findRuleForName(getGrammar(), "LetDecl");
		private final Group cGroup = (Group)rule.eContents().get(1);
		private final RuleCall cNameParserRuleCall_0 = (RuleCall)cGroup.eContents().get(0);
		private final Keyword cEqualsSignKeyword_1 = (Keyword)cGroup.eContents().get(1);
		private final Assignment cExprLetAssignment_2 = (Assignment)cGroup.eContents().get(2);
		private final RuleCall cExprLetExpressionParserRuleCall_2_0 = (RuleCall)cExprLetAssignment_2.eContents().get(0);
		
		//LetDecl:
		//  Name "=" exprLet=Expression; 
		//	
		/// *
		//	letDecl ::= name "=" expr
		// * /	
		//	 
		//	    	 
		//
		/// *
		//	arrowOp ::= ["some"|"one"|"lone"|"set"]? "->" ["some"|"one"|"lone"|"set"]? //redondance in the end of the expression
		// * /
		public ParserRule getRule() { return rule; }

		//Name "=" exprLet=Expression
		public Group getGroup() { return cGroup; }

		//Name
		public RuleCall getNameParserRuleCall_0() { return cNameParserRuleCall_0; }

		//"="
		public Keyword getEqualsSignKeyword_1() { return cEqualsSignKeyword_1; }

		//exprLet=Expression
		public Assignment getExprLetAssignment_2() { return cExprLetAssignment_2; }

		//Expression
		public RuleCall getExprLetExpressionParserRuleCall_2_0() { return cExprLetExpressionParserRuleCall_2_0; }
	}

	public class ArrowOpElements implements IParserRuleAccess {
		private final ParserRule rule = (ParserRule) GrammarUtil.findRuleForName(getGrammar(), "ArrowOp");
		private final Group cGroup = (Group)rule.eContents().get(1);
		private final Alternatives cAlternatives_0 = (Alternatives)cGroup.eContents().get(0);
		private final Keyword cSomeKeyword_0_0 = (Keyword)cAlternatives_0.eContents().get(0);
		private final Keyword cOneKeyword_0_1 = (Keyword)cAlternatives_0.eContents().get(1);
		private final Keyword cLoneKeyword_0_2 = (Keyword)cAlternatives_0.eContents().get(2);
		private final Keyword cSetKeyword_0_3 = (Keyword)cAlternatives_0.eContents().get(3);
		private final Assignment cSAssignment_1 = (Assignment)cGroup.eContents().get(1);
		private final Keyword cSHyphenMinusGreaterThanSignKeyword_1_0 = (Keyword)cSAssignment_1.eContents().get(0);
		
		//ArrowOp:
		//  ("some"|"one"|"lone"|"set")? s="->"; 
		//
		/// *
		//	arrowOp ::= ["some"|"one"|"lone"|"set"]? "->" ["some"|"one"|"lone"|"set"]? //redondance in the end of the expression
		// * /
		//	 
		//	                
		//
		/// *
		//	block ::= "{" expr* "}" //without "{"
		// * /
		public ParserRule getRule() { return rule; }

		//("some"|"one"|"lone"|"set")? s="->"
		public Group getGroup() { return cGroup; }

		//("some"|"one"|"lone"|"set")?
		public Alternatives getAlternatives_0() { return cAlternatives_0; }

		//"some"
		public Keyword getSomeKeyword_0_0() { return cSomeKeyword_0_0; }

		//"one"
		public Keyword getOneKeyword_0_1() { return cOneKeyword_0_1; }

		//"lone"
		public Keyword getLoneKeyword_0_2() { return cLoneKeyword_0_2; }

		//"set"
		public Keyword getSetKeyword_0_3() { return cSetKeyword_0_3; }

		//s="->"
		public Assignment getSAssignment_1() { return cSAssignment_1; }

		//"->"
		public Keyword getSHyphenMinusGreaterThanSignKeyword_1_0() { return cSHyphenMinusGreaterThanSignKeyword_1_0; }
	}

	public class BlockElements implements IParserRuleAccess {
		private final ParserRule rule = (ParserRule) GrammarUtil.findRuleForName(getGrammar(), "Block");
		private final Group cGroup = (Group)rule.eContents().get(1);
		private final Assignment cExprAssignment_0 = (Assignment)cGroup.eContents().get(0);
		private final RuleCall cExprExpressionParserRuleCall_0_0 = (RuleCall)cExprAssignment_0.eContents().get(0);
		private final Keyword cRightCurlyBracketKeyword_1 = (Keyword)cGroup.eContents().get(1);
		
		//Block:
		//  expr+=Expression* "}"; 
		//
		/// *
		//	block ::= "{" expr* "}" //without "{"
		// * /
		//	 
		//	  
		//
		/// *
		//	block ::= "{" expr* "}" //with "{"
		// * /
		public ParserRule getRule() { return rule; }

		//expr+=Expression* "}"
		public Group getGroup() { return cGroup; }

		//expr+=Expression*
		public Assignment getExprAssignment_0() { return cExprAssignment_0; }

		//Expression
		public RuleCall getExprExpressionParserRuleCall_0_0() { return cExprExpressionParserRuleCall_0_0; }

		//"}"
		public Keyword getRightCurlyBracketKeyword_1() { return cRightCurlyBracketKeyword_1; }
	}

	public class BlockBisElements implements IParserRuleAccess {
		private final ParserRule rule = (ParserRule) GrammarUtil.findRuleForName(getGrammar(), "BlockBis");
		private final Group cGroup = (Group)rule.eContents().get(1);
		private final Keyword cLeftCurlyBracketKeyword_0 = (Keyword)cGroup.eContents().get(0);
		private final RuleCall cBlockParserRuleCall_1 = (RuleCall)cGroup.eContents().get(1);
		
		//BlockBis:
		//  "{" Block; 
		//
		/// *
		//	block ::= "{" expr* "}" //with "{"
		// * /
		//	 
		//	  	 
		//
		/// *
		//	blockOrBar ::= block
		//	blockOrBar ::= "|" expr
		// * /
		public ParserRule getRule() { return rule; }

		//"{" Block
		public Group getGroup() { return cGroup; }

		//"{"
		public Keyword getLeftCurlyBracketKeyword_0() { return cLeftCurlyBracketKeyword_0; }

		//Block
		public RuleCall getBlockParserRuleCall_1() { return cBlockParserRuleCall_1; }
	}

	public class BlockOrBarElements implements IParserRuleAccess {
		private final ParserRule rule = (ParserRule) GrammarUtil.findRuleForName(getGrammar(), "BlockOrBar");
		private final Alternatives cAlternatives = (Alternatives)rule.eContents().get(1);
		private final RuleCall cBlockBisParserRuleCall_0 = (RuleCall)cAlternatives.eContents().get(0);
		private final Group cGroup_1 = (Group)cAlternatives.eContents().get(1);
		private final Keyword cVerticalLineKeyword_1_0 = (Keyword)cGroup_1.eContents().get(0);
		private final RuleCall cExpressionParserRuleCall_1_1 = (RuleCall)cGroup_1.eContents().get(1);
		
		//BlockOrBar:
		//  BlockBis|"|" Expression; 
		//
		/// *
		//	blockOrBar ::= block
		//	blockOrBar ::= "|" expr
		// * /	
		//	 
		//						 
		//	  	 
		//
		/// *
		//	blockOrBar ::= block
		//	blockOrBar ::= "|" expr //TerminalExpr in the end of the expression
		// * /
		public ParserRule getRule() { return rule; }

		//BlockBis|"|" Expression 
		//
		/// *
		//	blockOrBar ::= block
		//	blockOrBar ::= "|" expr
		// * /	
		//	 
		//						 
		//	  	 
		//
		/// *
		//	blockOrBar ::= block
		//	blockOrBar ::= "|" expr //TerminalExpr in the end of the expression
		// * /
		public Alternatives getAlternatives() { return cAlternatives; }

		//BlockBis
		public RuleCall getBlockBisParserRuleCall_0() { return cBlockBisParserRuleCall_0; }

		//"|" Expression
		public Group getGroup_1() { return cGroup_1; }

		//"|"
		public Keyword getVerticalLineKeyword_1_0() { return cVerticalLineKeyword_1_0; }

		//Expression
		public RuleCall getExpressionParserRuleCall_1_1() { return cExpressionParserRuleCall_1_1; }
	}

	public class BlockOrBarBisElements implements IParserRuleAccess {
		private final ParserRule rule = (ParserRule) GrammarUtil.findRuleForName(getGrammar(), "BlockOrBarBis");
		private final Alternatives cAlternatives = (Alternatives)rule.eContents().get(1);
		private final RuleCall cBlockBisParserRuleCall_0 = (RuleCall)cAlternatives.eContents().get(0);
		private final Group cGroup_1 = (Group)cAlternatives.eContents().get(1);
		private final Keyword cVerticalLineKeyword_1_0 = (Keyword)cGroup_1.eContents().get(0);
		private final RuleCall cTerminalExprParserRuleCall_1_1 = (RuleCall)cGroup_1.eContents().get(1);
		
		//BlockOrBarBis:
		//  BlockBis|"|" TerminalExpr; 
		//
		/// *
		//	blockOrBar ::= block
		//	blockOrBar ::= "|" expr //TerminalExpr in the end of the expression
		// * /	
		//	 
		//						 
		//	  	 
		//
		/// *
		//	name ::= ["this" | ID] ["/" ID]*
		// * /
		public ParserRule getRule() { return rule; }

		//BlockBis|"|" TerminalExpr 
		//
		/// *
		//	blockOrBar ::= block
		//	blockOrBar ::= "|" expr //TerminalExpr in the end of the expression
		// * /	
		//	 
		//						 
		//	  	 
		//
		/// *
		//	name ::= ["this" | ID] ["/" ID]*
		// * /
		public Alternatives getAlternatives() { return cAlternatives; }

		//BlockBis
		public RuleCall getBlockBisParserRuleCall_0() { return cBlockBisParserRuleCall_0; }

		//"|" TerminalExpr
		public Group getGroup_1() { return cGroup_1; }

		//"|"
		public Keyword getVerticalLineKeyword_1_0() { return cVerticalLineKeyword_1_0; }

		//TerminalExpr
		public RuleCall getTerminalExprParserRuleCall_1_1() { return cTerminalExprParserRuleCall_1_1; }
	}

	public class NameElements implements IParserRuleAccess {
		private final ParserRule rule = (ParserRule) GrammarUtil.findRuleForName(getGrammar(), "Name");
		private final Alternatives cAlternatives = (Alternatives)rule.eContents().get(1);
		private final Assignment cThisAssignment_0 = (Assignment)cAlternatives.eContents().get(0);
		private final Keyword cThisThisKeyword_0_0 = (Keyword)cThisAssignment_0.eContents().get(0);
		private final Assignment cNameAssignment_1 = (Assignment)cAlternatives.eContents().get(1);
		private final RuleCall cNameIDTerminalRuleCall_1_0 = (RuleCall)cNameAssignment_1.eContents().get(0);
		private final Assignment cNameCompleteAssignment_2 = (Assignment)cAlternatives.eContents().get(2);
		private final RuleCall cNameCompleteNameBisParserRuleCall_2_0 = (RuleCall)cNameCompleteAssignment_2.eContents().get(0);
		
		//Name:
		//  this="this"|name=ID|nameComplete=NameBis; 
		//
		/// *
		//	name ::= ["this" | ID] ["/" ID]*
		// * /
		public ParserRule getRule() { return rule; }

		//this="this"|name=ID|nameComplete=NameBis 
		//
		/// *
		//	name ::= ["this" | ID] ["/" ID]*
		// * /
		public Alternatives getAlternatives() { return cAlternatives; }

		//this="this"
		public Assignment getThisAssignment_0() { return cThisAssignment_0; }

		//"this"
		public Keyword getThisThisKeyword_0_0() { return cThisThisKeyword_0_0; }

		//name=ID
		public Assignment getNameAssignment_1() { return cNameAssignment_1; }

		//ID
		public RuleCall getNameIDTerminalRuleCall_1_0() { return cNameIDTerminalRuleCall_1_0; }

		//nameComplete=NameBis
		public Assignment getNameCompleteAssignment_2() { return cNameCompleteAssignment_2; }

		//NameBis
		public RuleCall getNameCompleteNameBisParserRuleCall_2_0() { return cNameCompleteNameBisParserRuleCall_2_0; }
	}

	public class NameBisElements implements IParserRuleAccess {
		private final ParserRule rule = (ParserRule) GrammarUtil.findRuleForName(getGrammar(), "NameBis");
		private final Group cGroup = (Group)rule.eContents().get(1);
		private final Alternatives cAlternatives_0 = (Alternatives)cGroup.eContents().get(0);
		private final Keyword cThisKeyword_0_0 = (Keyword)cAlternatives_0.eContents().get(0);
		private final RuleCall cIDTerminalRuleCall_0_1 = (RuleCall)cAlternatives_0.eContents().get(1);
		private final Group cGroup_1 = (Group)cGroup.eContents().get(1);
		private final Keyword cSolidusKeyword_1_0 = (Keyword)cGroup_1.eContents().get(0);
		private final Assignment cSuiteAssignment_1_1 = (Assignment)cGroup_1.eContents().get(1);
		private final RuleCall cSuiteIDTerminalRuleCall_1_1_0 = (RuleCall)cSuiteAssignment_1_1.eContents().get(0);
		
		//NameBis:
		//  ("this"|ID) ("/" suite=ID)+; 
		//
		//
		//	    
		//
		/// *
		//	ref ::= name | "univ" | "Int" | "seq/Int"
		// * /
		public ParserRule getRule() { return rule; }

		//("this"|ID) ("/" suite=ID)+
		public Group getGroup() { return cGroup; }

		//"this"|ID
		public Alternatives getAlternatives_0() { return cAlternatives_0; }

		//"this"
		public Keyword getThisKeyword_0_0() { return cThisKeyword_0_0; }

		//ID
		public RuleCall getIDTerminalRuleCall_0_1() { return cIDTerminalRuleCall_0_1; }

		//("/" suite=ID)+
		public Group getGroup_1() { return cGroup_1; }

		//"/"
		public Keyword getSolidusKeyword_1_0() { return cSolidusKeyword_1_0; }

		//suite=ID
		public Assignment getSuiteAssignment_1_1() { return cSuiteAssignment_1_1; }

		//ID
		public RuleCall getSuiteIDTerminalRuleCall_1_1_0() { return cSuiteIDTerminalRuleCall_1_1_0; }
	}

	public class RefElements implements IParserRuleAccess {
		private final ParserRule rule = (ParserRule) GrammarUtil.findRuleForName(getGrammar(), "Ref");
		private final Alternatives cAlternatives = (Alternatives)rule.eContents().get(1);
		private final Assignment cNameAssignment_0 = (Assignment)cAlternatives.eContents().get(0);
		private final CrossReference cNameNameCrossReference_0_0 = (CrossReference)cNameAssignment_0.eContents().get(0);
		private final RuleCall cNameNameIDTerminalRuleCall_0_0_1 = (RuleCall)cNameNameCrossReference_0_0.eContents().get(1);
		private final Keyword cUnivKeyword_1 = (Keyword)cAlternatives.eContents().get(1);
		private final Keyword cIntKeyword_2 = (Keyword)cAlternatives.eContents().get(2);
		private final Keyword cSeqIntKeyword_3 = (Keyword)cAlternatives.eContents().get(3);
		
		//Ref:
		//  name=[Name]|"univ"|"Int"|"seq/Int"; 
		//
		/// *
		//	ref ::= name | "univ" | "Int" | "seq/Int"
		// * /
		public ParserRule getRule() { return rule; }

		//name=[Name]|"univ"|"Int"|"seq/Int" 
		//
		/// *
		//	ref ::= name | "univ" | "Int" | "seq/Int"
		// * /
		public Alternatives getAlternatives() { return cAlternatives; }

		//name=[Name]
		public Assignment getNameAssignment_0() { return cNameAssignment_0; }

		//[Name]
		public CrossReference getNameNameCrossReference_0_0() { return cNameNameCrossReference_0_0; }

		//ID
		public RuleCall getNameNameIDTerminalRuleCall_0_0_1() { return cNameNameIDTerminalRuleCall_0_0_1; }

		//"univ"
		public Keyword getUnivKeyword_1() { return cUnivKeyword_1; }

		//"Int"
		public Keyword getIntKeyword_2() { return cIntKeyword_2; }

		//"seq/Int"
		public Keyword getSeqIntKeyword_3() { return cSeqIntKeyword_3; }
	}
	
	
	private SpecificationElements pSpecification;
	private ModuleElements pModule;
	private OpenElements pOpen;
	private ParagraphElements pParagraph;
	private FactDeclElements pFactDecl;
	private AssertDeclElements pAssertDecl;
	private FunDeclElements pFunDecl;
	private PredDeclElements pPredDecl;
	private RunDeclElements pRunDecl;
	private CheckDeclElements pCheckDecl;
	private ScopeElements pScope;
	private TypescopeElements pTypescope;
	private EnumDeclElements pEnumDecl;
	private SigDeclElements pSigDecl;
	private SigQualElements pSigQual;
	private SigExtElements pSigExt;
	private ExpressionElements pExpression;
	private TerminalExprElements pTerminalExpr;
	private DeclElements pDecl;
	private Decl2Elements pDecl2;
	private LetDeclElements pLetDecl;
	private ArrowOpElements pArrowOp;
	private BlockElements pBlock;
	private BlockBisElements pBlockBis;
	private BlockOrBarElements pBlockOrBar;
	private BlockOrBarBisElements pBlockOrBarBis;
	private NameElements pName;
	private NameBisElements pNameBis;
	private RefElements pRef;
	private TerminalRule tInteger;
	private TerminalRule tCOMMENT;
	
	private final GrammarProvider grammarProvider;

	private TerminalsGrammarAccess gaTerminals;

	@Inject
	public BasicsGrammarAccess(GrammarProvider grammarProvider,
		TerminalsGrammarAccess gaTerminals) {
		this.grammarProvider = grammarProvider;
		this.gaTerminals = gaTerminals;
	}
	
	public Grammar getGrammar() {	
		return grammarProvider.getGrammar(this);
	}
	

	public TerminalsGrammarAccess getTerminalsGrammarAccess() {
		return gaTerminals;
	}

	
	//Specification:
	//  module=Module? open+=Open* paragraph+=Paragraph*; 
	//
	/// *
	//	specification ::= [module] open* paragraph*
	// * /
	//	 
	//	      
	//	
	/// *
	//	module ::= "module" name  [ "["  ["exactly"] name  ("," ["exactly"] num)*    "]" ]
	// * /
	public SpecificationElements getSpecificationAccess() {
		return (pSpecification != null) ? pSpecification : (pSpecification = new SpecificationElements());
	}
	
	public ParserRule getSpecificationRule() {
		return getSpecificationAccess().getRule();
	}

	//Module:
	//  "module" moduleName=Name ("[" "exactly"? suite=Name ("," "exactly"? INT)* "]")?; 
	//	
	/// *
	//	module ::= "module" name  [ "["  ["exactly"] name  ("," ["exactly"] num)*    "]" ]
	// * /	
	//	 
	//	                
	//	
	/// *
	//	open ::= ["private"]  "open"  name  [ "[" ref,+ "]" ]  [ "as" name ]
	// * /
	public ModuleElements getModuleAccess() {
		return (pModule != null) ? pModule : (pModule = new ModuleElements());
	}
	
	public ParserRule getModuleRule() {
		return getModuleAccess().getRule();
	}

	//Open:
	//  "private"? "open" name=Name ("[" ref=Ref ("," ref2+=Ref)* "]")? ("as" name2=Name)?; 
	//	
	/// *
	//	open ::= ["private"]  "open"  name  [ "[" ref,+ "]" ]  [ "as" name ]
	// * /	
	//	 
	//	                  
	//	
	/// *
	//	paragraph ::= factDecl | assertDecl | funDecl | cmdDecl | enumDecl | sigDecl
	// * /
	public OpenElements getOpenAccess() {
		return (pOpen != null) ? pOpen : (pOpen = new OpenElements());
	}
	
	public ParserRule getOpenRule() {
		return getOpenAccess().getRule();
	}

	//Paragraph:
	//  FactDecl|AssertDecl|FunDecl|PredDecl|RunDecl|CheckDecl|EnumDecl|SigDecl; 
	//	
	/// *
	//	paragraph ::= factDecl | assertDecl | funDecl | cmdDecl | enumDecl | sigDecl
	// * /
	//	 
	//		 
	//		 
	//			 
	//		 
	//			 
	//		 
	//		 
	//			 
	//
	/// *
	//	factDecl ::= "fact" [name] block
	// * /
	public ParagraphElements getParagraphAccess() {
		return (pParagraph != null) ? pParagraph : (pParagraph = new ParagraphElements());
	}
	
	public ParserRule getParagraphRule() {
		return getParagraphAccess().getRule();
	}

	//FactDecl:
	//  "fact" factName=Name? b=BlockBis; 
	//
	/// *
	//	factDecl ::= "fact" [name] block
	// * /
	//	 
	//	    
	//
	/// *
	//	assertDecl ::= "assert" [name] block
	// * /
	public FactDeclElements getFactDeclAccess() {
		return (pFactDecl != null) ? pFactDecl : (pFactDecl = new FactDeclElements());
	}
	
	public ParserRule getFactDeclRule() {
		return getFactDeclAccess().getRule();
	}

	//AssertDecl:
	//  "assert" assertName=Name? b=BlockBis; 
	//
	/// *
	//	assertDecl ::= "assert" [name] block
	// * /
	//	 
	//	    
	//	
	/// *
	//	funDecl ::= ["private"] "fun" [ref "."] name "(" decl,* ")" ":" expr block
	//	funDecl ::= ["private"] "fun" [ref "."] name "[" decl,* "]" ":" expr block
	//	funDecl ::= ["private"] "fun" [ref "."] name                ":" expr block
	// * /
	public AssertDeclElements getAssertDeclAccess() {
		return (pAssertDecl != null) ? pAssertDecl : (pAssertDecl = new AssertDeclElements());
	}
	
	public ParserRule getAssertDeclRule() {
		return getAssertDeclAccess().getRule();
	}

	//FunDecl:
	//  "private"? "fun" (ref=Ref ".")? funName=Name ("[" (decl=Decl ("," decl2+=Decl)*)? "]"|"("
	//  (decl=Decl ("," decl2+=Decl)*)? ")") ":" expr=Expression b=BlockBis; 
	//	
	/// *
	//	funDecl ::= ["private"] "fun" [ref "."] name "(" decl,* ")" ":" expr block
	//	funDecl ::= ["private"] "fun" [ref "."] name "[" decl,* "]" ":" expr block
	//	funDecl ::= ["private"] "fun" [ref "."] name                ":" expr block
	// * /	
	//	 
	//	        	                               	 
	//
	/// *
	//	funDecl ::= ["private"] "pred" [ref "."] name "(" decl,* ")" block
	//	funDecl ::= ["private"] "pred" [ref "."] name "[" decl,* "]" block
	//	funDecl ::= ["private"] "pred" [ref "."] name                block
	// * /
	public FunDeclElements getFunDeclAccess() {
		return (pFunDecl != null) ? pFunDecl : (pFunDecl = new FunDeclElements());
	}
	
	public ParserRule getFunDeclRule() {
		return getFunDeclAccess().getRule();
	}

	//PredDecl:
	//  "private"? pred="pred" (ref=Ref ".")? predName=Name ("[" (decl=Decl ("," decl2+=Decl)*)?
	//  "]"|"(" (decl=Decl ("," decl2+=Decl)*)? ")")? b=BlockBis; 
	//
	/// *
	//	funDecl ::= ["private"] "pred" [ref "."] name "(" decl,* ")" block
	//	funDecl ::= ["private"] "pred" [ref "."] name "[" decl,* "]" block
	//	funDecl ::= ["private"] "pred" [ref "."] name                block
	// * /	
	//	 
	//	        	                            	 
	//
	/// *
	//	cmdDecl ::= [name ":"] ["run"|"check"] [name|block] scope //JUST RUN
	// * /
	public PredDeclElements getPredDeclAccess() {
		return (pPredDecl != null) ? pPredDecl : (pPredDecl = new PredDeclElements());
	}
	
	public ParserRule getPredDeclRule() {
		return getPredDeclAccess().getRule();
	}

	//RunDecl:
	//  (runName=Name ":")? run="run" (name2=[Name]|b=BlockBis) scope=Scope; 
	//
	/// *
	//	cmdDecl ::= [name ":"] ["run"|"check"] [name|block] scope //JUST RUN
	// * /
	//	 
	//	            
	//
	/// *
	//	cmdDecl ::= [name ":"] ["run"|"check"] [name|block] scope //JUST CHECK
	// * /
	public RunDeclElements getRunDeclAccess() {
		return (pRunDecl != null) ? pRunDecl : (pRunDecl = new RunDeclElements());
	}
	
	public ParserRule getRunDeclRule() {
		return getRunDeclAccess().getRule();
	}

	//CheckDecl:
	//  (checkName=Name ":")? check="check" (name2=[Name]|b=BlockBis) scope=Scope; 
	//
	/// *
	//	cmdDecl ::= [name ":"] ["run"|"check"] [name|block] scope //JUST CHECK
	// * /	
	//	 
	//	            
	//	
	/// *
	//	scope ::= "for" number                   ["expect" [0|1]]
	//	scope ::= "for" number "but" typescope,+ ["expect" [0|1]]
	//	scope ::= "for"              typescope,+ ["expect" [0|1]]
	//	scope ::=                                ["expect" [0|1]]
	//	
	// * /
	public CheckDeclElements getCheckDeclAccess() {
		return (pCheckDecl != null) ? pCheckDecl : (pCheckDecl = new CheckDeclElements());
	}
	
	public ParserRule getCheckDeclRule() {
		return getCheckDeclAccess().getRule();
	}

	//Scope:
	//  ("for" (INT ("but" typescope=Typescope ("," typescope=Typescope)*)?|typescope=
	//  Typescope ("," typescope=Typescope)*)?)? ("expect" ("0"|"1"))?; 
	//	
	/// *
	//	scope ::= "for" number                   ["expect" [0|1]]
	//	scope ::= "for" number "but" typescope,+ ["expect" [0|1]]
	//	scope ::= "for"              typescope,+ ["expect" [0|1]]
	//	scope ::=                                ["expect" [0|1]]
	//	
	// * /	
	//	 
	//	                	      	 										
	//
	/// *
	//	typescope ::= ["exactly"] number [name|"int"|"seq"]
	// * /
	public ScopeElements getScopeAccess() {
		return (pScope != null) ? pScope : (pScope = new ScopeElements());
	}
	
	public ParserRule getScopeRule() {
		return getScopeAccess().getRule();
	}

	//Typescope:
	//  "exactly"? INT (n=[Name]|("int"|"seq")); 										
	//
	/// *
	//	typescope ::= ["exactly"] number [name|"int"|"seq"]
	// * /
	//	 
	//	    	 
	//		
	/// *
	//	enumDecl ::= "enum" name "{" name  ("," name)*  "}"
	// * /
	public TypescopeElements getTypescopeAccess() {
		return (pTypescope != null) ? pTypescope : (pTypescope = new TypescopeElements());
	}
	
	public ParserRule getTypescopeRule() {
		return getTypescopeAccess().getRule();
	}

	//EnumDecl:
	//  "enum" enumName=Name "{" name2=Name ("," name3+=Name)* "}"; 
	//		
	/// *
	//	enumDecl ::= "enum" name "{" name  ("," name)*  "}"
	// * /
	//	 
	//	            
	//
	/// *
	//	sigDecl ::= sigQual* "sig" name,+ [sigExt] "{" decl,* "}" [block]
	// * /
	public EnumDeclElements getEnumDeclAccess() {
		return (pEnumDecl != null) ? pEnumDecl : (pEnumDecl = new EnumDeclElements());
	}
	
	public ParserRule getEnumDeclRule() {
		return getEnumDeclAccess().getRule();
	}

	//SigDecl:
	//  SigQual* "sig" sigName=Name ("," name2+=Name)* sigExt=SigExt? "{" (decl=Decl ("," decl2+=
	//  Decl)*)? "}" b=BlockBis?; 
	//
	/// *
	//	sigDecl ::= sigQual* "sig" name,+ [sigExt] "{" decl,* "}" [block]
	// * /	
	//	 
	//	                        
	//	
	/// *
	//	sigQual ::= "abstract" | "lone" | "one" | "some" | "private"	
	// * /
	public SigDeclElements getSigDeclAccess() {
		return (pSigDecl != null) ? pSigDecl : (pSigDecl = new SigDeclElements());
	}
	
	public ParserRule getSigDeclRule() {
		return getSigDeclAccess().getRule();
	}

	//SigQual returns ecore::EString:
	//  "abstract"|"lone"|"one"|"some"|"private"; 
	//	
	/// *
	//	sigQual ::= "abstract" | "lone" | "one" | "some" | "private"	
	// * /
	//	 
	//			 
	//				 
	//				 
	//				 
	//			 
	//
	/// *
	//	sigExt ::= "extends" ref
	//	sigExt ::= "in" ref ["+" ref]*
	// * /
	public SigQualElements getSigQualAccess() {
		return (pSigQual != null) ? pSigQual : (pSigQual = new SigQualElements());
	}
	
	public ParserRule getSigQualRule() {
		return getSigQualAccess().getRule();
	}

	//SigExt:
	//  "extends" ref=Ref|"in" ref=Ref ("+" ref2+=Ref)*; 
	//
	/// *
	//	sigExt ::= "extends" ref
	//	sigExt ::= "in" ref ["+" ref]*
	// * /	
	//	 
	//	  				   
	//	      	 
	//
	/// *
	//	expr ::= "let" letDecl,+ blockOrBar						1./	
	//       | quant decl,+    blockOrBar							2./
	//       | unOp expr											3./
	//       | expr binOp   expr									4./
	//       | expr arrowOp expr									5./
	//       | expr ["!"|"not"]? compareOp expr					6./
	//       | expr ["=>"|"implies"] expr "else" expr //PROBLEM	7./
	//       | expr "[" expr,* "]"								8./
	//       |     number											9./
	//       | "-" number											10./
	//       | "none"												11./
	//       | "iden"												12./
	//       | "univ"												13./
	//       | "Int"												14./
	//       | "seq/Int"											15./
	//       | "(" expr ")"										16./
	//       | ["@"] Name											17./
	//       | block												18./
	//       | "{" decl,+ blockOrBar "}"							19./
	//	
	// * /
	public SigExtElements getSigExtAccess() {
		return (pSigExt != null) ? pSigExt : (pSigExt = new SigExtElements());
	}
	
	public ParserRule getSigExtRule() {
		return getSigExtAccess().getRule();
	}

	//Expression:
	//  term=TerminalExpr ("[" exprT=Expression* "]"|op=( "+" | "&" | "." | "-" | "||" | "or" | "&&" |
	//  "and" | "<=>" | "iff" | "++" | "<:" | ":>" | "<<" | ">>" | ">>>" ) right=Expression|("!"|"not")? op
	//  =( "=" | "in" | "<" | ">" | "<=" | "=>" ) right=Expression|arrowOp=ArrowOp right=Expression)?; 
	//
	/// *
	//	expr ::= "let" letDecl,+ blockOrBar						1./	
	//       | quant decl,+    blockOrBar							2./
	//       | unOp expr											3./
	//       | expr binOp   expr									4./
	//       | expr arrowOp expr									5./
	//       | expr ["!"|"not"]? compareOp expr					6./
	//       | expr ["=>"|"implies"] expr "else" expr //PROBLEM	7./
	//       | expr "[" expr,* "]"								8./
	//       |     number											9./
	//       | "-" number											10./
	//       | "none"												11./
	//       | "iden"												12./
	//       | "univ"												13./
	//       | "Int"												14./
	//       | "seq/Int"											15./
	//       | "(" expr ")"										16./
	//       | ["@"] Name											17./
	//       | block												18./
	//       | "{" decl,+ blockOrBar "}"							19./
	//	
	// * /	
	//  
	//	
	//	 	 
	//						    											 //8./												
	//						 / *|"=>"|"implies"* / 	    	 //4./
	//						     		 //6./													
	//						   									 //5./																						//|	
	//						 //("=>"|"implies") (then=Expression ("else" right=Expression)? )    //7./
	public ExpressionElements getExpressionAccess() {
		return (pExpression != null) ? pExpression : (pExpression = new ExpressionElements());
	}
	
	public ParserRule getExpressionRule() {
		return getExpressionAccess().getRule();
	}

	//TerminalExpr returns Expression:
	//  "let" LetDecl ("," letDecl=LetDecl)* blockOrBarBis=BlockOrBarBis|("all"|"sum") decl=
	//  Decl b=BlockOrBarBis|("!"|"not"|"set"|"seq"|"#"|"~"|"*"|"^") TerminalExpr|("no"|
	//  "some"|"lone"|"one") t=TerminalExpr|INT|Integer|"none"|"iden"|"univ"|"Int"|
	//  "seq/Int"|"(" exprT=Expression ")"|"@"? nameRef=[Name]|"{" (Block|(decl=Decl ",")+
	//  blockOrBar=BlockOrBar "}"); 
	//						
	//    
	//	        		 //1./
	//	     					 //2./
	//	   	 //3./
	//   	     / *Decl ("," declSuite+=Decl)* block=BlockOrBarBis |* /   //2./ AND 3./ ERROR with Decl here 
	//     																			 //9./
	//   	 																		 //10./
	//	 																		 //11./
	//	 																		 //12./
	//	 																		 //13./
	//	 																		 //14./
	//	 																	 //15./
	//	     													 //16./
	//	   														 //17./
	//	             					 //18 AND 19./
	//	
	/// *
	//	decl ::= ["private"] ["disj"] name,+ ":" ["disj"] expr
	// * /
	public TerminalExprElements getTerminalExprAccess() {
		return (pTerminalExpr != null) ? pTerminalExpr : (pTerminalExpr = new TerminalExprElements());
	}
	
	public ParserRule getTerminalExprRule() {
		return getTerminalExprAccess().getRule();
	}

	//Decl:
	//  "private"? "disj"? name=Name ("," suite+=Name)* ":" "disj"? exprDecl=Expression; //18 AND 19./
	//	
	/// *
	//	decl ::= ["private"] ["disj"] name,+ ":" ["disj"] expr
	// * /	
	//	 
	//	                 	 
	//
	/// *
	//	REMOVE
	// * /
	public DeclElements getDeclAccess() {
		return (pDecl != null) ? pDecl : (pDecl = new DeclElements());
	}
	
	public ParserRule getDeclRule() {
		return getDeclAccess().getRule();
	}

	//Decl2:
	//  "private"? "disj"? Name ":" "disj"? exprDecl=Expression; 
	//
	/// *
	//	REMOVE
	// * /
	//	 
	//	          	 
	//	
	/// *
	//	letDecl ::= name "=" expr
	// * /
	public Decl2Elements getDecl2Access() {
		return (pDecl2 != null) ? pDecl2 : (pDecl2 = new Decl2Elements());
	}
	
	public ParserRule getDecl2Rule() {
		return getDecl2Access().getRule();
	}

	//LetDecl:
	//  Name "=" exprLet=Expression; 
	//	
	/// *
	//	letDecl ::= name "=" expr
	// * /	
	//	 
	//	    	 
	//
	/// *
	//	arrowOp ::= ["some"|"one"|"lone"|"set"]? "->" ["some"|"one"|"lone"|"set"]? //redondance in the end of the expression
	// * /
	public LetDeclElements getLetDeclAccess() {
		return (pLetDecl != null) ? pLetDecl : (pLetDecl = new LetDeclElements());
	}
	
	public ParserRule getLetDeclRule() {
		return getLetDeclAccess().getRule();
	}

	//ArrowOp:
	//  ("some"|"one"|"lone"|"set")? s="->"; 
	//
	/// *
	//	arrowOp ::= ["some"|"one"|"lone"|"set"]? "->" ["some"|"one"|"lone"|"set"]? //redondance in the end of the expression
	// * /
	//	 
	//	                
	//
	/// *
	//	block ::= "{" expr* "}" //without "{"
	// * /
	public ArrowOpElements getArrowOpAccess() {
		return (pArrowOp != null) ? pArrowOp : (pArrowOp = new ArrowOpElements());
	}
	
	public ParserRule getArrowOpRule() {
		return getArrowOpAccess().getRule();
	}

	//Block:
	//  expr+=Expression* "}"; 
	//
	/// *
	//	block ::= "{" expr* "}" //without "{"
	// * /
	//	 
	//	  
	//
	/// *
	//	block ::= "{" expr* "}" //with "{"
	// * /
	public BlockElements getBlockAccess() {
		return (pBlock != null) ? pBlock : (pBlock = new BlockElements());
	}
	
	public ParserRule getBlockRule() {
		return getBlockAccess().getRule();
	}

	//BlockBis:
	//  "{" Block; 
	//
	/// *
	//	block ::= "{" expr* "}" //with "{"
	// * /
	//	 
	//	  	 
	//
	/// *
	//	blockOrBar ::= block
	//	blockOrBar ::= "|" expr
	// * /
	public BlockBisElements getBlockBisAccess() {
		return (pBlockBis != null) ? pBlockBis : (pBlockBis = new BlockBisElements());
	}
	
	public ParserRule getBlockBisRule() {
		return getBlockBisAccess().getRule();
	}

	//BlockOrBar:
	//  BlockBis|"|" Expression; 
	//
	/// *
	//	blockOrBar ::= block
	//	blockOrBar ::= "|" expr
	// * /	
	//	 
	//						 
	//	  	 
	//
	/// *
	//	blockOrBar ::= block
	//	blockOrBar ::= "|" expr //TerminalExpr in the end of the expression
	// * /
	public BlockOrBarElements getBlockOrBarAccess() {
		return (pBlockOrBar != null) ? pBlockOrBar : (pBlockOrBar = new BlockOrBarElements());
	}
	
	public ParserRule getBlockOrBarRule() {
		return getBlockOrBarAccess().getRule();
	}

	//BlockOrBarBis:
	//  BlockBis|"|" TerminalExpr; 
	//
	/// *
	//	blockOrBar ::= block
	//	blockOrBar ::= "|" expr //TerminalExpr in the end of the expression
	// * /	
	//	 
	//						 
	//	  	 
	//
	/// *
	//	name ::= ["this" | ID] ["/" ID]*
	// * /
	public BlockOrBarBisElements getBlockOrBarBisAccess() {
		return (pBlockOrBarBis != null) ? pBlockOrBarBis : (pBlockOrBarBis = new BlockOrBarBisElements());
	}
	
	public ParserRule getBlockOrBarBisRule() {
		return getBlockOrBarBisAccess().getRule();
	}

	//Name:
	//  this="this"|name=ID|nameComplete=NameBis; 
	//
	/// *
	//	name ::= ["this" | ID] ["/" ID]*
	// * /
	public NameElements getNameAccess() {
		return (pName != null) ? pName : (pName = new NameElements());
	}
	
	public ParserRule getNameRule() {
		return getNameAccess().getRule();
	}

	//NameBis:
	//  ("this"|ID) ("/" suite=ID)+; 
	//
	//
	//	    
	//
	/// *
	//	ref ::= name | "univ" | "Int" | "seq/Int"
	// * /
	public NameBisElements getNameBisAccess() {
		return (pNameBis != null) ? pNameBis : (pNameBis = new NameBisElements());
	}
	
	public ParserRule getNameBisRule() {
		return getNameBisAccess().getRule();
	}

	//Ref:
	//  name=[Name]|"univ"|"Int"|"seq/Int"; 
	//
	/// *
	//	ref ::= name | "univ" | "Int" | "seq/Int"
	// * /
	public RefElements getRefAccess() {
		return (pRef != null) ? pRef : (pRef = new RefElements());
	}
	
	public ParserRule getRefRule() {
		return getRefAccess().getRule();
	}

	//terminal Integer:
	//  "-" INT;
	public TerminalRule getIntegerRule() {
		return (tInteger != null) ? tInteger : (tInteger = (TerminalRule) GrammarUtil.findRuleForName(getGrammar(), "Integer"));
	} 

	//terminal COMMENT:
	//  "--"->"\n"; 
	//	
	//  	 
	//		
	/// *
	//Instruction	:
	//	M	| U;
	//	
	//M	:
	//	Expression ("=>" then=M "else" else=M)?;
	//	
	//U	:
	//	Expression "=>" then=Instruction	|
	//	Expression ("=>" then=M "else" else=U;* /
	public TerminalRule getCOMMENTRule() {
		return (tCOMMENT != null) ? tCOMMENT : (tCOMMENT = (TerminalRule) GrammarUtil.findRuleForName(getGrammar(), "COMMENT"));
	} 

	//terminal ID:
	//  "^"? ("a".."z" | "A".."Z" | "_") ("a".."z" | "A".."Z" | "_" | "0".."9")*;
	public TerminalRule getIDRule() {
		return gaTerminals.getIDRule();
	} 

	//terminal INT returns ecore::EInt:
	//  "0".."9"+;
	public TerminalRule getINTRule() {
		return gaTerminals.getINTRule();
	} 

	//terminal STRING:
	//  "\"" ("\\" ("b" | "t" | "n" | "f" | "r" | "\"" | "\'" | "\\") | !("\\" | "\""))* "\"" | "\'" ("\\" ("b" |
	//  "t" | "n" | "f" | "r" | "\"" | "\'" | "\\") | !("\\" | "\'"))* "\'";
	public TerminalRule getSTRINGRule() {
		return gaTerminals.getSTRINGRule();
	} 

	//terminal ML_COMMENT:
	//  "/ *"->"* /";
	public TerminalRule getML_COMMENTRule() {
		return gaTerminals.getML_COMMENTRule();
	} 

	//terminal SL_COMMENT:
	//  "//" !("\n" | "\r")* ("\r"? "\n")?;
	public TerminalRule getSL_COMMENTRule() {
		return gaTerminals.getSL_COMMENTRule();
	} 

	//terminal WS:
	//  (" " | "\t" | "\r" | "\n")+;
	public TerminalRule getWSRule() {
		return gaTerminals.getWSRule();
	} 

	//terminal ANY_OTHER:
	//  .;
	public TerminalRule getANY_OTHERRule() {
		return gaTerminals.getANY_OTHERRule();
	} 
}
