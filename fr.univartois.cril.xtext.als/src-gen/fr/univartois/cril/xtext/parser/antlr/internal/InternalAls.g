/*
* generated by Xtext
*/
grammar InternalAls;

options {
	superClass=AbstractInternalAntlrParser;
	backtrack=true;
	
}

@lexer::header {
package fr.univartois.cril.xtext.parser.antlr.internal;

// Hack: Use our own Lexer superclass by means of import. 
// Currently there is no other way to specify the superclass for the lexer.
import org.eclipse.xtext.parser.antlr.Lexer;
}

@parser::header {
package fr.univartois.cril.xtext.parser.antlr.internal; 

import java.io.InputStream;
import org.eclipse.xtext.*;
import org.eclipse.xtext.parser.*;
import org.eclipse.xtext.parser.impl.*;
import org.eclipse.xtext.parsetree.*;
import org.eclipse.emf.ecore.util.EcoreUtil;
import org.eclipse.emf.ecore.EObject;
import org.eclipse.xtext.parser.antlr.AbstractInternalAntlrParser;
import org.eclipse.xtext.parser.antlr.XtextTokenStream;
import org.eclipse.xtext.parser.antlr.XtextTokenStream.HiddenTokens;
import org.eclipse.xtext.parser.antlr.AntlrDatatypeRuleToken;
import org.eclipse.xtext.conversion.ValueConverterException;
import fr.univartois.cril.xtext.services.AlsGrammarAccess;

}

@parser::members {

/*
  This grammar contains a lot of empty actions to work around a bug in ANTLR.
  Otherwise the ANTLR tool will create synpreds that cannot be compiled in some rare cases.
*/
 
 	private AlsGrammarAccess grammarAccess;
 	
    public InternalAlsParser(TokenStream input, IAstFactory factory, AlsGrammarAccess grammarAccess) {
        this(input);
        this.factory = factory;
        registerRules(grammarAccess.getGrammar());
        this.grammarAccess = grammarAccess;
    }
    
    @Override
    protected InputStream getTokenFile() {
    	ClassLoader classLoader = getClass().getClassLoader();
    	return classLoader.getResourceAsStream("fr/univartois/cril/xtext/parser/antlr/internal/InternalAls.tokens");
    }
    
    @Override
    protected String getFirstRuleName() {
    	return "Specification";	
   	}
   	
   	@Override
   	protected AlsGrammarAccess getGrammarAccess() {
   		return grammarAccess;
   	}
}

@rulecatch { 
    catch (RecognitionException re) { 
        recover(input,re); 
        appendSkippedTokens();
    } 
}




// Entry rule entryRuleSpecification
entryRuleSpecification returns [EObject current=null] 
	:
	{ currentNode = createCompositeNode(grammarAccess.getSpecificationRule(), currentNode); }
	 iv_ruleSpecification=ruleSpecification 
	 { $current=$iv_ruleSpecification.current; } 
	 EOF 
;

// Rule Specification
ruleSpecification returns [EObject current=null] 
    @init { EObject temp=null; setCurrentLookahead(); resetLookahead(); 
    }
    @after { resetLookahead(); 
    	lastConsumedNode = currentNode;
    }:
((
(
		{ 
	        currentNode=createCompositeNode(grammarAccess.getSpecificationAccess().getModuleModuleParserRuleCall_0_0(), currentNode); 
	    }
		lv_module_0_0=ruleModule		{
	        if ($current==null) {
	            $current = factory.create(grammarAccess.getSpecificationRule().getType().getClassifier());
	            associateNodeWithAstElement(currentNode.getParent(), $current);
	        }
	        try {
	       		set(
	       			$current, 
	       			"module",
	        		lv_module_0_0, 
	        		"Module", 
	        		currentNode);
	        } catch (ValueConverterException vce) {
				handleValueConverterException(vce);
	        }
	        currentNode = currentNode.getParent();
	    }

)
)?(
(
		{ 
	        currentNode=createCompositeNode(grammarAccess.getSpecificationAccess().getOpenOpenParserRuleCall_1_0(), currentNode); 
	    }
		lv_open_1_0=ruleOpen		{
	        if ($current==null) {
	            $current = factory.create(grammarAccess.getSpecificationRule().getType().getClassifier());
	            associateNodeWithAstElement(currentNode.getParent(), $current);
	        }
	        try {
	       		add(
	       			$current, 
	       			"open",
	        		lv_open_1_0, 
	        		"Open", 
	        		currentNode);
	        } catch (ValueConverterException vce) {
				handleValueConverterException(vce);
	        }
	        currentNode = currentNode.getParent();
	    }

)
)*(
(
		{ 
	        currentNode=createCompositeNode(grammarAccess.getSpecificationAccess().getParagraphParagraphParserRuleCall_2_0(), currentNode); 
	    }
		lv_paragraph_2_0=ruleParagraph		{
	        if ($current==null) {
	            $current = factory.create(grammarAccess.getSpecificationRule().getType().getClassifier());
	            associateNodeWithAstElement(currentNode.getParent(), $current);
	        }
	        try {
	       		add(
	       			$current, 
	       			"paragraph",
	        		lv_paragraph_2_0, 
	        		"Paragraph", 
	        		currentNode);
	        } catch (ValueConverterException vce) {
				handleValueConverterException(vce);
	        }
	        currentNode = currentNode.getParent();
	    }

)
)*)
;





// Entry rule entryRuleModule
entryRuleModule returns [EObject current=null] 
	:
	{ currentNode = createCompositeNode(grammarAccess.getModuleRule(), currentNode); }
	 iv_ruleModule=ruleModule 
	 { $current=$iv_ruleModule.current; } 
	 EOF 
;

// Rule Module
ruleModule returns [EObject current=null] 
    @init { EObject temp=null; setCurrentLookahead(); resetLookahead(); 
    }
    @after { resetLookahead(); 
    	lastConsumedNode = currentNode;
    }:
(	'module' 
    {
        createLeafNode(grammarAccess.getModuleAccess().getModuleKeyword_0(), null); 
    }
(
(
		{ 
	        currentNode=createCompositeNode(grammarAccess.getModuleAccess().getModuleNameNameParserRuleCall_1_0(), currentNode); 
	    }
		lv_moduleName_1_0=ruleName		{
	        if ($current==null) {
	            $current = factory.create(grammarAccess.getModuleRule().getType().getClassifier());
	            associateNodeWithAstElement(currentNode.getParent(), $current);
	        }
	        try {
	       		set(
	       			$current, 
	       			"moduleName",
	        		lv_moduleName_1_0, 
	        		"Name", 
	        		currentNode);
	        } catch (ValueConverterException vce) {
				handleValueConverterException(vce);
	        }
	        currentNode = currentNode.getParent();
	    }

)
)((
(
		{ 
	        currentNode=createCompositeNode(grammarAccess.getModuleAccess().getLeftLeftSquareBracketKeywordParserRuleCall_2_0_0(), currentNode); 
	    }
		lv_left_2_0=ruleLeftSquareBracketKeyword		{
	        if ($current==null) {
	            $current = factory.create(grammarAccess.getModuleRule().getType().getClassifier());
	            associateNodeWithAstElement(currentNode.getParent(), $current);
	        }
	        try {
	       		set(
	       			$current, 
	       			"left",
	        		lv_left_2_0, 
	        		"LeftSquareBracketKeyword", 
	        		currentNode);
	        } catch (ValueConverterException vce) {
				handleValueConverterException(vce);
	        }
	        currentNode = currentNode.getParent();
	    }

)
)(
(
		lv_exactly_3_0=	'exactly' 
    {
        createLeafNode(grammarAccess.getModuleAccess().getExactlyExactlyKeyword_2_1_0(), "exactly"); 
    }
 
	    {
	        if ($current==null) {
	            $current = factory.create(grammarAccess.getModuleRule().getType().getClassifier());
	            associateNodeWithAstElement(currentNode, $current);
	        }
	        
	        try {
	       		add($current, "exactly", lv_exactly_3_0, "exactly", lastConsumedNode);
	        } catch (ValueConverterException vce) {
				handleValueConverterException(vce);
	        }
	    }

)
)?(
(
		{ 
	        currentNode=createCompositeNode(grammarAccess.getModuleAccess().getNameExactlyNameParserRuleCall_2_2_0(), currentNode); 
	    }
		lv_name_4_0=ruleExactlyName		{
	        if ($current==null) {
	            $current = factory.create(grammarAccess.getModuleRule().getType().getClassifier());
	            associateNodeWithAstElement(currentNode.getParent(), $current);
	        }
	        try {
	       		add(
	       			$current, 
	       			"name",
	        		lv_name_4_0, 
	        		"ExactlyName", 
	        		currentNode);
	        } catch (ValueConverterException vce) {
				handleValueConverterException(vce);
	        }
	        currentNode = currentNode.getParent();
	    }

)
)((
(
		{ 
	        currentNode=createCompositeNode(grammarAccess.getModuleAccess().getCommaCommaParserRuleCall_2_3_0_0(), currentNode); 
	    }
		lv_comma_5_0=ruleComma		{
	        if ($current==null) {
	            $current = factory.create(grammarAccess.getModuleRule().getType().getClassifier());
	            associateNodeWithAstElement(currentNode.getParent(), $current);
	        }
	        try {
	       		add(
	       			$current, 
	       			"comma",
	        		lv_comma_5_0, 
	        		"Comma", 
	        		currentNode);
	        } catch (ValueConverterException vce) {
				handleValueConverterException(vce);
	        }
	        currentNode = currentNode.getParent();
	    }

)
)(((
(
		lv_exactly_6_0=	'exactly' 
    {
        createLeafNode(grammarAccess.getModuleAccess().getExactlyExactlyKeyword_2_3_1_0_0_0(), "exactly"); 
    }
 
	    {
	        if ($current==null) {
	            $current = factory.create(grammarAccess.getModuleRule().getType().getClassifier());
	            associateNodeWithAstElement(currentNode, $current);
	        }
	        
	        try {
	       		add($current, "exactly", lv_exactly_6_0, "exactly", lastConsumedNode);
	        } catch (ValueConverterException vce) {
				handleValueConverterException(vce);
	        }
	    }

)
)?(
(
		lv_number_7_0=RULE_INT
		{
			createLeafNode(grammarAccess.getModuleAccess().getNumberINTTerminalRuleCall_2_3_1_0_1_0(), "number"); 
		}
		{
	        if ($current==null) {
	            $current = factory.create(grammarAccess.getModuleRule().getType().getClassifier());
	            associateNodeWithAstElement(currentNode, $current);
	        }
	        try {
	       		add(
	       			$current, 
	       			"number",
	        		lv_number_7_0, 
	        		"INT", 
	        		lastConsumedNode);
	        } catch (ValueConverterException vce) {
				handleValueConverterException(vce);
	        }
	    }

)
))
    |(
(
		{ 
	        currentNode=createCompositeNode(grammarAccess.getModuleAccess().getNameExactlyNameParserRuleCall_2_3_1_1_0(), currentNode); 
	    }
		lv_name_8_0=ruleExactlyName		{
	        if ($current==null) {
	            $current = factory.create(grammarAccess.getModuleRule().getType().getClassifier());
	            associateNodeWithAstElement(currentNode.getParent(), $current);
	        }
	        try {
	       		add(
	       			$current, 
	       			"name",
	        		lv_name_8_0, 
	        		"ExactlyName", 
	        		currentNode);
	        } catch (ValueConverterException vce) {
				handleValueConverterException(vce);
	        }
	        currentNode = currentNode.getParent();
	    }

)
)))*(
(
		{ 
	        currentNode=createCompositeNode(grammarAccess.getModuleAccess().getRightRightSquareBracketKeywordParserRuleCall_2_4_0(), currentNode); 
	    }
		lv_right_9_0=ruleRightSquareBracketKeyword		{
	        if ($current==null) {
	            $current = factory.create(grammarAccess.getModuleRule().getType().getClassifier());
	            associateNodeWithAstElement(currentNode.getParent(), $current);
	        }
	        try {
	       		set(
	       			$current, 
	       			"right",
	        		lv_right_9_0, 
	        		"RightSquareBracketKeyword", 
	        		currentNode);
	        } catch (ValueConverterException vce) {
				handleValueConverterException(vce);
	        }
	        currentNode = currentNode.getParent();
	    }

)
))?)
;





// Entry rule entryRuleOpen
entryRuleOpen returns [EObject current=null] 
	:
	{ currentNode = createCompositeNode(grammarAccess.getOpenRule(), currentNode); }
	 iv_ruleOpen=ruleOpen 
	 { $current=$iv_ruleOpen.current; } 
	 EOF 
;

// Rule Open
ruleOpen returns [EObject current=null] 
    @init { EObject temp=null; setCurrentLookahead(); resetLookahead(); 
    }
    @after { resetLookahead(); 
    	lastConsumedNode = currentNode;
    }:
((	'private' 
    {
        createLeafNode(grammarAccess.getOpenAccess().getPrivateKeyword_0(), null); 
    }
)?(
(
		{ 
	        currentNode=createCompositeNode(grammarAccess.getOpenAccess().getOpenNameOpenNameParserRuleCall_1_0(), currentNode); 
	    }
		lv_openName_1_0=ruleOpenName		{
	        if ($current==null) {
	            $current = factory.create(grammarAccess.getOpenRule().getType().getClassifier());
	            associateNodeWithAstElement(currentNode.getParent(), $current);
	        }
	        try {
	       		set(
	       			$current, 
	       			"openName",
	        		lv_openName_1_0, 
	        		"OpenName", 
	        		currentNode);
	        } catch (ValueConverterException vce) {
				handleValueConverterException(vce);
	        }
	        currentNode = currentNode.getParent();
	    }

)
)((
(
		{ 
	        currentNode=createCompositeNode(grammarAccess.getOpenAccess().getLeftLeftSquareBracketKeywordParserRuleCall_2_0_0(), currentNode); 
	    }
		lv_left_2_0=ruleLeftSquareBracketKeyword		{
	        if ($current==null) {
	            $current = factory.create(grammarAccess.getOpenRule().getType().getClassifier());
	            associateNodeWithAstElement(currentNode.getParent(), $current);
	        }
	        try {
	       		set(
	       			$current, 
	       			"left",
	        		lv_left_2_0, 
	        		"LeftSquareBracketKeyword", 
	        		currentNode);
	        } catch (ValueConverterException vce) {
				handleValueConverterException(vce);
	        }
	        currentNode = currentNode.getParent();
	    }

)
)((
(
		{ 
	        currentNode=createCompositeNode(grammarAccess.getOpenAccess().getPreviousNameAsAsNameParserRuleCall_2_1_0_0(), currentNode); 
	    }
		lv_previousNameAs_3_0=ruleAsName		{
	        if ($current==null) {
	            $current = factory.create(grammarAccess.getOpenRule().getType().getClassifier());
	            associateNodeWithAstElement(currentNode.getParent(), $current);
	        }
	        try {
	       		set(
	       			$current, 
	       			"previousNameAs",
	        		lv_previousNameAs_3_0, 
	        		"AsName", 
	        		currentNode);
	        } catch (ValueConverterException vce) {
				handleValueConverterException(vce);
	        }
	        currentNode = currentNode.getParent();
	    }

)
)	'/' 
    {
        createLeafNode(grammarAccess.getOpenAccess().getSolidusKeyword_2_1_1(), null); 
    }
)?(
(
		{ 
	        currentNode=createCompositeNode(grammarAccess.getOpenAccess().getRefnameReferencesNameParserRuleCall_2_2_0(), currentNode); 
	    }
		lv_refname_5_0=ruleReferencesName		{
	        if ($current==null) {
	            $current = factory.create(grammarAccess.getOpenRule().getType().getClassifier());
	            associateNodeWithAstElement(currentNode.getParent(), $current);
	        }
	        try {
	       		set(
	       			$current, 
	       			"refname",
	        		lv_refname_5_0, 
	        		"ReferencesName", 
	        		currentNode);
	        } catch (ValueConverterException vce) {
				handleValueConverterException(vce);
	        }
	        currentNode = currentNode.getParent();
	    }

)
)(
(
		{ 
	        currentNode=createCompositeNode(grammarAccess.getOpenAccess().getRightRightSquareBracketKeywordParserRuleCall_2_3_0(), currentNode); 
	    }
		lv_right_6_0=ruleRightSquareBracketKeyword		{
	        if ($current==null) {
	            $current = factory.create(grammarAccess.getOpenRule().getType().getClassifier());
	            associateNodeWithAstElement(currentNode.getParent(), $current);
	        }
	        try {
	       		set(
	       			$current, 
	       			"right",
	        		lv_right_6_0, 
	        		"RightSquareBracketKeyword", 
	        		currentNode);
	        } catch (ValueConverterException vce) {
				handleValueConverterException(vce);
	        }
	        currentNode = currentNode.getParent();
	    }

)
))?(	'as' 
    {
        createLeafNode(grammarAccess.getOpenAccess().getAsKeyword_3_0(), null); 
    }
(
(
		{ 
	        currentNode=createCompositeNode(grammarAccess.getOpenAccess().getNameAsAsNameParserRuleCall_3_1_0(), currentNode); 
	    }
		lv_nameAs_8_0=ruleAsName		{
	        if ($current==null) {
	            $current = factory.create(grammarAccess.getOpenRule().getType().getClassifier());
	            associateNodeWithAstElement(currentNode.getParent(), $current);
	        }
	        try {
	       		set(
	       			$current, 
	       			"nameAs",
	        		lv_nameAs_8_0, 
	        		"AsName", 
	        		currentNode);
	        } catch (ValueConverterException vce) {
				handleValueConverterException(vce);
	        }
	        currentNode = currentNode.getParent();
	    }

)
))?)
;





// Entry rule entryRuleParagraph
entryRuleParagraph returns [EObject current=null] 
	:
	{ currentNode = createCompositeNode(grammarAccess.getParagraphRule(), currentNode); }
	 iv_ruleParagraph=ruleParagraph 
	 { $current=$iv_ruleParagraph.current; } 
	 EOF 
;

// Rule Paragraph
ruleParagraph returns [EObject current=null] 
    @init { EObject temp=null; setCurrentLookahead(); resetLookahead(); 
    }
    @after { resetLookahead(); 
    	lastConsumedNode = currentNode;
    }:
(
	{ 
	  /* */ 
	}
    { 
        currentNode=createCompositeNode(grammarAccess.getParagraphAccess().getFactDeclParserRuleCall_0(), currentNode); 
    }
    this_FactDecl_0=ruleFactDecl
    { 
        $current = $this_FactDecl_0.current; 
        currentNode = currentNode.getParent();
    }

    |
	{ 
	  /* */ 
	}
    { 
        currentNode=createCompositeNode(grammarAccess.getParagraphAccess().getAssertDeclParserRuleCall_1(), currentNode); 
    }
    this_AssertDecl_1=ruleAssertDecl
    { 
        $current = $this_AssertDecl_1.current; 
        currentNode = currentNode.getParent();
    }

    |
	{ 
	  /* */ 
	}
    { 
        currentNode=createCompositeNode(grammarAccess.getParagraphAccess().getFunDeclParserRuleCall_2(), currentNode); 
    }
    this_FunDecl_2=ruleFunDecl
    { 
        $current = $this_FunDecl_2.current; 
        currentNode = currentNode.getParent();
    }

    |
	{ 
	  /* */ 
	}
    { 
        currentNode=createCompositeNode(grammarAccess.getParagraphAccess().getPredDeclParserRuleCall_3(), currentNode); 
    }
    this_PredDecl_3=rulePredDecl
    { 
        $current = $this_PredDecl_3.current; 
        currentNode = currentNode.getParent();
    }

    |
	{ 
	  /* */ 
	}
    { 
        currentNode=createCompositeNode(grammarAccess.getParagraphAccess().getRunDeclParserRuleCall_4(), currentNode); 
    }
    this_RunDecl_4=ruleRunDecl
    { 
        $current = $this_RunDecl_4.current; 
        currentNode = currentNode.getParent();
    }

    |
	{ 
	  /* */ 
	}
    { 
        currentNode=createCompositeNode(grammarAccess.getParagraphAccess().getFunDeclWParamParserRuleCall_5(), currentNode); 
    }
    this_FunDeclWParam_5=ruleFunDeclWParam
    { 
        $current = $this_FunDeclWParam_5.current; 
        currentNode = currentNode.getParent();
    }

    |
	{ 
	  /* */ 
	}
    { 
        currentNode=createCompositeNode(grammarAccess.getParagraphAccess().getCheckDeclParserRuleCall_6(), currentNode); 
    }
    this_CheckDecl_6=ruleCheckDecl
    { 
        $current = $this_CheckDecl_6.current; 
        currentNode = currentNode.getParent();
    }

    |
	{ 
	  /* */ 
	}
    { 
        currentNode=createCompositeNode(grammarAccess.getParagraphAccess().getEnumDeclParserRuleCall_7(), currentNode); 
    }
    this_EnumDecl_7=ruleEnumDecl
    { 
        $current = $this_EnumDecl_7.current; 
        currentNode = currentNode.getParent();
    }

    |
	{ 
	  /* */ 
	}
    { 
        currentNode=createCompositeNode(grammarAccess.getParagraphAccess().getLetOutDeclParserRuleCall_8(), currentNode); 
    }
    this_LetOutDecl_8=ruleLetOutDecl
    { 
        $current = $this_LetOutDecl_8.current; 
        currentNode = currentNode.getParent();
    }

    |
	{ 
	  /* */ 
	}
    { 
        currentNode=createCompositeNode(grammarAccess.getParagraphAccess().getSigDeclParserRuleCall_9(), currentNode); 
    }
    this_SigDecl_9=ruleSigDecl
    { 
        $current = $this_SigDecl_9.current; 
        currentNode = currentNode.getParent();
    }
)
;





// Entry rule entryRuleFactDecl
entryRuleFactDecl returns [EObject current=null] 
	:
	{ currentNode = createCompositeNode(grammarAccess.getFactDeclRule(), currentNode); }
	 iv_ruleFactDecl=ruleFactDecl 
	 { $current=$iv_ruleFactDecl.current; } 
	 EOF 
;

// Rule FactDecl
ruleFactDecl returns [EObject current=null] 
    @init { EObject temp=null; setCurrentLookahead(); resetLookahead(); 
    }
    @after { resetLookahead(); 
    	lastConsumedNode = currentNode;
    }:
((
(
		{ 
	        currentNode=createCompositeNode(grammarAccess.getFactDeclAccess().getFactNameFactNameParserRuleCall_0_0(), currentNode); 
	    }
		lv_factName_0_0=ruleFactName		{
	        if ($current==null) {
	            $current = factory.create(grammarAccess.getFactDeclRule().getType().getClassifier());
	            associateNodeWithAstElement(currentNode.getParent(), $current);
	        }
	        try {
	       		set(
	       			$current, 
	       			"factName",
	        		lv_factName_0_0, 
	        		"FactName", 
	        		currentNode);
	        } catch (ValueConverterException vce) {
				handleValueConverterException(vce);
	        }
	        currentNode = currentNode.getParent();
	    }

)
)(
(
		{ 
	        currentNode=createCompositeNode(grammarAccess.getFactDeclAccess().getBlockBlockParserRuleCall_1_0(), currentNode); 
	    }
		lv_block_1_0=ruleBlock		{
	        if ($current==null) {
	            $current = factory.create(grammarAccess.getFactDeclRule().getType().getClassifier());
	            associateNodeWithAstElement(currentNode.getParent(), $current);
	        }
	        try {
	       		set(
	       			$current, 
	       			"block",
	        		lv_block_1_0, 
	        		"Block", 
	        		currentNode);
	        } catch (ValueConverterException vce) {
				handleValueConverterException(vce);
	        }
	        currentNode = currentNode.getParent();
	    }

)
))
;





// Entry rule entryRuleAssertDecl
entryRuleAssertDecl returns [EObject current=null] 
	:
	{ currentNode = createCompositeNode(grammarAccess.getAssertDeclRule(), currentNode); }
	 iv_ruleAssertDecl=ruleAssertDecl 
	 { $current=$iv_ruleAssertDecl.current; } 
	 EOF 
;

// Rule AssertDecl
ruleAssertDecl returns [EObject current=null] 
    @init { EObject temp=null; setCurrentLookahead(); resetLookahead(); 
    }
    @after { resetLookahead(); 
    	lastConsumedNode = currentNode;
    }:
((
(
		{ 
	        currentNode=createCompositeNode(grammarAccess.getAssertDeclAccess().getAssertionNameAssertionNameParserRuleCall_0_0(), currentNode); 
	    }
		lv_assertionName_0_0=ruleAssertionName		{
	        if ($current==null) {
	            $current = factory.create(grammarAccess.getAssertDeclRule().getType().getClassifier());
	            associateNodeWithAstElement(currentNode.getParent(), $current);
	        }
	        try {
	       		set(
	       			$current, 
	       			"assertionName",
	        		lv_assertionName_0_0, 
	        		"AssertionName", 
	        		currentNode);
	        } catch (ValueConverterException vce) {
				handleValueConverterException(vce);
	        }
	        currentNode = currentNode.getParent();
	    }

)
)(
(
		{ 
	        currentNode=createCompositeNode(grammarAccess.getAssertDeclAccess().getBlockBlockParserRuleCall_1_0(), currentNode); 
	    }
		lv_block_1_0=ruleBlock		{
	        if ($current==null) {
	            $current = factory.create(grammarAccess.getAssertDeclRule().getType().getClassifier());
	            associateNodeWithAstElement(currentNode.getParent(), $current);
	        }
	        try {
	       		set(
	       			$current, 
	       			"block",
	        		lv_block_1_0, 
	        		"Block", 
	        		currentNode);
	        } catch (ValueConverterException vce) {
				handleValueConverterException(vce);
	        }
	        currentNode = currentNode.getParent();
	    }

)
))
;





// Entry rule entryRuleFunDecl
entryRuleFunDecl returns [EObject current=null] 
	:
	{ currentNode = createCompositeNode(grammarAccess.getFunDeclRule(), currentNode); }
	 iv_ruleFunDecl=ruleFunDecl 
	 { $current=$iv_ruleFunDecl.current; } 
	 EOF 
;

// Rule FunDecl
ruleFunDecl returns [EObject current=null] 
    @init { EObject temp=null; setCurrentLookahead(); resetLookahead(); 
    }
    @after { resetLookahead(); 
    	lastConsumedNode = currentNode;
    }:
((	'private' 
    {
        createLeafNode(grammarAccess.getFunDeclAccess().getPrivateKeyword_0(), null); 
    }
)?	'fun' 
    {
        createLeafNode(grammarAccess.getFunDeclAccess().getFunKeyword_1(), null); 
    }
((
(
		{ 
	        currentNode=createCompositeNode(grammarAccess.getFunDeclAccess().getRefRefParserRuleCall_2_0_0(), currentNode); 
	    }
		lv_ref_2_0=ruleRef		{
	        if ($current==null) {
	            $current = factory.create(grammarAccess.getFunDeclRule().getType().getClassifier());
	            associateNodeWithAstElement(currentNode.getParent(), $current);
	        }
	        try {
	       		set(
	       			$current, 
	       			"ref",
	        		lv_ref_2_0, 
	        		"Ref", 
	        		currentNode);
	        } catch (ValueConverterException vce) {
				handleValueConverterException(vce);
	        }
	        currentNode = currentNode.getParent();
	    }

)
)(
(
		{ 
	        currentNode=createCompositeNode(grammarAccess.getFunDeclAccess().getDotDotParserRuleCall_2_1_0(), currentNode); 
	    }
		lv_dot_3_0=ruleDot		{
	        if ($current==null) {
	            $current = factory.create(grammarAccess.getFunDeclRule().getType().getClassifier());
	            associateNodeWithAstElement(currentNode.getParent(), $current);
	        }
	        try {
	       		set(
	       			$current, 
	       			"dot",
	        		lv_dot_3_0, 
	        		"Dot", 
	        		currentNode);
	        } catch (ValueConverterException vce) {
				handleValueConverterException(vce);
	        }
	        currentNode = currentNode.getParent();
	    }

)
))?(
(
		{ 
	        currentNode=createCompositeNode(grammarAccess.getFunDeclAccess().getFunctionNameFunctionNameParserRuleCall_3_0(), currentNode); 
	    }
		lv_functionName_4_0=ruleFunctionName		{
	        if ($current==null) {
	            $current = factory.create(grammarAccess.getFunDeclRule().getType().getClassifier());
	            associateNodeWithAstElement(currentNode.getParent(), $current);
	        }
	        try {
	       		set(
	       			$current, 
	       			"functionName",
	        		lv_functionName_4_0, 
	        		"FunctionName", 
	        		currentNode);
	        } catch (ValueConverterException vce) {
				handleValueConverterException(vce);
	        }
	        currentNode = currentNode.getParent();
	    }

)
)(((
(
		{ 
	        currentNode=createCompositeNode(grammarAccess.getFunDeclAccess().getLeftSLeftSquareBracketKeywordParserRuleCall_4_0_0_0(), currentNode); 
	    }
		lv_leftS_5_0=ruleLeftSquareBracketKeyword		{
	        if ($current==null) {
	            $current = factory.create(grammarAccess.getFunDeclRule().getType().getClassifier());
	            associateNodeWithAstElement(currentNode.getParent(), $current);
	        }
	        try {
	       		set(
	       			$current, 
	       			"leftS",
	        		lv_leftS_5_0, 
	        		"LeftSquareBracketKeyword", 
	        		currentNode);
	        } catch (ValueConverterException vce) {
				handleValueConverterException(vce);
	        }
	        currentNode = currentNode.getParent();
	    }

)
)((
(
		{ 
	        currentNode=createCompositeNode(grammarAccess.getFunDeclAccess().getDeclDeclParserRuleCall_4_0_1_0_0(), currentNode); 
	    }
		lv_decl_6_0=ruleDecl		{
	        if ($current==null) {
	            $current = factory.create(grammarAccess.getFunDeclRule().getType().getClassifier());
	            associateNodeWithAstElement(currentNode.getParent(), $current);
	        }
	        try {
	       		add(
	       			$current, 
	       			"decl",
	        		lv_decl_6_0, 
	        		"Decl", 
	        		currentNode);
	        } catch (ValueConverterException vce) {
				handleValueConverterException(vce);
	        }
	        currentNode = currentNode.getParent();
	    }

)
)((
(
		{ 
	        currentNode=createCompositeNode(grammarAccess.getFunDeclAccess().getCommaCommaParserRuleCall_4_0_1_1_0_0(), currentNode); 
	    }
		lv_comma_7_0=ruleComma		{
	        if ($current==null) {
	            $current = factory.create(grammarAccess.getFunDeclRule().getType().getClassifier());
	            associateNodeWithAstElement(currentNode.getParent(), $current);
	        }
	        try {
	       		add(
	       			$current, 
	       			"comma",
	        		lv_comma_7_0, 
	        		"Comma", 
	        		currentNode);
	        } catch (ValueConverterException vce) {
				handleValueConverterException(vce);
	        }
	        currentNode = currentNode.getParent();
	    }

)
)(
(
		{ 
	        currentNode=createCompositeNode(grammarAccess.getFunDeclAccess().getDeclDeclParserRuleCall_4_0_1_1_1_0(), currentNode); 
	    }
		lv_decl_8_0=ruleDecl		{
	        if ($current==null) {
	            $current = factory.create(grammarAccess.getFunDeclRule().getType().getClassifier());
	            associateNodeWithAstElement(currentNode.getParent(), $current);
	        }
	        try {
	       		add(
	       			$current, 
	       			"decl",
	        		lv_decl_8_0, 
	        		"Decl", 
	        		currentNode);
	        } catch (ValueConverterException vce) {
				handleValueConverterException(vce);
	        }
	        currentNode = currentNode.getParent();
	    }

)
))*)?(
(
		{ 
	        currentNode=createCompositeNode(grammarAccess.getFunDeclAccess().getRightSRightSquareBracketKeywordParserRuleCall_4_0_2_0(), currentNode); 
	    }
		lv_rightS_9_0=ruleRightSquareBracketKeyword		{
	        if ($current==null) {
	            $current = factory.create(grammarAccess.getFunDeclRule().getType().getClassifier());
	            associateNodeWithAstElement(currentNode.getParent(), $current);
	        }
	        try {
	       		set(
	       			$current, 
	       			"rightS",
	        		lv_rightS_9_0, 
	        		"RightSquareBracketKeyword", 
	        		currentNode);
	        } catch (ValueConverterException vce) {
				handleValueConverterException(vce);
	        }
	        currentNode = currentNode.getParent();
	    }

)
))
    |((
(
		{ 
	        currentNode=createCompositeNode(grammarAccess.getFunDeclAccess().getLeftPLeftParenthesisParserRuleCall_4_1_0_0(), currentNode); 
	    }
		lv_leftP_10_0=ruleLeftParenthesis		{
	        if ($current==null) {
	            $current = factory.create(grammarAccess.getFunDeclRule().getType().getClassifier());
	            associateNodeWithAstElement(currentNode.getParent(), $current);
	        }
	        try {
	       		set(
	       			$current, 
	       			"leftP",
	        		lv_leftP_10_0, 
	        		"LeftParenthesis", 
	        		currentNode);
	        } catch (ValueConverterException vce) {
				handleValueConverterException(vce);
	        }
	        currentNode = currentNode.getParent();
	    }

)
)((
(
		{ 
	        currentNode=createCompositeNode(grammarAccess.getFunDeclAccess().getDeclDeclParserRuleCall_4_1_1_0_0(), currentNode); 
	    }
		lv_decl_11_0=ruleDecl		{
	        if ($current==null) {
	            $current = factory.create(grammarAccess.getFunDeclRule().getType().getClassifier());
	            associateNodeWithAstElement(currentNode.getParent(), $current);
	        }
	        try {
	       		add(
	       			$current, 
	       			"decl",
	        		lv_decl_11_0, 
	        		"Decl", 
	        		currentNode);
	        } catch (ValueConverterException vce) {
				handleValueConverterException(vce);
	        }
	        currentNode = currentNode.getParent();
	    }

)
)((
(
		{ 
	        currentNode=createCompositeNode(grammarAccess.getFunDeclAccess().getCommaCommaParserRuleCall_4_1_1_1_0_0(), currentNode); 
	    }
		lv_comma_12_0=ruleComma		{
	        if ($current==null) {
	            $current = factory.create(grammarAccess.getFunDeclRule().getType().getClassifier());
	            associateNodeWithAstElement(currentNode.getParent(), $current);
	        }
	        try {
	       		add(
	       			$current, 
	       			"comma",
	        		lv_comma_12_0, 
	        		"Comma", 
	        		currentNode);
	        } catch (ValueConverterException vce) {
				handleValueConverterException(vce);
	        }
	        currentNode = currentNode.getParent();
	    }

)
)(
(
		{ 
	        currentNode=createCompositeNode(grammarAccess.getFunDeclAccess().getDeclDeclParserRuleCall_4_1_1_1_1_0(), currentNode); 
	    }
		lv_decl_13_0=ruleDecl		{
	        if ($current==null) {
	            $current = factory.create(grammarAccess.getFunDeclRule().getType().getClassifier());
	            associateNodeWithAstElement(currentNode.getParent(), $current);
	        }
	        try {
	       		add(
	       			$current, 
	       			"decl",
	        		lv_decl_13_0, 
	        		"Decl", 
	        		currentNode);
	        } catch (ValueConverterException vce) {
				handleValueConverterException(vce);
	        }
	        currentNode = currentNode.getParent();
	    }

)
))*)?(
(
		{ 
	        currentNode=createCompositeNode(grammarAccess.getFunDeclAccess().getRightPRightParenthesisParserRuleCall_4_1_2_0(), currentNode); 
	    }
		lv_rightP_14_0=ruleRightParenthesis		{
	        if ($current==null) {
	            $current = factory.create(grammarAccess.getFunDeclRule().getType().getClassifier());
	            associateNodeWithAstElement(currentNode.getParent(), $current);
	        }
	        try {
	       		set(
	       			$current, 
	       			"rightP",
	        		lv_rightP_14_0, 
	        		"RightParenthesis", 
	        		currentNode);
	        } catch (ValueConverterException vce) {
				handleValueConverterException(vce);
	        }
	        currentNode = currentNode.getParent();
	    }

)
)))(
(
		{ 
	        currentNode=createCompositeNode(grammarAccess.getFunDeclAccess().getColonColonParserRuleCall_5_0(), currentNode); 
	    }
		lv_colon_15_0=ruleColon		{
	        if ($current==null) {
	            $current = factory.create(grammarAccess.getFunDeclRule().getType().getClassifier());
	            associateNodeWithAstElement(currentNode.getParent(), $current);
	        }
	        try {
	       		set(
	       			$current, 
	       			"colon",
	        		lv_colon_15_0, 
	        		"Colon", 
	        		currentNode);
	        } catch (ValueConverterException vce) {
				handleValueConverterException(vce);
	        }
	        currentNode = currentNode.getParent();
	    }

)
)(
(
		{ 
	        currentNode=createCompositeNode(grammarAccess.getFunDeclAccess().getExprExpressionParserRuleCall_6_0(), currentNode); 
	    }
		lv_expr_16_0=ruleExpression		{
	        if ($current==null) {
	            $current = factory.create(grammarAccess.getFunDeclRule().getType().getClassifier());
	            associateNodeWithAstElement(currentNode.getParent(), $current);
	        }
	        try {
	       		set(
	       			$current, 
	       			"expr",
	        		lv_expr_16_0, 
	        		"Expression", 
	        		currentNode);
	        } catch (ValueConverterException vce) {
				handleValueConverterException(vce);
	        }
	        currentNode = currentNode.getParent();
	    }

)
)(
(
		{ 
	        currentNode=createCompositeNode(grammarAccess.getFunDeclAccess().getBlockBlockParserRuleCall_7_0(), currentNode); 
	    }
		lv_block_17_0=ruleBlock		{
	        if ($current==null) {
	            $current = factory.create(grammarAccess.getFunDeclRule().getType().getClassifier());
	            associateNodeWithAstElement(currentNode.getParent(), $current);
	        }
	        try {
	       		set(
	       			$current, 
	       			"block",
	        		lv_block_17_0, 
	        		"Block", 
	        		currentNode);
	        } catch (ValueConverterException vce) {
				handleValueConverterException(vce);
	        }
	        currentNode = currentNode.getParent();
	    }

)
))
;





// Entry rule entryRuleFunDeclWParam
entryRuleFunDeclWParam returns [EObject current=null] 
	:
	{ currentNode = createCompositeNode(grammarAccess.getFunDeclWParamRule(), currentNode); }
	 iv_ruleFunDeclWParam=ruleFunDeclWParam 
	 { $current=$iv_ruleFunDeclWParam.current; } 
	 EOF 
;

// Rule FunDeclWParam
ruleFunDeclWParam returns [EObject current=null] 
    @init { EObject temp=null; setCurrentLookahead(); resetLookahead(); 
    }
    @after { resetLookahead(); 
    	lastConsumedNode = currentNode;
    }:
((	'private' 
    {
        createLeafNode(grammarAccess.getFunDeclWParamAccess().getPrivateKeyword_0(), null); 
    }
)?	'fun' 
    {
        createLeafNode(grammarAccess.getFunDeclWParamAccess().getFunKeyword_1(), null); 
    }
((
(
		{ 
	        currentNode=createCompositeNode(grammarAccess.getFunDeclWParamAccess().getRefRefParserRuleCall_2_0_0(), currentNode); 
	    }
		lv_ref_2_0=ruleRef		{
	        if ($current==null) {
	            $current = factory.create(grammarAccess.getFunDeclWParamRule().getType().getClassifier());
	            associateNodeWithAstElement(currentNode.getParent(), $current);
	        }
	        try {
	       		set(
	       			$current, 
	       			"ref",
	        		lv_ref_2_0, 
	        		"Ref", 
	        		currentNode);
	        } catch (ValueConverterException vce) {
				handleValueConverterException(vce);
	        }
	        currentNode = currentNode.getParent();
	    }

)
)(
(
		{ 
	        currentNode=createCompositeNode(grammarAccess.getFunDeclWParamAccess().getDotDotParserRuleCall_2_1_0(), currentNode); 
	    }
		lv_dot_3_0=ruleDot		{
	        if ($current==null) {
	            $current = factory.create(grammarAccess.getFunDeclWParamRule().getType().getClassifier());
	            associateNodeWithAstElement(currentNode.getParent(), $current);
	        }
	        try {
	       		set(
	       			$current, 
	       			"dot",
	        		lv_dot_3_0, 
	        		"Dot", 
	        		currentNode);
	        } catch (ValueConverterException vce) {
				handleValueConverterException(vce);
	        }
	        currentNode = currentNode.getParent();
	    }

)
))?(
(
		{ 
	        currentNode=createCompositeNode(grammarAccess.getFunDeclWParamAccess().getFunctionNamewParamFunctionNamewParamParserRuleCall_3_0(), currentNode); 
	    }
		lv_functionNamewParam_4_0=ruleFunctionNamewParam		{
	        if ($current==null) {
	            $current = factory.create(grammarAccess.getFunDeclWParamRule().getType().getClassifier());
	            associateNodeWithAstElement(currentNode.getParent(), $current);
	        }
	        try {
	       		set(
	       			$current, 
	       			"functionNamewParam",
	        		lv_functionNamewParam_4_0, 
	        		"FunctionNamewParam", 
	        		currentNode);
	        } catch (ValueConverterException vce) {
				handleValueConverterException(vce);
	        }
	        currentNode = currentNode.getParent();
	    }

)
)(
(
		{ 
	        currentNode=createCompositeNode(grammarAccess.getFunDeclWParamAccess().getColonColonParserRuleCall_4_0(), currentNode); 
	    }
		lv_colon_5_0=ruleColon		{
	        if ($current==null) {
	            $current = factory.create(grammarAccess.getFunDeclWParamRule().getType().getClassifier());
	            associateNodeWithAstElement(currentNode.getParent(), $current);
	        }
	        try {
	       		set(
	       			$current, 
	       			"colon",
	        		lv_colon_5_0, 
	        		"Colon", 
	        		currentNode);
	        } catch (ValueConverterException vce) {
				handleValueConverterException(vce);
	        }
	        currentNode = currentNode.getParent();
	    }

)
)(
(
		{ 
	        currentNode=createCompositeNode(grammarAccess.getFunDeclWParamAccess().getExprExpressionParserRuleCall_5_0(), currentNode); 
	    }
		lv_expr_6_0=ruleExpression		{
	        if ($current==null) {
	            $current = factory.create(grammarAccess.getFunDeclWParamRule().getType().getClassifier());
	            associateNodeWithAstElement(currentNode.getParent(), $current);
	        }
	        try {
	       		set(
	       			$current, 
	       			"expr",
	        		lv_expr_6_0, 
	        		"Expression", 
	        		currentNode);
	        } catch (ValueConverterException vce) {
				handleValueConverterException(vce);
	        }
	        currentNode = currentNode.getParent();
	    }

)
)(
(
		{ 
	        currentNode=createCompositeNode(grammarAccess.getFunDeclWParamAccess().getBlockBlockParserRuleCall_6_0(), currentNode); 
	    }
		lv_block_7_0=ruleBlock		{
	        if ($current==null) {
	            $current = factory.create(grammarAccess.getFunDeclWParamRule().getType().getClassifier());
	            associateNodeWithAstElement(currentNode.getParent(), $current);
	        }
	        try {
	       		set(
	       			$current, 
	       			"block",
	        		lv_block_7_0, 
	        		"Block", 
	        		currentNode);
	        } catch (ValueConverterException vce) {
				handleValueConverterException(vce);
	        }
	        currentNode = currentNode.getParent();
	    }

)
))
;





// Entry rule entryRulePredDecl
entryRulePredDecl returns [EObject current=null] 
	:
	{ currentNode = createCompositeNode(grammarAccess.getPredDeclRule(), currentNode); }
	 iv_rulePredDecl=rulePredDecl 
	 { $current=$iv_rulePredDecl.current; } 
	 EOF 
;

// Rule PredDecl
rulePredDecl returns [EObject current=null] 
    @init { EObject temp=null; setCurrentLookahead(); resetLookahead(); 
    }
    @after { resetLookahead(); 
    	lastConsumedNode = currentNode;
    }:
((	'private' 
    {
        createLeafNode(grammarAccess.getPredDeclAccess().getPrivateKeyword_0(), null); 
    }
)?	'pred' 
    {
        createLeafNode(grammarAccess.getPredDeclAccess().getPredKeyword_1(), null); 
    }
((
(
		{ 
	        currentNode=createCompositeNode(grammarAccess.getPredDeclAccess().getRefRefParserRuleCall_2_0_0(), currentNode); 
	    }
		lv_ref_2_0=ruleRef		{
	        if ($current==null) {
	            $current = factory.create(grammarAccess.getPredDeclRule().getType().getClassifier());
	            associateNodeWithAstElement(currentNode.getParent(), $current);
	        }
	        try {
	       		set(
	       			$current, 
	       			"ref",
	        		lv_ref_2_0, 
	        		"Ref", 
	        		currentNode);
	        } catch (ValueConverterException vce) {
				handleValueConverterException(vce);
	        }
	        currentNode = currentNode.getParent();
	    }

)
)(
(
		{ 
	        currentNode=createCompositeNode(grammarAccess.getPredDeclAccess().getDotDotParserRuleCall_2_1_0(), currentNode); 
	    }
		lv_dot_3_0=ruleDot		{
	        if ($current==null) {
	            $current = factory.create(grammarAccess.getPredDeclRule().getType().getClassifier());
	            associateNodeWithAstElement(currentNode.getParent(), $current);
	        }
	        try {
	       		set(
	       			$current, 
	       			"dot",
	        		lv_dot_3_0, 
	        		"Dot", 
	        		currentNode);
	        } catch (ValueConverterException vce) {
				handleValueConverterException(vce);
	        }
	        currentNode = currentNode.getParent();
	    }

)
))?(
(
		{ 
	        currentNode=createCompositeNode(grammarAccess.getPredDeclAccess().getPredicateNamePredicateNameParserRuleCall_3_0(), currentNode); 
	    }
		lv_predicateName_4_0=rulePredicateName		{
	        if ($current==null) {
	            $current = factory.create(grammarAccess.getPredDeclRule().getType().getClassifier());
	            associateNodeWithAstElement(currentNode.getParent(), $current);
	        }
	        try {
	       		set(
	       			$current, 
	       			"predicateName",
	        		lv_predicateName_4_0, 
	        		"PredicateName", 
	        		currentNode);
	        } catch (ValueConverterException vce) {
				handleValueConverterException(vce);
	        }
	        currentNode = currentNode.getParent();
	    }

)
)(((
(
		{ 
	        currentNode=createCompositeNode(grammarAccess.getPredDeclAccess().getLeftSLeftSquareBracketKeywordParserRuleCall_4_0_0_0(), currentNode); 
	    }
		lv_leftS_5_0=ruleLeftSquareBracketKeyword		{
	        if ($current==null) {
	            $current = factory.create(grammarAccess.getPredDeclRule().getType().getClassifier());
	            associateNodeWithAstElement(currentNode.getParent(), $current);
	        }
	        try {
	       		set(
	       			$current, 
	       			"leftS",
	        		lv_leftS_5_0, 
	        		"LeftSquareBracketKeyword", 
	        		currentNode);
	        } catch (ValueConverterException vce) {
				handleValueConverterException(vce);
	        }
	        currentNode = currentNode.getParent();
	    }

)
)((
(
		{ 
	        currentNode=createCompositeNode(grammarAccess.getPredDeclAccess().getDeclDeclParserRuleCall_4_0_1_0_0(), currentNode); 
	    }
		lv_decl_6_0=ruleDecl		{
	        if ($current==null) {
	            $current = factory.create(grammarAccess.getPredDeclRule().getType().getClassifier());
	            associateNodeWithAstElement(currentNode.getParent(), $current);
	        }
	        try {
	       		add(
	       			$current, 
	       			"decl",
	        		lv_decl_6_0, 
	        		"Decl", 
	        		currentNode);
	        } catch (ValueConverterException vce) {
				handleValueConverterException(vce);
	        }
	        currentNode = currentNode.getParent();
	    }

)
)((
(
		{ 
	        currentNode=createCompositeNode(grammarAccess.getPredDeclAccess().getCommaCommaParserRuleCall_4_0_1_1_0_0(), currentNode); 
	    }
		lv_comma_7_0=ruleComma		{
	        if ($current==null) {
	            $current = factory.create(grammarAccess.getPredDeclRule().getType().getClassifier());
	            associateNodeWithAstElement(currentNode.getParent(), $current);
	        }
	        try {
	       		add(
	       			$current, 
	       			"comma",
	        		lv_comma_7_0, 
	        		"Comma", 
	        		currentNode);
	        } catch (ValueConverterException vce) {
				handleValueConverterException(vce);
	        }
	        currentNode = currentNode.getParent();
	    }

)
)(
(
		{ 
	        currentNode=createCompositeNode(grammarAccess.getPredDeclAccess().getDeclDeclParserRuleCall_4_0_1_1_1_0(), currentNode); 
	    }
		lv_decl_8_0=ruleDecl		{
	        if ($current==null) {
	            $current = factory.create(grammarAccess.getPredDeclRule().getType().getClassifier());
	            associateNodeWithAstElement(currentNode.getParent(), $current);
	        }
	        try {
	       		add(
	       			$current, 
	       			"decl",
	        		lv_decl_8_0, 
	        		"Decl", 
	        		currentNode);
	        } catch (ValueConverterException vce) {
				handleValueConverterException(vce);
	        }
	        currentNode = currentNode.getParent();
	    }

)
))*)?(
(
		{ 
	        currentNode=createCompositeNode(grammarAccess.getPredDeclAccess().getRightSRightSquareBracketKeywordParserRuleCall_4_0_2_0(), currentNode); 
	    }
		lv_rightS_9_0=ruleRightSquareBracketKeyword		{
	        if ($current==null) {
	            $current = factory.create(grammarAccess.getPredDeclRule().getType().getClassifier());
	            associateNodeWithAstElement(currentNode.getParent(), $current);
	        }
	        try {
	       		set(
	       			$current, 
	       			"rightS",
	        		lv_rightS_9_0, 
	        		"RightSquareBracketKeyword", 
	        		currentNode);
	        } catch (ValueConverterException vce) {
				handleValueConverterException(vce);
	        }
	        currentNode = currentNode.getParent();
	    }

)
))
    |((
(
		{ 
	        currentNode=createCompositeNode(grammarAccess.getPredDeclAccess().getLeftPLeftParenthesisParserRuleCall_4_1_0_0(), currentNode); 
	    }
		lv_leftP_10_0=ruleLeftParenthesis		{
	        if ($current==null) {
	            $current = factory.create(grammarAccess.getPredDeclRule().getType().getClassifier());
	            associateNodeWithAstElement(currentNode.getParent(), $current);
	        }
	        try {
	       		set(
	       			$current, 
	       			"leftP",
	        		lv_leftP_10_0, 
	        		"LeftParenthesis", 
	        		currentNode);
	        } catch (ValueConverterException vce) {
				handleValueConverterException(vce);
	        }
	        currentNode = currentNode.getParent();
	    }

)
)((
(
		{ 
	        currentNode=createCompositeNode(grammarAccess.getPredDeclAccess().getDeclDeclParserRuleCall_4_1_1_0_0(), currentNode); 
	    }
		lv_decl_11_0=ruleDecl		{
	        if ($current==null) {
	            $current = factory.create(grammarAccess.getPredDeclRule().getType().getClassifier());
	            associateNodeWithAstElement(currentNode.getParent(), $current);
	        }
	        try {
	       		add(
	       			$current, 
	       			"decl",
	        		lv_decl_11_0, 
	        		"Decl", 
	        		currentNode);
	        } catch (ValueConverterException vce) {
				handleValueConverterException(vce);
	        }
	        currentNode = currentNode.getParent();
	    }

)
)((
(
		{ 
	        currentNode=createCompositeNode(grammarAccess.getPredDeclAccess().getCommaCommaParserRuleCall_4_1_1_1_0_0(), currentNode); 
	    }
		lv_comma_12_0=ruleComma		{
	        if ($current==null) {
	            $current = factory.create(grammarAccess.getPredDeclRule().getType().getClassifier());
	            associateNodeWithAstElement(currentNode.getParent(), $current);
	        }
	        try {
	       		add(
	       			$current, 
	       			"comma",
	        		lv_comma_12_0, 
	        		"Comma", 
	        		currentNode);
	        } catch (ValueConverterException vce) {
				handleValueConverterException(vce);
	        }
	        currentNode = currentNode.getParent();
	    }

)
)(
(
		{ 
	        currentNode=createCompositeNode(grammarAccess.getPredDeclAccess().getDeclDeclParserRuleCall_4_1_1_1_1_0(), currentNode); 
	    }
		lv_decl_13_0=ruleDecl		{
	        if ($current==null) {
	            $current = factory.create(grammarAccess.getPredDeclRule().getType().getClassifier());
	            associateNodeWithAstElement(currentNode.getParent(), $current);
	        }
	        try {
	       		add(
	       			$current, 
	       			"decl",
	        		lv_decl_13_0, 
	        		"Decl", 
	        		currentNode);
	        } catch (ValueConverterException vce) {
				handleValueConverterException(vce);
	        }
	        currentNode = currentNode.getParent();
	    }

)
))*)?(
(
		{ 
	        currentNode=createCompositeNode(grammarAccess.getPredDeclAccess().getRightPRightParenthesisParserRuleCall_4_1_2_0(), currentNode); 
	    }
		lv_rightP_14_0=ruleRightParenthesis		{
	        if ($current==null) {
	            $current = factory.create(grammarAccess.getPredDeclRule().getType().getClassifier());
	            associateNodeWithAstElement(currentNode.getParent(), $current);
	        }
	        try {
	       		set(
	       			$current, 
	       			"rightP",
	        		lv_rightP_14_0, 
	        		"RightParenthesis", 
	        		currentNode);
	        } catch (ValueConverterException vce) {
				handleValueConverterException(vce);
	        }
	        currentNode = currentNode.getParent();
	    }

)
)))?(
(
		{ 
	        currentNode=createCompositeNode(grammarAccess.getPredDeclAccess().getBlockBlockParserRuleCall_5_0(), currentNode); 
	    }
		lv_block_15_0=ruleBlock		{
	        if ($current==null) {
	            $current = factory.create(grammarAccess.getPredDeclRule().getType().getClassifier());
	            associateNodeWithAstElement(currentNode.getParent(), $current);
	        }
	        try {
	       		set(
	       			$current, 
	       			"block",
	        		lv_block_15_0, 
	        		"Block", 
	        		currentNode);
	        } catch (ValueConverterException vce) {
				handleValueConverterException(vce);
	        }
	        currentNode = currentNode.getParent();
	    }

)
))
;





// Entry rule entryRuleRunDecl
entryRuleRunDecl returns [EObject current=null] 
	:
	{ currentNode = createCompositeNode(grammarAccess.getRunDeclRule(), currentNode); }
	 iv_ruleRunDecl=ruleRunDecl 
	 { $current=$iv_ruleRunDecl.current; } 
	 EOF 
;

// Rule RunDecl
ruleRunDecl returns [EObject current=null] 
    @init { EObject temp=null; setCurrentLookahead(); resetLookahead(); 
    }
    @after { resetLookahead(); 
    	lastConsumedNode = currentNode;
    }:
(((
(
		{ 
	        currentNode=createCompositeNode(grammarAccess.getRunDeclAccess().getRunNameAliasParserRuleCall_0_0_0(), currentNode); 
	    }
		lv_runName_0_0=ruleAlias		{
	        if ($current==null) {
	            $current = factory.create(grammarAccess.getRunDeclRule().getType().getClassifier());
	            associateNodeWithAstElement(currentNode.getParent(), $current);
	        }
	        try {
	       		set(
	       			$current, 
	       			"runName",
	        		lv_runName_0_0, 
	        		"Alias", 
	        		currentNode);
	        } catch (ValueConverterException vce) {
				handleValueConverterException(vce);
	        }
	        currentNode = currentNode.getParent();
	    }

)
)	':' 
    {
        createLeafNode(grammarAccess.getRunDeclAccess().getColonKeyword_0_1(), null); 
    }
)?	'run' 
    {
        createLeafNode(grammarAccess.getRunDeclAccess().getRunKeyword_1(), null); 
    }
((
(
		{ 
	        currentNode=createCompositeNode(grammarAccess.getRunDeclAccess().getName2FunctionNamewParamParserRuleCall_2_0_0(), currentNode); 
	    }
		lv_name2_3_0=ruleFunctionNamewParam		{
	        if ($current==null) {
	            $current = factory.create(grammarAccess.getRunDeclRule().getType().getClassifier());
	            associateNodeWithAstElement(currentNode.getParent(), $current);
	        }
	        try {
	       		set(
	       			$current, 
	       			"name2",
	        		lv_name2_3_0, 
	        		"FunctionNamewParam", 
	        		currentNode);
	        } catch (ValueConverterException vce) {
				handleValueConverterException(vce);
	        }
	        currentNode = currentNode.getParent();
	    }

)
)
    |(
(
		{ 
	        currentNode=createCompositeNode(grammarAccess.getRunDeclAccess().getName2FunctionNameParserRuleCall_2_1_0(), currentNode); 
	    }
		lv_name2_4_0=ruleFunctionName		{
	        if ($current==null) {
	            $current = factory.create(grammarAccess.getRunDeclRule().getType().getClassifier());
	            associateNodeWithAstElement(currentNode.getParent(), $current);
	        }
	        try {
	       		set(
	       			$current, 
	       			"name2",
	        		lv_name2_4_0, 
	        		"FunctionName", 
	        		currentNode);
	        } catch (ValueConverterException vce) {
				handleValueConverterException(vce);
	        }
	        currentNode = currentNode.getParent();
	    }

)
)
    |(
(
		{ 
	        currentNode=createCompositeNode(grammarAccess.getRunDeclAccess().getName2PredicateNameParserRuleCall_2_2_0(), currentNode); 
	    }
		lv_name2_5_0=rulePredicateName		{
	        if ($current==null) {
	            $current = factory.create(grammarAccess.getRunDeclRule().getType().getClassifier());
	            associateNodeWithAstElement(currentNode.getParent(), $current);
	        }
	        try {
	       		set(
	       			$current, 
	       			"name2",
	        		lv_name2_5_0, 
	        		"PredicateName", 
	        		currentNode);
	        } catch (ValueConverterException vce) {
				handleValueConverterException(vce);
	        }
	        currentNode = currentNode.getParent();
	    }

)
)
    |(
(
		{ 
	        currentNode=createCompositeNode(grammarAccess.getRunDeclAccess().getBlockBlockParserRuleCall_2_3_0(), currentNode); 
	    }
		lv_block_6_0=ruleBlock		{
	        if ($current==null) {
	            $current = factory.create(grammarAccess.getRunDeclRule().getType().getClassifier());
	            associateNodeWithAstElement(currentNode.getParent(), $current);
	        }
	        try {
	       		set(
	       			$current, 
	       			"block",
	        		lv_block_6_0, 
	        		"Block", 
	        		currentNode);
	        } catch (ValueConverterException vce) {
				handleValueConverterException(vce);
	        }
	        currentNode = currentNode.getParent();
	    }

)
))(
(
		{ 
	        currentNode=createCompositeNode(grammarAccess.getRunDeclAccess().getScopeScopeParserRuleCall_3_0(), currentNode); 
	    }
		lv_scope_7_0=ruleScope		{
	        if ($current==null) {
	            $current = factory.create(grammarAccess.getRunDeclRule().getType().getClassifier());
	            associateNodeWithAstElement(currentNode.getParent(), $current);
	        }
	        try {
	       		set(
	       			$current, 
	       			"scope",
	        		lv_scope_7_0, 
	        		"Scope", 
	        		currentNode);
	        } catch (ValueConverterException vce) {
				handleValueConverterException(vce);
	        }
	        currentNode = currentNode.getParent();
	    }

)
))
;





// Entry rule entryRuleCheckDecl
entryRuleCheckDecl returns [EObject current=null] 
	:
	{ currentNode = createCompositeNode(grammarAccess.getCheckDeclRule(), currentNode); }
	 iv_ruleCheckDecl=ruleCheckDecl 
	 { $current=$iv_ruleCheckDecl.current; } 
	 EOF 
;

// Rule CheckDecl
ruleCheckDecl returns [EObject current=null] 
    @init { EObject temp=null; setCurrentLookahead(); resetLookahead(); 
    }
    @after { resetLookahead(); 
    	lastConsumedNode = currentNode;
    }:
(((
(
		{ 
	        currentNode=createCompositeNode(grammarAccess.getCheckDeclAccess().getCheckNameAliasParserRuleCall_0_0_0(), currentNode); 
	    }
		lv_checkName_0_0=ruleAlias		{
	        if ($current==null) {
	            $current = factory.create(grammarAccess.getCheckDeclRule().getType().getClassifier());
	            associateNodeWithAstElement(currentNode.getParent(), $current);
	        }
	        try {
	       		set(
	       			$current, 
	       			"checkName",
	        		lv_checkName_0_0, 
	        		"Alias", 
	        		currentNode);
	        } catch (ValueConverterException vce) {
				handleValueConverterException(vce);
	        }
	        currentNode = currentNode.getParent();
	    }

)
)	':' 
    {
        createLeafNode(grammarAccess.getCheckDeclAccess().getColonKeyword_0_1(), null); 
    }
)?	'check' 
    {
        createLeafNode(grammarAccess.getCheckDeclAccess().getCheckKeyword_1(), null); 
    }
((
(
		{ 
		  /* */ 
		}
		{
			if ($current==null) {
	            $current = factory.create(grammarAccess.getCheckDeclRule().getType().getClassifier());
	            associateNodeWithAstElement(currentNode, $current);
	        }
        }
	RULE_ID
	{
		createLeafNode(grammarAccess.getCheckDeclAccess().getNameAssertionNameCrossReference_2_0_0(), "name"); 
	}

)
)
    |(
(
		{ 
	        currentNode=createCompositeNode(grammarAccess.getCheckDeclAccess().getBlockBlockParserRuleCall_2_1_0(), currentNode); 
	    }
		lv_block_4_0=ruleBlock		{
	        if ($current==null) {
	            $current = factory.create(grammarAccess.getCheckDeclRule().getType().getClassifier());
	            associateNodeWithAstElement(currentNode.getParent(), $current);
	        }
	        try {
	       		set(
	       			$current, 
	       			"block",
	        		lv_block_4_0, 
	        		"Block", 
	        		currentNode);
	        } catch (ValueConverterException vce) {
				handleValueConverterException(vce);
	        }
	        currentNode = currentNode.getParent();
	    }

)
))(
(
		{ 
	        currentNode=createCompositeNode(grammarAccess.getCheckDeclAccess().getScopeScopeParserRuleCall_3_0(), currentNode); 
	    }
		lv_scope_5_0=ruleScope		{
	        if ($current==null) {
	            $current = factory.create(grammarAccess.getCheckDeclRule().getType().getClassifier());
	            associateNodeWithAstElement(currentNode.getParent(), $current);
	        }
	        try {
	       		set(
	       			$current, 
	       			"scope",
	        		lv_scope_5_0, 
	        		"Scope", 
	        		currentNode);
	        } catch (ValueConverterException vce) {
				handleValueConverterException(vce);
	        }
	        currentNode = currentNode.getParent();
	    }

)
))
;





// Entry rule entryRuleScope
entryRuleScope returns [EObject current=null] 
	:
	{ currentNode = createCompositeNode(grammarAccess.getScopeRule(), currentNode); }
	 iv_ruleScope=ruleScope 
	 { $current=$iv_ruleScope.current; } 
	 EOF 
;

// Rule Scope
ruleScope returns [EObject current=null] 
    @init { EObject temp=null; setCurrentLookahead(); resetLookahead(); 
    }
    @after { resetLookahead(); 
    	lastConsumedNode = currentNode;
    }:
(((
	{ 
	  /* */ 
	}
    { 
        temp=factory.create(grammarAccess.getScopeAccess().getScopeAction_0_0().getType().getClassifier());
        $current = temp; 
        temp = null;
        CompositeNode newNode = createCompositeNode(grammarAccess.getScopeAccess().getScopeAction_0_0(), currentNode.getParent());
    newNode.getChildren().add(currentNode);
    moveLookaheadInfo(currentNode, newNode);
    currentNode = newNode; 
        associateNodeWithAstElement(currentNode, $current); 
    }
)	'for' 
    {
        createLeafNode(grammarAccess.getScopeAccess().getForKeyword_0_1(), null); 
    }
RULE_INT
    { 
    createLeafNode(grammarAccess.getScopeAccess().getINTTerminalRuleCall_0_2(), null); 
    }
(
(
		{ 
	        currentNode=createCompositeNode(grammarAccess.getScopeAccess().getExpectExpectationParserRuleCall_0_3_0(), currentNode); 
	    }
		lv_expect_3_0=ruleExpectation		{
	        if ($current==null) {
	            $current = factory.create(grammarAccess.getScopeRule().getType().getClassifier());
	            associateNodeWithAstElement(currentNode.getParent(), $current);
	        }
	        try {
	       		set(
	       			$current, 
	       			"expect",
	        		lv_expect_3_0, 
	        		"Expectation", 
	        		currentNode);
	        } catch (ValueConverterException vce) {
				handleValueConverterException(vce);
	        }
	        currentNode = currentNode.getParent();
	    }

)
)?)
    |((
	{ 
	  /* */ 
	}
    { 
        temp=factory.create(grammarAccess.getScopeAccess().getScopeAction_1_0().getType().getClassifier());
        $current = temp; 
        temp = null;
        CompositeNode newNode = createCompositeNode(grammarAccess.getScopeAccess().getScopeAction_1_0(), currentNode.getParent());
    newNode.getChildren().add(currentNode);
    moveLookaheadInfo(currentNode, newNode);
    currentNode = newNode; 
        associateNodeWithAstElement(currentNode, $current); 
    }
)	'for' 
    {
        createLeafNode(grammarAccess.getScopeAccess().getForKeyword_1_1(), null); 
    }
RULE_INT
    { 
    createLeafNode(grammarAccess.getScopeAccess().getINTTerminalRuleCall_1_2(), null); 
    }
	'but' 
    {
        createLeafNode(grammarAccess.getScopeAccess().getButKeyword_1_3(), null); 
    }
(
(
		{ 
	        currentNode=createCompositeNode(grammarAccess.getScopeAccess().getTypescopeTypescopeParserRuleCall_1_4_0(), currentNode); 
	    }
		lv_typescope_8_0=ruleTypescope		{
	        if ($current==null) {
	            $current = factory.create(grammarAccess.getScopeRule().getType().getClassifier());
	            associateNodeWithAstElement(currentNode.getParent(), $current);
	        }
	        try {
	       		add(
	       			$current, 
	       			"typescope",
	        		lv_typescope_8_0, 
	        		"Typescope", 
	        		currentNode);
	        } catch (ValueConverterException vce) {
				handleValueConverterException(vce);
	        }
	        currentNode = currentNode.getParent();
	    }

)
)((
(
		{ 
	        currentNode=createCompositeNode(grammarAccess.getScopeAccess().getCommaCommaParserRuleCall_1_5_0_0(), currentNode); 
	    }
		lv_comma_9_0=ruleComma		{
	        if ($current==null) {
	            $current = factory.create(grammarAccess.getScopeRule().getType().getClassifier());
	            associateNodeWithAstElement(currentNode.getParent(), $current);
	        }
	        try {
	       		add(
	       			$current, 
	       			"comma",
	        		lv_comma_9_0, 
	        		"Comma", 
	        		currentNode);
	        } catch (ValueConverterException vce) {
				handleValueConverterException(vce);
	        }
	        currentNode = currentNode.getParent();
	    }

)
)(
(
		{ 
	        currentNode=createCompositeNode(grammarAccess.getScopeAccess().getTypescopeTypescopeParserRuleCall_1_5_1_0(), currentNode); 
	    }
		lv_typescope_10_0=ruleTypescope		{
	        if ($current==null) {
	            $current = factory.create(grammarAccess.getScopeRule().getType().getClassifier());
	            associateNodeWithAstElement(currentNode.getParent(), $current);
	        }
	        try {
	       		add(
	       			$current, 
	       			"typescope",
	        		lv_typescope_10_0, 
	        		"Typescope", 
	        		currentNode);
	        } catch (ValueConverterException vce) {
				handleValueConverterException(vce);
	        }
	        currentNode = currentNode.getParent();
	    }

)
))*(
(
		{ 
	        currentNode=createCompositeNode(grammarAccess.getScopeAccess().getExpectExpectationParserRuleCall_1_6_0(), currentNode); 
	    }
		lv_expect_11_0=ruleExpectation		{
	        if ($current==null) {
	            $current = factory.create(grammarAccess.getScopeRule().getType().getClassifier());
	            associateNodeWithAstElement(currentNode.getParent(), $current);
	        }
	        try {
	       		set(
	       			$current, 
	       			"expect",
	        		lv_expect_11_0, 
	        		"Expectation", 
	        		currentNode);
	        } catch (ValueConverterException vce) {
				handleValueConverterException(vce);
	        }
	        currentNode = currentNode.getParent();
	    }

)
)?)
    |((
	{ 
	  /* */ 
	}
    { 
        temp=factory.create(grammarAccess.getScopeAccess().getScopeAction_2_0().getType().getClassifier());
        $current = temp; 
        temp = null;
        CompositeNode newNode = createCompositeNode(grammarAccess.getScopeAccess().getScopeAction_2_0(), currentNode.getParent());
    newNode.getChildren().add(currentNode);
    moveLookaheadInfo(currentNode, newNode);
    currentNode = newNode; 
        associateNodeWithAstElement(currentNode, $current); 
    }
)	'for' 
    {
        createLeafNode(grammarAccess.getScopeAccess().getForKeyword_2_1(), null); 
    }
(
(
		{ 
	        currentNode=createCompositeNode(grammarAccess.getScopeAccess().getTypescopeTypescopeParserRuleCall_2_2_0(), currentNode); 
	    }
		lv_typescope_14_0=ruleTypescope		{
	        if ($current==null) {
	            $current = factory.create(grammarAccess.getScopeRule().getType().getClassifier());
	            associateNodeWithAstElement(currentNode.getParent(), $current);
	        }
	        try {
	       		add(
	       			$current, 
	       			"typescope",
	        		lv_typescope_14_0, 
	        		"Typescope", 
	        		currentNode);
	        } catch (ValueConverterException vce) {
				handleValueConverterException(vce);
	        }
	        currentNode = currentNode.getParent();
	    }

)
)((
(
		{ 
	        currentNode=createCompositeNode(grammarAccess.getScopeAccess().getCommaCommaParserRuleCall_2_3_0_0(), currentNode); 
	    }
		lv_comma_15_0=ruleComma		{
	        if ($current==null) {
	            $current = factory.create(grammarAccess.getScopeRule().getType().getClassifier());
	            associateNodeWithAstElement(currentNode.getParent(), $current);
	        }
	        try {
	       		add(
	       			$current, 
	       			"comma",
	        		lv_comma_15_0, 
	        		"Comma", 
	        		currentNode);
	        } catch (ValueConverterException vce) {
				handleValueConverterException(vce);
	        }
	        currentNode = currentNode.getParent();
	    }

)
)(
(
		{ 
	        currentNode=createCompositeNode(grammarAccess.getScopeAccess().getTypescopeTypescopeParserRuleCall_2_3_1_0(), currentNode); 
	    }
		lv_typescope_16_0=ruleTypescope		{
	        if ($current==null) {
	            $current = factory.create(grammarAccess.getScopeRule().getType().getClassifier());
	            associateNodeWithAstElement(currentNode.getParent(), $current);
	        }
	        try {
	       		add(
	       			$current, 
	       			"typescope",
	        		lv_typescope_16_0, 
	        		"Typescope", 
	        		currentNode);
	        } catch (ValueConverterException vce) {
				handleValueConverterException(vce);
	        }
	        currentNode = currentNode.getParent();
	    }

)
))*(
(
		{ 
	        currentNode=createCompositeNode(grammarAccess.getScopeAccess().getExpectExpectationParserRuleCall_2_4_0(), currentNode); 
	    }
		lv_expect_17_0=ruleExpectation		{
	        if ($current==null) {
	            $current = factory.create(grammarAccess.getScopeRule().getType().getClassifier());
	            associateNodeWithAstElement(currentNode.getParent(), $current);
	        }
	        try {
	       		set(
	       			$current, 
	       			"expect",
	        		lv_expect_17_0, 
	        		"Expectation", 
	        		currentNode);
	        } catch (ValueConverterException vce) {
				handleValueConverterException(vce);
	        }
	        currentNode = currentNode.getParent();
	    }

)
)?)
    |((
	{ 
	  /* */ 
	}
    { 
        temp=factory.create(grammarAccess.getScopeAccess().getScopeAction_3_0().getType().getClassifier());
        $current = temp; 
        temp = null;
        CompositeNode newNode = createCompositeNode(grammarAccess.getScopeAccess().getScopeAction_3_0(), currentNode.getParent());
    newNode.getChildren().add(currentNode);
    moveLookaheadInfo(currentNode, newNode);
    currentNode = newNode; 
        associateNodeWithAstElement(currentNode, $current); 
    }
)(
(
		{ 
	        currentNode=createCompositeNode(grammarAccess.getScopeAccess().getExpectExpectationParserRuleCall_3_1_0(), currentNode); 
	    }
		lv_expect_19_0=ruleExpectation		{
	        if ($current==null) {
	            $current = factory.create(grammarAccess.getScopeRule().getType().getClassifier());
	            associateNodeWithAstElement(currentNode.getParent(), $current);
	        }
	        try {
	       		set(
	       			$current, 
	       			"expect",
	        		lv_expect_19_0, 
	        		"Expectation", 
	        		currentNode);
	        } catch (ValueConverterException vce) {
				handleValueConverterException(vce);
	        }
	        currentNode = currentNode.getParent();
	    }

)
)?))
;





// Entry rule entryRuleExpectation
entryRuleExpectation returns [EObject current=null] 
	:
	{ currentNode = createCompositeNode(grammarAccess.getExpectationRule(), currentNode); }
	 iv_ruleExpectation=ruleExpectation 
	 { $current=$iv_ruleExpectation.current; } 
	 EOF 
;

// Rule Expectation
ruleExpectation returns [EObject current=null] 
    @init { EObject temp=null; setCurrentLookahead(); resetLookahead(); 
    }
    @after { resetLookahead(); 
    	lastConsumedNode = currentNode;
    }:
(	'expect' 
    {
        createLeafNode(grammarAccess.getExpectationAccess().getExpectKeyword_0(), null); 
    }
(
(
		lv_value_1_0=RULE_INT
		{
			createLeafNode(grammarAccess.getExpectationAccess().getValueINTTerminalRuleCall_1_0(), "value"); 
		}
		{
	        if ($current==null) {
	            $current = factory.create(grammarAccess.getExpectationRule().getType().getClassifier());
	            associateNodeWithAstElement(currentNode, $current);
	        }
	        try {
	       		set(
	       			$current, 
	       			"value",
	        		lv_value_1_0, 
	        		"INT", 
	        		lastConsumedNode);
	        } catch (ValueConverterException vce) {
				handleValueConverterException(vce);
	        }
	    }

)
))
;





// Entry rule entryRuleTypescope
entryRuleTypescope returns [EObject current=null] 
	:
	{ currentNode = createCompositeNode(grammarAccess.getTypescopeRule(), currentNode); }
	 iv_ruleTypescope=ruleTypescope 
	 { $current=$iv_ruleTypescope.current; } 
	 EOF 
;

// Rule Typescope
ruleTypescope returns [EObject current=null] 
    @init { EObject temp=null; setCurrentLookahead(); resetLookahead(); 
    }
    @after { resetLookahead(); 
    	lastConsumedNode = currentNode;
    }:
((
	{ 
	  /* */ 
	}
    { 
        temp=factory.create(grammarAccess.getTypescopeAccess().getTypescopeAction_0().getType().getClassifier());
        $current = temp; 
        temp = null;
        CompositeNode newNode = createCompositeNode(grammarAccess.getTypescopeAccess().getTypescopeAction_0(), currentNode.getParent());
    newNode.getChildren().add(currentNode);
    moveLookaheadInfo(currentNode, newNode);
    currentNode = newNode; 
        associateNodeWithAstElement(currentNode, $current); 
    }
)(	'exactly' 
    {
        createLeafNode(grammarAccess.getTypescopeAccess().getExactlyKeyword_1(), null); 
    }
)?RULE_INT
    { 
    createLeafNode(grammarAccess.getTypescopeAccess().getINTTerminalRuleCall_2(), null); 
    }
((
(
		{ 
		  /* */ 
		}
		{
			if ($current==null) {
	            $current = factory.create(grammarAccess.getTypescopeRule().getType().getClassifier());
	            associateNodeWithAstElement(currentNode, $current);
	        }
        }
	RULE_ID
	{
		createLeafNode(grammarAccess.getTypescopeAccess().getNameReferencesNameCrossReference_3_0_0(), "name"); 
	}

)
)
    |(	'int' 
    {
        createLeafNode(grammarAccess.getTypescopeAccess().getIntKeyword_3_1_0(), null); 
    }

    |	'seq' 
    {
        createLeafNode(grammarAccess.getTypescopeAccess().getSeqKeyword_3_1_1(), null); 
    }
)))
;





// Entry rule entryRuleEnumDecl
entryRuleEnumDecl returns [EObject current=null] 
	:
	{ currentNode = createCompositeNode(grammarAccess.getEnumDeclRule(), currentNode); }
	 iv_ruleEnumDecl=ruleEnumDecl 
	 { $current=$iv_ruleEnumDecl.current; } 
	 EOF 
;

// Rule EnumDecl
ruleEnumDecl returns [EObject current=null] 
    @init { EObject temp=null; setCurrentLookahead(); resetLookahead(); 
    }
    @after { resetLookahead(); 
    	lastConsumedNode = currentNode;
    }:
((
(
		{ 
	        currentNode=createCompositeNode(grammarAccess.getEnumDeclAccess().getEnumNameEnumNameParserRuleCall_0_0(), currentNode); 
	    }
		lv_enumName_0_0=ruleEnumName		{
	        if ($current==null) {
	            $current = factory.create(grammarAccess.getEnumDeclRule().getType().getClassifier());
	            associateNodeWithAstElement(currentNode.getParent(), $current);
	        }
	        try {
	       		set(
	       			$current, 
	       			"enumName",
	        		lv_enumName_0_0, 
	        		"EnumName", 
	        		currentNode);
	        } catch (ValueConverterException vce) {
				handleValueConverterException(vce);
	        }
	        currentNode = currentNode.getParent();
	    }

)
)(
(
		{ 
	        currentNode=createCompositeNode(grammarAccess.getEnumDeclAccess().getLeftCLeftCurlyBracketParserRuleCall_1_0(), currentNode); 
	    }
		lv_leftC_1_0=ruleLeftCurlyBracket		{
	        if ($current==null) {
	            $current = factory.create(grammarAccess.getEnumDeclRule().getType().getClassifier());
	            associateNodeWithAstElement(currentNode.getParent(), $current);
	        }
	        try {
	       		set(
	       			$current, 
	       			"leftC",
	        		lv_leftC_1_0, 
	        		"LeftCurlyBracket", 
	        		currentNode);
	        } catch (ValueConverterException vce) {
				handleValueConverterException(vce);
	        }
	        currentNode = currentNode.getParent();
	    }

)
)(
(
		{ 
	        currentNode=createCompositeNode(grammarAccess.getEnumDeclAccess().getPropertyEnumEnumPropertyNameParserRuleCall_2_0(), currentNode); 
	    }
		lv_propertyEnum_2_0=ruleEnumPropertyName		{
	        if ($current==null) {
	            $current = factory.create(grammarAccess.getEnumDeclRule().getType().getClassifier());
	            associateNodeWithAstElement(currentNode.getParent(), $current);
	        }
	        try {
	       		add(
	       			$current, 
	       			"propertyEnum",
	        		lv_propertyEnum_2_0, 
	        		"EnumPropertyName", 
	        		currentNode);
	        } catch (ValueConverterException vce) {
				handleValueConverterException(vce);
	        }
	        currentNode = currentNode.getParent();
	    }

)
)((
(
		{ 
	        currentNode=createCompositeNode(grammarAccess.getEnumDeclAccess().getCommaCommaParserRuleCall_3_0_0(), currentNode); 
	    }
		lv_comma_3_0=ruleComma		{
	        if ($current==null) {
	            $current = factory.create(grammarAccess.getEnumDeclRule().getType().getClassifier());
	            associateNodeWithAstElement(currentNode.getParent(), $current);
	        }
	        try {
	       		add(
	       			$current, 
	       			"comma",
	        		lv_comma_3_0, 
	        		"Comma", 
	        		currentNode);
	        } catch (ValueConverterException vce) {
				handleValueConverterException(vce);
	        }
	        currentNode = currentNode.getParent();
	    }

)
)(
(
		{ 
	        currentNode=createCompositeNode(grammarAccess.getEnumDeclAccess().getPropertyEnumEnumPropertyNameParserRuleCall_3_1_0(), currentNode); 
	    }
		lv_propertyEnum_4_0=ruleEnumPropertyName		{
	        if ($current==null) {
	            $current = factory.create(grammarAccess.getEnumDeclRule().getType().getClassifier());
	            associateNodeWithAstElement(currentNode.getParent(), $current);
	        }
	        try {
	       		add(
	       			$current, 
	       			"propertyEnum",
	        		lv_propertyEnum_4_0, 
	        		"EnumPropertyName", 
	        		currentNode);
	        } catch (ValueConverterException vce) {
				handleValueConverterException(vce);
	        }
	        currentNode = currentNode.getParent();
	    }

)
))*(
(
		{ 
	        currentNode=createCompositeNode(grammarAccess.getEnumDeclAccess().getRightCRightCurlyBracketParserRuleCall_4_0(), currentNode); 
	    }
		lv_rightC_5_0=ruleRightCurlyBracket		{
	        if ($current==null) {
	            $current = factory.create(grammarAccess.getEnumDeclRule().getType().getClassifier());
	            associateNodeWithAstElement(currentNode.getParent(), $current);
	        }
	        try {
	       		set(
	       			$current, 
	       			"rightC",
	        		lv_rightC_5_0, 
	        		"RightCurlyBracket", 
	        		currentNode);
	        } catch (ValueConverterException vce) {
				handleValueConverterException(vce);
	        }
	        currentNode = currentNode.getParent();
	    }

)
))
;





// Entry rule entryRuleLetOutDecl
entryRuleLetOutDecl returns [EObject current=null] 
	:
	{ currentNode = createCompositeNode(grammarAccess.getLetOutDeclRule(), currentNode); }
	 iv_ruleLetOutDecl=ruleLetOutDecl 
	 { $current=$iv_ruleLetOutDecl.current; } 
	 EOF 
;

// Rule LetOutDecl
ruleLetOutDecl returns [EObject current=null] 
    @init { EObject temp=null; setCurrentLookahead(); resetLookahead(); 
    }
    @after { resetLookahead(); 
    	lastConsumedNode = currentNode;
    }:
((
(
		{ 
	        currentNode=createCompositeNode(grammarAccess.getLetOutDeclAccess().getLetNameLetNameParserRuleCall_0_0(), currentNode); 
	    }
		lv_letName_0_0=ruleLetName		{
	        if ($current==null) {
	            $current = factory.create(grammarAccess.getLetOutDeclRule().getType().getClassifier());
	            associateNodeWithAstElement(currentNode.getParent(), $current);
	        }
	        try {
	       		set(
	       			$current, 
	       			"letName",
	        		lv_letName_0_0, 
	        		"LetName", 
	        		currentNode);
	        } catch (ValueConverterException vce) {
				handleValueConverterException(vce);
	        }
	        currentNode = currentNode.getParent();
	    }

)
)((
(
		{ 
	        currentNode=createCompositeNode(grammarAccess.getLetOutDeclAccess().getLeftSLeftSquareBracketKeywordParserRuleCall_1_0_0(), currentNode); 
	    }
		lv_leftS_1_0=ruleLeftSquareBracketKeyword		{
	        if ($current==null) {
	            $current = factory.create(grammarAccess.getLetOutDeclRule().getType().getClassifier());
	            associateNodeWithAstElement(currentNode.getParent(), $current);
	        }
	        try {
	       		set(
	       			$current, 
	       			"leftS",
	        		lv_leftS_1_0, 
	        		"LeftSquareBracketKeyword", 
	        		currentNode);
	        } catch (ValueConverterException vce) {
				handleValueConverterException(vce);
	        }
	        currentNode = currentNode.getParent();
	    }

)
)((
(
		{ 
	        currentNode=createCompositeNode(grammarAccess.getLetOutDeclAccess().getNameRefReferencesNameParserRuleCall_1_1_0_0(), currentNode); 
	    }
		lv_nameRef_2_0=ruleReferencesName		{
	        if ($current==null) {
	            $current = factory.create(grammarAccess.getLetOutDeclRule().getType().getClassifier());
	            associateNodeWithAstElement(currentNode.getParent(), $current);
	        }
	        try {
	       		add(
	       			$current, 
	       			"nameRef",
	        		lv_nameRef_2_0, 
	        		"ReferencesName", 
	        		currentNode);
	        } catch (ValueConverterException vce) {
				handleValueConverterException(vce);
	        }
	        currentNode = currentNode.getParent();
	    }

)
)((
(
		{ 
	        currentNode=createCompositeNode(grammarAccess.getLetOutDeclAccess().getCommaCommaParserRuleCall_1_1_1_0_0(), currentNode); 
	    }
		lv_comma_3_0=ruleComma		{
	        if ($current==null) {
	            $current = factory.create(grammarAccess.getLetOutDeclRule().getType().getClassifier());
	            associateNodeWithAstElement(currentNode.getParent(), $current);
	        }
	        try {
	       		add(
	       			$current, 
	       			"comma",
	        		lv_comma_3_0, 
	        		"Comma", 
	        		currentNode);
	        } catch (ValueConverterException vce) {
				handleValueConverterException(vce);
	        }
	        currentNode = currentNode.getParent();
	    }

)
)(
(
		{ 
	        currentNode=createCompositeNode(grammarAccess.getLetOutDeclAccess().getNameRefReferencesNameParserRuleCall_1_1_1_1_0(), currentNode); 
	    }
		lv_nameRef_4_0=ruleReferencesName		{
	        if ($current==null) {
	            $current = factory.create(grammarAccess.getLetOutDeclRule().getType().getClassifier());
	            associateNodeWithAstElement(currentNode.getParent(), $current);
	        }
	        try {
	       		add(
	       			$current, 
	       			"nameRef",
	        		lv_nameRef_4_0, 
	        		"ReferencesName", 
	        		currentNode);
	        } catch (ValueConverterException vce) {
				handleValueConverterException(vce);
	        }
	        currentNode = currentNode.getParent();
	    }

)
))*)?(
(
		{ 
	        currentNode=createCompositeNode(grammarAccess.getLetOutDeclAccess().getRightSRightSquareBracketKeywordParserRuleCall_1_2_0(), currentNode); 
	    }
		lv_rightS_5_0=ruleRightSquareBracketKeyword		{
	        if ($current==null) {
	            $current = factory.create(grammarAccess.getLetOutDeclRule().getType().getClassifier());
	            associateNodeWithAstElement(currentNode.getParent(), $current);
	        }
	        try {
	       		set(
	       			$current, 
	       			"rightS",
	        		lv_rightS_5_0, 
	        		"RightSquareBracketKeyword", 
	        		currentNode);
	        } catch (ValueConverterException vce) {
				handleValueConverterException(vce);
	        }
	        currentNode = currentNode.getParent();
	    }

)
))?((
(
		{ 
	        currentNode=createCompositeNode(grammarAccess.getLetOutDeclAccess().getBlockBlockParserRuleCall_2_0_0(), currentNode); 
	    }
		lv_block_6_0=ruleBlock		{
	        if ($current==null) {
	            $current = factory.create(grammarAccess.getLetOutDeclRule().getType().getClassifier());
	            associateNodeWithAstElement(currentNode.getParent(), $current);
	        }
	        try {
	       		set(
	       			$current, 
	       			"block",
	        		lv_block_6_0, 
	        		"Block", 
	        		currentNode);
	        } catch (ValueConverterException vce) {
				handleValueConverterException(vce);
	        }
	        currentNode = currentNode.getParent();
	    }

)
)
    |(	'=' 
    {
        createLeafNode(grammarAccess.getLetOutDeclAccess().getEqualsSignKeyword_2_1_0(), null); 
    }
(
(
		{ 
	        currentNode=createCompositeNode(grammarAccess.getLetOutDeclAccess().getExprNameExpressionParserRuleCall_2_1_1_0(), currentNode); 
	    }
		lv_exprName_8_0=ruleExpression		{
	        if ($current==null) {
	            $current = factory.create(grammarAccess.getLetOutDeclRule().getType().getClassifier());
	            associateNodeWithAstElement(currentNode.getParent(), $current);
	        }
	        try {
	       		set(
	       			$current, 
	       			"exprName",
	        		lv_exprName_8_0, 
	        		"Expression", 
	        		currentNode);
	        } catch (ValueConverterException vce) {
				handleValueConverterException(vce);
	        }
	        currentNode = currentNode.getParent();
	    }

)
))))
;





// Entry rule entryRuleSigDecl
entryRuleSigDecl returns [EObject current=null] 
	:
	{ currentNode = createCompositeNode(grammarAccess.getSigDeclRule(), currentNode); }
	 iv_ruleSigDecl=ruleSigDecl 
	 { $current=$iv_ruleSigDecl.current; } 
	 EOF 
;

// Rule SigDecl
ruleSigDecl returns [EObject current=null] 
    @init { EObject temp=null; setCurrentLookahead(); resetLookahead(); 
    }
    @after { resetLookahead(); 
    	lastConsumedNode = currentNode;
    }:
((
	{ 
	  /* */ 
	}
    { 
        currentNode=createCompositeNode(grammarAccess.getSigDeclAccess().getSigQualParserRuleCall_0(), currentNode); 
    }
    this_SigQual_0=ruleSigQual
    { 
        $current = $this_SigQual_0.current; 
        currentNode = currentNode.getParent();
    }
)?	'sig' 
    {
        createLeafNode(grammarAccess.getSigDeclAccess().getSigKeyword_1(), null); 
    }
(
(
		{ 
	        currentNode=createCompositeNode(grammarAccess.getSigDeclAccess().getSignatureNameSignatureNameParserRuleCall_2_0(), currentNode); 
	    }
		lv_signatureName_2_0=ruleSignatureName		{
	        if ($current==null) {
	            $current = factory.create(grammarAccess.getSigDeclRule().getType().getClassifier());
	            associateNodeWithAstElement(currentNode.getParent(), $current);
	        }
	        try {
	       		add(
	       			$current, 
	       			"signatureName",
	        		lv_signatureName_2_0, 
	        		"SignatureName", 
	        		currentNode);
	        } catch (ValueConverterException vce) {
				handleValueConverterException(vce);
	        }
	        currentNode = currentNode.getParent();
	    }

)
)((
(
		{ 
	        currentNode=createCompositeNode(grammarAccess.getSigDeclAccess().getCommaCommaParserRuleCall_3_0_0(), currentNode); 
	    }
		lv_comma_3_0=ruleComma		{
	        if ($current==null) {
	            $current = factory.create(grammarAccess.getSigDeclRule().getType().getClassifier());
	            associateNodeWithAstElement(currentNode.getParent(), $current);
	        }
	        try {
	       		add(
	       			$current, 
	       			"comma",
	        		lv_comma_3_0, 
	        		"Comma", 
	        		currentNode);
	        } catch (ValueConverterException vce) {
				handleValueConverterException(vce);
	        }
	        currentNode = currentNode.getParent();
	    }

)
)(
(
		{ 
	        currentNode=createCompositeNode(grammarAccess.getSigDeclAccess().getSignatureNameSignatureNameParserRuleCall_3_1_0(), currentNode); 
	    }
		lv_signatureName_4_0=ruleSignatureName		{
	        if ($current==null) {
	            $current = factory.create(grammarAccess.getSigDeclRule().getType().getClassifier());
	            associateNodeWithAstElement(currentNode.getParent(), $current);
	        }
	        try {
	       		add(
	       			$current, 
	       			"signatureName",
	        		lv_signatureName_4_0, 
	        		"SignatureName", 
	        		currentNode);
	        } catch (ValueConverterException vce) {
				handleValueConverterException(vce);
	        }
	        currentNode = currentNode.getParent();
	    }

)
))*(
(
		{ 
	        currentNode=createCompositeNode(grammarAccess.getSigDeclAccess().getSigExtSigExtParserRuleCall_4_0(), currentNode); 
	    }
		lv_sigExt_5_0=ruleSigExt		{
	        if ($current==null) {
	            $current = factory.create(grammarAccess.getSigDeclRule().getType().getClassifier());
	            associateNodeWithAstElement(currentNode.getParent(), $current);
	        }
	        try {
	       		set(
	       			$current, 
	       			"sigExt",
	        		lv_sigExt_5_0, 
	        		"SigExt", 
	        		currentNode);
	        } catch (ValueConverterException vce) {
				handleValueConverterException(vce);
	        }
	        currentNode = currentNode.getParent();
	    }

)
)?	'{' 
    {
        createLeafNode(grammarAccess.getSigDeclAccess().getLeftCurlyBracketKeyword_5(), null); 
    }
((
(
		{ 
	        currentNode=createCompositeNode(grammarAccess.getSigDeclAccess().getDeclDeclParserRuleCall_6_0_0(), currentNode); 
	    }
		lv_decl_7_0=ruleDecl		{
	        if ($current==null) {
	            $current = factory.create(grammarAccess.getSigDeclRule().getType().getClassifier());
	            associateNodeWithAstElement(currentNode.getParent(), $current);
	        }
	        try {
	       		add(
	       			$current, 
	       			"decl",
	        		lv_decl_7_0, 
	        		"Decl", 
	        		currentNode);
	        } catch (ValueConverterException vce) {
				handleValueConverterException(vce);
	        }
	        currentNode = currentNode.getParent();
	    }

)
)((
(
		lv_comma2_8_0=	',' 
    {
        createLeafNode(grammarAccess.getSigDeclAccess().getComma2CommaKeyword_6_1_0_0(), "comma2"); 
    }
 
	    {
	        if ($current==null) {
	            $current = factory.create(grammarAccess.getSigDeclRule().getType().getClassifier());
	            associateNodeWithAstElement(currentNode, $current);
	        }
	        
	        try {
	       		add($current, "comma2", lv_comma2_8_0, ",", lastConsumedNode);
	        } catch (ValueConverterException vce) {
				handleValueConverterException(vce);
	        }
	    }

)
)(
(
		{ 
	        currentNode=createCompositeNode(grammarAccess.getSigDeclAccess().getDeclDeclParserRuleCall_6_1_1_0(), currentNode); 
	    }
		lv_decl_9_0=ruleDecl		{
	        if ($current==null) {
	            $current = factory.create(grammarAccess.getSigDeclRule().getType().getClassifier());
	            associateNodeWithAstElement(currentNode.getParent(), $current);
	        }
	        try {
	       		add(
	       			$current, 
	       			"decl",
	        		lv_decl_9_0, 
	        		"Decl", 
	        		currentNode);
	        } catch (ValueConverterException vce) {
				handleValueConverterException(vce);
	        }
	        currentNode = currentNode.getParent();
	    }

)
))*)?	'}' 
    {
        createLeafNode(grammarAccess.getSigDeclAccess().getRightCurlyBracketKeyword_7(), null); 
    }
(
(
		{ 
	        currentNode=createCompositeNode(grammarAccess.getSigDeclAccess().getBlockBlockParserRuleCall_8_0(), currentNode); 
	    }
		lv_block_11_0=ruleBlock		{
	        if ($current==null) {
	            $current = factory.create(grammarAccess.getSigDeclRule().getType().getClassifier());
	            associateNodeWithAstElement(currentNode.getParent(), $current);
	        }
	        try {
	       		set(
	       			$current, 
	       			"block",
	        		lv_block_11_0, 
	        		"Block", 
	        		currentNode);
	        } catch (ValueConverterException vce) {
				handleValueConverterException(vce);
	        }
	        currentNode = currentNode.getParent();
	    }

)
)?)
;





// Entry rule entryRuleSigQual
entryRuleSigQual returns [EObject current=null] 
	:
	{ currentNode = createCompositeNode(grammarAccess.getSigQualRule(), currentNode); }
	 iv_ruleSigQual=ruleSigQual 
	 { $current=$iv_ruleSigQual.current; } 
	 EOF 
;

// Rule SigQual
ruleSigQual returns [EObject current=null] 
    @init { EObject temp=null; setCurrentLookahead(); resetLookahead(); 
    }
    @after { resetLookahead(); 
    	lastConsumedNode = currentNode;
    }:
((
(
(
		lv_sigq_0_1=	'abstract' 
    {
        createLeafNode(grammarAccess.getSigQualAccess().getSigqAbstractKeyword_0_0_0(), "sigq"); 
    }
 
	    {
	        if ($current==null) {
	            $current = factory.create(grammarAccess.getSigQualRule().getType().getClassifier());
	            associateNodeWithAstElement(currentNode, $current);
	        }
	        
	        try {
	       		set($current, "sigq", lv_sigq_0_1, null, lastConsumedNode);
	        } catch (ValueConverterException vce) {
				handleValueConverterException(vce);
	        }
	    }

    |		lv_sigq_0_2=	'lone' 
    {
        createLeafNode(grammarAccess.getSigQualAccess().getSigqLoneKeyword_0_0_1(), "sigq"); 
    }
 
	    {
	        if ($current==null) {
	            $current = factory.create(grammarAccess.getSigQualRule().getType().getClassifier());
	            associateNodeWithAstElement(currentNode, $current);
	        }
	        
	        try {
	       		set($current, "sigq", lv_sigq_0_2, null, lastConsumedNode);
	        } catch (ValueConverterException vce) {
				handleValueConverterException(vce);
	        }
	    }

    |		lv_sigq_0_3=	'one' 
    {
        createLeafNode(grammarAccess.getSigQualAccess().getSigqOneKeyword_0_0_2(), "sigq"); 
    }
 
	    {
	        if ($current==null) {
	            $current = factory.create(grammarAccess.getSigQualRule().getType().getClassifier());
	            associateNodeWithAstElement(currentNode, $current);
	        }
	        
	        try {
	       		set($current, "sigq", lv_sigq_0_3, null, lastConsumedNode);
	        } catch (ValueConverterException vce) {
				handleValueConverterException(vce);
	        }
	    }

    |		lv_sigq_0_4=	'some' 
    {
        createLeafNode(grammarAccess.getSigQualAccess().getSigqSomeKeyword_0_0_3(), "sigq"); 
    }
 
	    {
	        if ($current==null) {
	            $current = factory.create(grammarAccess.getSigQualRule().getType().getClassifier());
	            associateNodeWithAstElement(currentNode, $current);
	        }
	        
	        try {
	       		set($current, "sigq", lv_sigq_0_4, null, lastConsumedNode);
	        } catch (ValueConverterException vce) {
				handleValueConverterException(vce);
	        }
	    }

    |		lv_sigq_0_5=	'private' 
    {
        createLeafNode(grammarAccess.getSigQualAccess().getSigqPrivateKeyword_0_0_4(), "sigq"); 
    }
 
	    {
	        if ($current==null) {
	            $current = factory.create(grammarAccess.getSigQualRule().getType().getClassifier());
	            associateNodeWithAstElement(currentNode, $current);
	        }
	        
	        try {
	       		set($current, "sigq", lv_sigq_0_5, null, lastConsumedNode);
	        } catch (ValueConverterException vce) {
				handleValueConverterException(vce);
	        }
	    }

)

)
)(	'abstract' 
    {
        createLeafNode(grammarAccess.getSigQualAccess().getAbstractKeyword_1_0(), null); 
    }

    |	'lone' 
    {
        createLeafNode(grammarAccess.getSigQualAccess().getLoneKeyword_1_1(), null); 
    }

    |	'one' 
    {
        createLeafNode(grammarAccess.getSigQualAccess().getOneKeyword_1_2(), null); 
    }

    |	'some' 
    {
        createLeafNode(grammarAccess.getSigQualAccess().getSomeKeyword_1_3(), null); 
    }

    |	'private' 
    {
        createLeafNode(grammarAccess.getSigQualAccess().getPrivateKeyword_1_4(), null); 
    }
)*)
;





// Entry rule entryRuleSigExt
entryRuleSigExt returns [EObject current=null] 
	:
	{ currentNode = createCompositeNode(grammarAccess.getSigExtRule(), currentNode); }
	 iv_ruleSigExt=ruleSigExt 
	 { $current=$iv_ruleSigExt.current; } 
	 EOF 
;

// Rule SigExt
ruleSigExt returns [EObject current=null] 
    @init { EObject temp=null; setCurrentLookahead(); resetLookahead(); 
    }
    @after { resetLookahead(); 
    	lastConsumedNode = currentNode;
    }:
((	'extends' 
    {
        createLeafNode(grammarAccess.getSigExtAccess().getExtendsKeyword_0_0(), null); 
    }
(
(
		{ 
	        currentNode=createCompositeNode(grammarAccess.getSigExtAccess().getRefReferencesSigParserRuleCall_0_1_0(), currentNode); 
	    }
		lv_ref_1_0=ruleReferencesSig		{
	        if ($current==null) {
	            $current = factory.create(grammarAccess.getSigExtRule().getType().getClassifier());
	            associateNodeWithAstElement(currentNode.getParent(), $current);
	        }
	        try {
	       		set(
	       			$current, 
	       			"ref",
	        		lv_ref_1_0, 
	        		"ReferencesSig", 
	        		currentNode);
	        } catch (ValueConverterException vce) {
				handleValueConverterException(vce);
	        }
	        currentNode = currentNode.getParent();
	    }

)
))
    |(	'in' 
    {
        createLeafNode(grammarAccess.getSigExtAccess().getInKeyword_1_0(), null); 
    }
(
(
		{ 
	        currentNode=createCompositeNode(grammarAccess.getSigExtAccess().getRefReferencesSigParserRuleCall_1_1_0(), currentNode); 
	    }
		lv_ref_3_0=ruleReferencesSig		{
	        if ($current==null) {
	            $current = factory.create(grammarAccess.getSigExtRule().getType().getClassifier());
	            associateNodeWithAstElement(currentNode.getParent(), $current);
	        }
	        try {
	       		set(
	       			$current, 
	       			"ref",
	        		lv_ref_3_0, 
	        		"ReferencesSig", 
	        		currentNode);
	        } catch (ValueConverterException vce) {
				handleValueConverterException(vce);
	        }
	        currentNode = currentNode.getParent();
	    }

)
)(	'+' 
    {
        createLeafNode(grammarAccess.getSigExtAccess().getPlusSignKeyword_1_2_0(), null); 
    }
(
(
		{ 
	        currentNode=createCompositeNode(grammarAccess.getSigExtAccess().getRef2ReferencesSigParserRuleCall_1_2_1_0(), currentNode); 
	    }
		lv_ref2_5_0=ruleReferencesSig		{
	        if ($current==null) {
	            $current = factory.create(grammarAccess.getSigExtRule().getType().getClassifier());
	            associateNodeWithAstElement(currentNode.getParent(), $current);
	        }
	        try {
	       		add(
	       			$current, 
	       			"ref2",
	        		lv_ref2_5_0, 
	        		"ReferencesSig", 
	        		currentNode);
	        } catch (ValueConverterException vce) {
				handleValueConverterException(vce);
	        }
	        currentNode = currentNode.getParent();
	    }

)
))*))
;





// Entry rule entryRuleExpression
entryRuleExpression returns [EObject current=null] 
	:
	{ currentNode = createCompositeNode(grammarAccess.getExpressionRule(), currentNode); }
	 iv_ruleExpression=ruleExpression 
	 { $current=$iv_ruleExpression.current; } 
	 EOF 
;

// Rule Expression
ruleExpression returns [EObject current=null] 
    @init { EObject temp=null; setCurrentLookahead(); resetLookahead(); 
    }
    @after { resetLookahead(); 
    	lastConsumedNode = currentNode;
    }:
(
	{ 
	  /* */ 
	}
    { 
        currentNode=createCompositeNode(grammarAccess.getExpressionAccess().getTerminalExpressionParserRuleCall_0(), currentNode); 
    }
    this_TerminalExpression_0=ruleTerminalExpression
    { 
        $current = $this_TerminalExpression_0.current; 
        currentNode = currentNode.getParent();
    }
(((
(
		{ 
	        currentNode=createCompositeNode(grammarAccess.getExpressionAccess().getBinOpBinOpParserRuleCall_1_0_0_0(), currentNode); 
	    }
		lv_binOp_1_0=ruleBinOp		{
	        if ($current==null) {
	            $current = factory.create(grammarAccess.getExpressionRule().getType().getClassifier());
	            associateNodeWithAstElement(currentNode.getParent(), $current);
	        }
	        try {
	       		add(
	       			$current, 
	       			"binOp",
	        		lv_binOp_1_0, 
	        		"BinOp", 
	        		currentNode);
	        } catch (ValueConverterException vce) {
				handleValueConverterException(vce);
	        }
	        currentNode = currentNode.getParent();
	    }

)
)(
(
		{ 
	        currentNode=createCompositeNode(grammarAccess.getExpressionAccess().getExprExpressionParserRuleCall_1_0_1_0(), currentNode); 
	    }
		lv_expr_2_0=ruleExpression		{
	        if ($current==null) {
	            $current = factory.create(grammarAccess.getExpressionRule().getType().getClassifier());
	            associateNodeWithAstElement(currentNode.getParent(), $current);
	        }
	        try {
	       		add(
	       			$current, 
	       			"expr",
	        		lv_expr_2_0, 
	        		"Expression", 
	        		currentNode);
	        } catch (ValueConverterException vce) {
				handleValueConverterException(vce);
	        }
	        currentNode = currentNode.getParent();
	    }

)
))
    |((
(
		{ 
	        currentNode=createCompositeNode(grammarAccess.getExpressionAccess().getArrowOpArrowOpParserRuleCall_1_1_0_0(), currentNode); 
	    }
		lv_arrowOp_3_0=ruleArrowOp		{
	        if ($current==null) {
	            $current = factory.create(grammarAccess.getExpressionRule().getType().getClassifier());
	            associateNodeWithAstElement(currentNode.getParent(), $current);
	        }
	        try {
	       		add(
	       			$current, 
	       			"arrowOp",
	        		lv_arrowOp_3_0, 
	        		"ArrowOp", 
	        		currentNode);
	        } catch (ValueConverterException vce) {
				handleValueConverterException(vce);
	        }
	        currentNode = currentNode.getParent();
	    }

)
)(
(
		{ 
	        currentNode=createCompositeNode(grammarAccess.getExpressionAccess().getExprExpressionParserRuleCall_1_1_1_0(), currentNode); 
	    }
		lv_expr_4_0=ruleExpression		{
	        if ($current==null) {
	            $current = factory.create(grammarAccess.getExpressionRule().getType().getClassifier());
	            associateNodeWithAstElement(currentNode.getParent(), $current);
	        }
	        try {
	       		add(
	       			$current, 
	       			"expr",
	        		lv_expr_4_0, 
	        		"Expression", 
	        		currentNode);
	        } catch (ValueConverterException vce) {
				handleValueConverterException(vce);
	        }
	        currentNode = currentNode.getParent();
	    }

)
))
    |((	'!' 
    {
        createLeafNode(grammarAccess.getExpressionAccess().getExclamationMarkKeyword_1_2_0_0(), null); 
    }

    |	'not' 
    {
        createLeafNode(grammarAccess.getExpressionAccess().getNotKeyword_1_2_0_1(), null); 
    }
)?(
(
		{ 
	        currentNode=createCompositeNode(grammarAccess.getExpressionAccess().getCmpCompareOpParserRuleCall_1_2_1_0(), currentNode); 
	    }
		lv_cmp_7_0=ruleCompareOp		{
	        if ($current==null) {
	            $current = factory.create(grammarAccess.getExpressionRule().getType().getClassifier());
	            associateNodeWithAstElement(currentNode.getParent(), $current);
	        }
	        try {
	       		add(
	       			$current, 
	       			"cmp",
	        		lv_cmp_7_0, 
	        		"CompareOp", 
	        		currentNode);
	        } catch (ValueConverterException vce) {
				handleValueConverterException(vce);
	        }
	        currentNode = currentNode.getParent();
	    }

)
)(
(
		{ 
	        currentNode=createCompositeNode(grammarAccess.getExpressionAccess().getExprExpressionParserRuleCall_1_2_2_0(), currentNode); 
	    }
		lv_expr_8_0=ruleExpression		{
	        if ($current==null) {
	            $current = factory.create(grammarAccess.getExpressionRule().getType().getClassifier());
	            associateNodeWithAstElement(currentNode.getParent(), $current);
	        }
	        try {
	       		add(
	       			$current, 
	       			"expr",
	        		lv_expr_8_0, 
	        		"Expression", 
	        		currentNode);
	        } catch (ValueConverterException vce) {
				handleValueConverterException(vce);
	        }
	        currentNode = currentNode.getParent();
	    }

)
))
    |((	'=>' 
    {
        createLeafNode(grammarAccess.getExpressionAccess().getEqualsSignGreaterThanSignKeyword_1_3_0_0(), null); 
    }

    |	'implies' 
    {
        createLeafNode(grammarAccess.getExpressionAccess().getImpliesKeyword_1_3_0_1(), null); 
    }
)(
(
		{ 
	        currentNode=createCompositeNode(grammarAccess.getExpressionAccess().getExprExpressionParserRuleCall_1_3_1_0(), currentNode); 
	    }
		lv_expr_11_0=ruleExpression		{
	        if ($current==null) {
	            $current = factory.create(grammarAccess.getExpressionRule().getType().getClassifier());
	            associateNodeWithAstElement(currentNode.getParent(), $current);
	        }
	        try {
	       		add(
	       			$current, 
	       			"expr",
	        		lv_expr_11_0, 
	        		"Expression", 
	        		currentNode);
	        } catch (ValueConverterException vce) {
				handleValueConverterException(vce);
	        }
	        currentNode = currentNode.getParent();
	    }

)
)(	'else' 
    {
        createLeafNode(grammarAccess.getExpressionAccess().getElseKeyword_1_3_2_0(), null); 
    }
(
(
		{ 
	        currentNode=createCompositeNode(grammarAccess.getExpressionAccess().getExprExpressionParserRuleCall_1_3_2_1_0(), currentNode); 
	    }
		lv_expr_13_0=ruleExpression		{
	        if ($current==null) {
	            $current = factory.create(grammarAccess.getExpressionRule().getType().getClassifier());
	            associateNodeWithAstElement(currentNode.getParent(), $current);
	        }
	        try {
	       		add(
	       			$current, 
	       			"expr",
	        		lv_expr_13_0, 
	        		"Expression", 
	        		currentNode);
	        } catch (ValueConverterException vce) {
				handleValueConverterException(vce);
	        }
	        currentNode = currentNode.getParent();
	    }

)
))?)
    |((
(
		{ 
	        currentNode=createCompositeNode(grammarAccess.getExpressionAccess().getLeftLeftSquareBracketKeywordParserRuleCall_1_4_0_0(), currentNode); 
	    }
		lv_left_14_0=ruleLeftSquareBracketKeyword		{
	        if ($current==null) {
	            $current = factory.create(grammarAccess.getExpressionRule().getType().getClassifier());
	            associateNodeWithAstElement(currentNode.getParent(), $current);
	        }
	        try {
	       		add(
	       			$current, 
	       			"left",
	        		lv_left_14_0, 
	        		"LeftSquareBracketKeyword", 
	        		currentNode);
	        } catch (ValueConverterException vce) {
				handleValueConverterException(vce);
	        }
	        currentNode = currentNode.getParent();
	    }

)
)((
(
		{ 
	        currentNode=createCompositeNode(grammarAccess.getExpressionAccess().getExprExpressionParserRuleCall_1_4_1_0_0(), currentNode); 
	    }
		lv_expr_15_0=ruleExpression		{
	        if ($current==null) {
	            $current = factory.create(grammarAccess.getExpressionRule().getType().getClassifier());
	            associateNodeWithAstElement(currentNode.getParent(), $current);
	        }
	        try {
	       		add(
	       			$current, 
	       			"expr",
	        		lv_expr_15_0, 
	        		"Expression", 
	        		currentNode);
	        } catch (ValueConverterException vce) {
				handleValueConverterException(vce);
	        }
	        currentNode = currentNode.getParent();
	    }

)
)((
(
		{ 
	        currentNode=createCompositeNode(grammarAccess.getExpressionAccess().getCommaCommaParserRuleCall_1_4_1_1_0_0(), currentNode); 
	    }
		lv_comma_16_0=ruleComma		{
	        if ($current==null) {
	            $current = factory.create(grammarAccess.getExpressionRule().getType().getClassifier());
	            associateNodeWithAstElement(currentNode.getParent(), $current);
	        }
	        try {
	       		add(
	       			$current, 
	       			"comma",
	        		lv_comma_16_0, 
	        		"Comma", 
	        		currentNode);
	        } catch (ValueConverterException vce) {
				handleValueConverterException(vce);
	        }
	        currentNode = currentNode.getParent();
	    }

)
)(
(
		{ 
	        currentNode=createCompositeNode(grammarAccess.getExpressionAccess().getExprExpressionParserRuleCall_1_4_1_1_1_0(), currentNode); 
	    }
		lv_expr_17_0=ruleExpression		{
	        if ($current==null) {
	            $current = factory.create(grammarAccess.getExpressionRule().getType().getClassifier());
	            associateNodeWithAstElement(currentNode.getParent(), $current);
	        }
	        try {
	       		add(
	       			$current, 
	       			"expr",
	        		lv_expr_17_0, 
	        		"Expression", 
	        		currentNode);
	        } catch (ValueConverterException vce) {
				handleValueConverterException(vce);
	        }
	        currentNode = currentNode.getParent();
	    }

)
))*)?(
(
		{ 
	        currentNode=createCompositeNode(grammarAccess.getExpressionAccess().getRightRightSquareBracketKeywordParserRuleCall_1_4_2_0(), currentNode); 
	    }
		lv_right_18_0=ruleRightSquareBracketKeyword		{
	        if ($current==null) {
	            $current = factory.create(grammarAccess.getExpressionRule().getType().getClassifier());
	            associateNodeWithAstElement(currentNode.getParent(), $current);
	        }
	        try {
	       		add(
	       			$current, 
	       			"right",
	        		lv_right_18_0, 
	        		"RightSquareBracketKeyword", 
	        		currentNode);
	        } catch (ValueConverterException vce) {
				handleValueConverterException(vce);
	        }
	        currentNode = currentNode.getParent();
	    }

)
)))*)
;





// Entry rule entryRuleTerminalExpression
entryRuleTerminalExpression returns [EObject current=null] 
	:
	{ currentNode = createCompositeNode(grammarAccess.getTerminalExpressionRule(), currentNode); }
	 iv_ruleTerminalExpression=ruleTerminalExpression 
	 { $current=$iv_ruleTerminalExpression.current; } 
	 EOF 
;

// Rule TerminalExpression
ruleTerminalExpression returns [EObject current=null] 
    @init { EObject temp=null; setCurrentLookahead(); resetLookahead(); 
    }
    @after { resetLookahead(); 
    	lastConsumedNode = currentNode;
    }:
(((
	{ 
	  /* */ 
	}
    { 
        temp=factory.create(grammarAccess.getTerminalExpressionAccess().getExpressionAction_0_0().getType().getClassifier());
        $current = temp; 
        temp = null;
        CompositeNode newNode = createCompositeNode(grammarAccess.getTerminalExpressionAccess().getExpressionAction_0_0(), currentNode.getParent());
    newNode.getChildren().add(currentNode);
    moveLookaheadInfo(currentNode, newNode);
    currentNode = newNode; 
        associateNodeWithAstElement(currentNode, $current); 
    }
)(
(
		lv_let_1_0=	'let' 
    {
        createLeafNode(grammarAccess.getTerminalExpressionAccess().getLetLetKeyword_0_1_0(), "let"); 
    }
 
	    {
	        if ($current==null) {
	            $current = factory.create(grammarAccess.getTerminalExpressionRule().getType().getClassifier());
	            associateNodeWithAstElement(currentNode, $current);
	        }
	        
	        try {
	       		set($current, "let", lv_let_1_0, "let", lastConsumedNode);
	        } catch (ValueConverterException vce) {
				handleValueConverterException(vce);
	        }
	    }

)
)(
(
		{ 
	        currentNode=createCompositeNode(grammarAccess.getTerminalExpressionAccess().getLetdeclLetDeclParserRuleCall_0_2_0(), currentNode); 
	    }
		lv_letdecl_2_0=ruleLetDecl		{
	        if ($current==null) {
	            $current = factory.create(grammarAccess.getTerminalExpressionRule().getType().getClassifier());
	            associateNodeWithAstElement(currentNode.getParent(), $current);
	        }
	        try {
	       		add(
	       			$current, 
	       			"letdecl",
	        		lv_letdecl_2_0, 
	        		"LetDecl", 
	        		currentNode);
	        } catch (ValueConverterException vce) {
				handleValueConverterException(vce);
	        }
	        currentNode = currentNode.getParent();
	    }

)
)((
(
		{ 
	        currentNode=createCompositeNode(grammarAccess.getTerminalExpressionAccess().getCommaCommaParserRuleCall_0_3_0_0(), currentNode); 
	    }
		lv_comma_3_0=ruleComma		{
	        if ($current==null) {
	            $current = factory.create(grammarAccess.getTerminalExpressionRule().getType().getClassifier());
	            associateNodeWithAstElement(currentNode.getParent(), $current);
	        }
	        try {
	       		add(
	       			$current, 
	       			"comma",
	        		lv_comma_3_0, 
	        		"Comma", 
	        		currentNode);
	        } catch (ValueConverterException vce) {
				handleValueConverterException(vce);
	        }
	        currentNode = currentNode.getParent();
	    }

)
)(
(
		{ 
	        currentNode=createCompositeNode(grammarAccess.getTerminalExpressionAccess().getLetdeclLetDeclParserRuleCall_0_3_1_0(), currentNode); 
	    }
		lv_letdecl_4_0=ruleLetDecl		{
	        if ($current==null) {
	            $current = factory.create(grammarAccess.getTerminalExpressionRule().getType().getClassifier());
	            associateNodeWithAstElement(currentNode.getParent(), $current);
	        }
	        try {
	       		add(
	       			$current, 
	       			"letdecl",
	        		lv_letdecl_4_0, 
	        		"LetDecl", 
	        		currentNode);
	        } catch (ValueConverterException vce) {
				handleValueConverterException(vce);
	        }
	        currentNode = currentNode.getParent();
	    }

)
))*(
(
		{ 
	        currentNode=createCompositeNode(grammarAccess.getTerminalExpressionAccess().getBlockOrBarBlockOrBarParserRuleCall_0_4_0(), currentNode); 
	    }
		lv_blockOrBar_5_0=ruleBlockOrBar		{
	        if ($current==null) {
	            $current = factory.create(grammarAccess.getTerminalExpressionRule().getType().getClassifier());
	            associateNodeWithAstElement(currentNode.getParent(), $current);
	        }
	        try {
	       		add(
	       			$current, 
	       			"blockOrBar",
	        		lv_blockOrBar_5_0, 
	        		"BlockOrBar", 
	        		currentNode);
	        } catch (ValueConverterException vce) {
				handleValueConverterException(vce);
	        }
	        currentNode = currentNode.getParent();
	    }

)
))
    |((
	{ 
	  /* */ 
	}
    { 
        temp=factory.create(grammarAccess.getTerminalExpressionAccess().getExpressionAction_1_0().getType().getClassifier());
        $current = temp; 
        temp = null;
        CompositeNode newNode = createCompositeNode(grammarAccess.getTerminalExpressionAccess().getExpressionAction_1_0(), currentNode.getParent());
    newNode.getChildren().add(currentNode);
    moveLookaheadInfo(currentNode, newNode);
    currentNode = newNode; 
        associateNodeWithAstElement(currentNode, $current); 
    }
)(
(
		{ 
	        currentNode=createCompositeNode(grammarAccess.getTerminalExpressionAccess().getQuantQuantParserRuleCall_1_1_0(), currentNode); 
	    }
		lv_quant_7_0=ruleQuant		{
	        if ($current==null) {
	            $current = factory.create(grammarAccess.getTerminalExpressionRule().getType().getClassifier());
	            associateNodeWithAstElement(currentNode.getParent(), $current);
	        }
	        try {
	       		set(
	       			$current, 
	       			"quant",
	        		lv_quant_7_0, 
	        		"Quant", 
	        		currentNode);
	        } catch (ValueConverterException vce) {
				handleValueConverterException(vce);
	        }
	        currentNode = currentNode.getParent();
	    }

)
)(
(
		{ 
	        currentNode=createCompositeNode(grammarAccess.getTerminalExpressionAccess().getDeclDeclParserRuleCall_1_2_0(), currentNode); 
	    }
		lv_decl_8_0=ruleDecl		{
	        if ($current==null) {
	            $current = factory.create(grammarAccess.getTerminalExpressionRule().getType().getClassifier());
	            associateNodeWithAstElement(currentNode.getParent(), $current);
	        }
	        try {
	       		add(
	       			$current, 
	       			"decl",
	        		lv_decl_8_0, 
	        		"Decl", 
	        		currentNode);
	        } catch (ValueConverterException vce) {
				handleValueConverterException(vce);
	        }
	        currentNode = currentNode.getParent();
	    }

)
)((
(
		{ 
	        currentNode=createCompositeNode(grammarAccess.getTerminalExpressionAccess().getCommaCommaParserRuleCall_1_3_0_0(), currentNode); 
	    }
		lv_comma_9_0=ruleComma		{
	        if ($current==null) {
	            $current = factory.create(grammarAccess.getTerminalExpressionRule().getType().getClassifier());
	            associateNodeWithAstElement(currentNode.getParent(), $current);
	        }
	        try {
	       		add(
	       			$current, 
	       			"comma",
	        		lv_comma_9_0, 
	        		"Comma", 
	        		currentNode);
	        } catch (ValueConverterException vce) {
				handleValueConverterException(vce);
	        }
	        currentNode = currentNode.getParent();
	    }

)
)(
(
		{ 
	        currentNode=createCompositeNode(grammarAccess.getTerminalExpressionAccess().getDeclDeclParserRuleCall_1_3_1_0(), currentNode); 
	    }
		lv_decl_10_0=ruleDecl		{
	        if ($current==null) {
	            $current = factory.create(grammarAccess.getTerminalExpressionRule().getType().getClassifier());
	            associateNodeWithAstElement(currentNode.getParent(), $current);
	        }
	        try {
	       		add(
	       			$current, 
	       			"decl",
	        		lv_decl_10_0, 
	        		"Decl", 
	        		currentNode);
	        } catch (ValueConverterException vce) {
				handleValueConverterException(vce);
	        }
	        currentNode = currentNode.getParent();
	    }

)
))*(
(
		{ 
	        currentNode=createCompositeNode(grammarAccess.getTerminalExpressionAccess().getBlockOrBarBlockOrBarParserRuleCall_1_4_0(), currentNode); 
	    }
		lv_blockOrBar_11_0=ruleBlockOrBar		{
	        if ($current==null) {
	            $current = factory.create(grammarAccess.getTerminalExpressionRule().getType().getClassifier());
	            associateNodeWithAstElement(currentNode.getParent(), $current);
	        }
	        try {
	       		add(
	       			$current, 
	       			"blockOrBar",
	        		lv_blockOrBar_11_0, 
	        		"BlockOrBar", 
	        		currentNode);
	        } catch (ValueConverterException vce) {
				handleValueConverterException(vce);
	        }
	        currentNode = currentNode.getParent();
	    }

)
))
    |((
	{ 
	  /* */ 
	}
    { 
        temp=factory.create(grammarAccess.getTerminalExpressionAccess().getExpressionAction_2_0().getType().getClassifier());
        $current = temp; 
        temp = null;
        CompositeNode newNode = createCompositeNode(grammarAccess.getTerminalExpressionAccess().getExpressionAction_2_0(), currentNode.getParent());
    newNode.getChildren().add(currentNode);
    moveLookaheadInfo(currentNode, newNode);
    currentNode = newNode; 
        associateNodeWithAstElement(currentNode, $current); 
    }
)(
(
		{ 
	        currentNode=createCompositeNode(grammarAccess.getTerminalExpressionAccess().getUnOpUnOpParserRuleCall_2_1_0(), currentNode); 
	    }
		lv_unOp_13_0=ruleUnOp		{
	        if ($current==null) {
	            $current = factory.create(grammarAccess.getTerminalExpressionRule().getType().getClassifier());
	            associateNodeWithAstElement(currentNode.getParent(), $current);
	        }
	        try {
	       		set(
	       			$current, 
	       			"unOp",
	        		lv_unOp_13_0, 
	        		"UnOp", 
	        		currentNode);
	        } catch (ValueConverterException vce) {
				handleValueConverterException(vce);
	        }
	        currentNode = currentNode.getParent();
	    }

)
)(
(
		{ 
	        currentNode=createCompositeNode(grammarAccess.getTerminalExpressionAccess().getExprExpressionParserRuleCall_2_2_0(), currentNode); 
	    }
		lv_expr_14_0=ruleExpression		{
	        if ($current==null) {
	            $current = factory.create(grammarAccess.getTerminalExpressionRule().getType().getClassifier());
	            associateNodeWithAstElement(currentNode.getParent(), $current);
	        }
	        try {
	       		add(
	       			$current, 
	       			"expr",
	        		lv_expr_14_0, 
	        		"Expression", 
	        		currentNode);
	        } catch (ValueConverterException vce) {
				handleValueConverterException(vce);
	        }
	        currentNode = currentNode.getParent();
	    }

)
))
    |((
	{ 
	  /* */ 
	}
    { 
        temp=factory.create(grammarAccess.getTerminalExpressionAccess().getExpressionAction_3_0().getType().getClassifier());
        $current = temp; 
        temp = null;
        CompositeNode newNode = createCompositeNode(grammarAccess.getTerminalExpressionAccess().getExpressionAction_3_0(), currentNode.getParent());
    newNode.getChildren().add(currentNode);
    moveLookaheadInfo(currentNode, newNode);
    currentNode = newNode; 
        associateNodeWithAstElement(currentNode, $current); 
    }
)(
(
		{ 
	        currentNode=createCompositeNode(grammarAccess.getTerminalExpressionAccess().getCommonCommonQuantUnOpParserRuleCall_3_1_0(), currentNode); 
	    }
		lv_common_16_0=ruleCommonQuantUnOp		{
	        if ($current==null) {
	            $current = factory.create(grammarAccess.getTerminalExpressionRule().getType().getClassifier());
	            associateNodeWithAstElement(currentNode.getParent(), $current);
	        }
	        try {
	       		add(
	       			$current, 
	       			"common",
	        		lv_common_16_0, 
	        		"CommonQuantUnOp", 
	        		currentNode);
	        } catch (ValueConverterException vce) {
				handleValueConverterException(vce);
	        }
	        currentNode = currentNode.getParent();
	    }

)
)(((
(
		{ 
	        currentNode=createCompositeNode(grammarAccess.getTerminalExpressionAccess().getDeclDeclParserRuleCall_3_2_0_0_0(), currentNode); 
	    }
		lv_decl_17_0=ruleDecl		{
	        if ($current==null) {
	            $current = factory.create(grammarAccess.getTerminalExpressionRule().getType().getClassifier());
	            associateNodeWithAstElement(currentNode.getParent(), $current);
	        }
	        try {
	       		add(
	       			$current, 
	       			"decl",
	        		lv_decl_17_0, 
	        		"Decl", 
	        		currentNode);
	        } catch (ValueConverterException vce) {
				handleValueConverterException(vce);
	        }
	        currentNode = currentNode.getParent();
	    }

)
)((
(
		{ 
	        currentNode=createCompositeNode(grammarAccess.getTerminalExpressionAccess().getCommaCommaParserRuleCall_3_2_0_1_0_0(), currentNode); 
	    }
		lv_comma_18_0=ruleComma		{
	        if ($current==null) {
	            $current = factory.create(grammarAccess.getTerminalExpressionRule().getType().getClassifier());
	            associateNodeWithAstElement(currentNode.getParent(), $current);
	        }
	        try {
	       		add(
	       			$current, 
	       			"comma",
	        		lv_comma_18_0, 
	        		"Comma", 
	        		currentNode);
	        } catch (ValueConverterException vce) {
				handleValueConverterException(vce);
	        }
	        currentNode = currentNode.getParent();
	    }

)
)(
(
		{ 
	        currentNode=createCompositeNode(grammarAccess.getTerminalExpressionAccess().getDeclDeclParserRuleCall_3_2_0_1_1_0(), currentNode); 
	    }
		lv_decl_19_0=ruleDecl		{
	        if ($current==null) {
	            $current = factory.create(grammarAccess.getTerminalExpressionRule().getType().getClassifier());
	            associateNodeWithAstElement(currentNode.getParent(), $current);
	        }
	        try {
	       		add(
	       			$current, 
	       			"decl",
	        		lv_decl_19_0, 
	        		"Decl", 
	        		currentNode);
	        } catch (ValueConverterException vce) {
				handleValueConverterException(vce);
	        }
	        currentNode = currentNode.getParent();
	    }

)
))*(
(
		{ 
	        currentNode=createCompositeNode(grammarAccess.getTerminalExpressionAccess().getBlockOrBarBlockOrBarParserRuleCall_3_2_0_2_0(), currentNode); 
	    }
		lv_blockOrBar_20_0=ruleBlockOrBar		{
	        if ($current==null) {
	            $current = factory.create(grammarAccess.getTerminalExpressionRule().getType().getClassifier());
	            associateNodeWithAstElement(currentNode.getParent(), $current);
	        }
	        try {
	       		add(
	       			$current, 
	       			"blockOrBar",
	        		lv_blockOrBar_20_0, 
	        		"BlockOrBar", 
	        		currentNode);
	        } catch (ValueConverterException vce) {
				handleValueConverterException(vce);
	        }
	        currentNode = currentNode.getParent();
	    }

)
))
    |(
(
		{ 
	        currentNode=createCompositeNode(grammarAccess.getTerminalExpressionAccess().getExprExpressionParserRuleCall_3_2_1_0(), currentNode); 
	    }
		lv_expr_21_0=ruleExpression		{
	        if ($current==null) {
	            $current = factory.create(grammarAccess.getTerminalExpressionRule().getType().getClassifier());
	            associateNodeWithAstElement(currentNode.getParent(), $current);
	        }
	        try {
	       		add(
	       			$current, 
	       			"expr",
	        		lv_expr_21_0, 
	        		"Expression", 
	        		currentNode);
	        } catch (ValueConverterException vce) {
				handleValueConverterException(vce);
	        }
	        currentNode = currentNode.getParent();
	    }

)
)))
    |((
	{ 
	  /* */ 
	}
    { 
        temp=factory.create(grammarAccess.getTerminalExpressionAccess().getExpressionAction_4_0().getType().getClassifier());
        $current = temp; 
        temp = null;
        CompositeNode newNode = createCompositeNode(grammarAccess.getTerminalExpressionAccess().getExpressionAction_4_0(), currentNode.getParent());
    newNode.getChildren().add(currentNode);
    moveLookaheadInfo(currentNode, newNode);
    currentNode = newNode; 
        associateNodeWithAstElement(currentNode, $current); 
    }
)RULE_INT
    { 
    createLeafNode(grammarAccess.getTerminalExpressionAccess().getINTTerminalRuleCall_4_1(), null); 
    }
)
    |((
	{ 
	  /* */ 
	}
    { 
        temp=factory.create(grammarAccess.getTerminalExpressionAccess().getExpressionAction_5_0().getType().getClassifier());
        $current = temp; 
        temp = null;
        CompositeNode newNode = createCompositeNode(grammarAccess.getTerminalExpressionAccess().getExpressionAction_5_0(), currentNode.getParent());
    newNode.getChildren().add(currentNode);
    moveLookaheadInfo(currentNode, newNode);
    currentNode = newNode; 
        associateNodeWithAstElement(currentNode, $current); 
    }
)RULE_NEGATIVE_INTEGER
    { 
    createLeafNode(grammarAccess.getTerminalExpressionAccess().getNEGATIVE_INTEGERTerminalRuleCall_5_1(), null); 
    }
)
    |((
	{ 
	  /* */ 
	}
    { 
        temp=factory.create(grammarAccess.getTerminalExpressionAccess().getExpressionAction_6_0().getType().getClassifier());
        $current = temp; 
        temp = null;
        CompositeNode newNode = createCompositeNode(grammarAccess.getTerminalExpressionAccess().getExpressionAction_6_0(), currentNode.getParent());
    newNode.getChildren().add(currentNode);
    moveLookaheadInfo(currentNode, newNode);
    currentNode = newNode; 
        associateNodeWithAstElement(currentNode, $current); 
    }
)(
(
		lv_none_27_0=	'none' 
    {
        createLeafNode(grammarAccess.getTerminalExpressionAccess().getNoneNoneKeyword_6_1_0(), "none"); 
    }
 
	    {
	        if ($current==null) {
	            $current = factory.create(grammarAccess.getTerminalExpressionRule().getType().getClassifier());
	            associateNodeWithAstElement(currentNode, $current);
	        }
	        
	        try {
	       		set($current, "none", lv_none_27_0, "none", lastConsumedNode);
	        } catch (ValueConverterException vce) {
				handleValueConverterException(vce);
	        }
	    }

)
))
    |((
	{ 
	  /* */ 
	}
    { 
        temp=factory.create(grammarAccess.getTerminalExpressionAccess().getExpressionAction_7_0().getType().getClassifier());
        $current = temp; 
        temp = null;
        CompositeNode newNode = createCompositeNode(grammarAccess.getTerminalExpressionAccess().getExpressionAction_7_0(), currentNode.getParent());
    newNode.getChildren().add(currentNode);
    moveLookaheadInfo(currentNode, newNode);
    currentNode = newNode; 
        associateNodeWithAstElement(currentNode, $current); 
    }
)(
(
		lv_iden_29_0=	'iden' 
    {
        createLeafNode(grammarAccess.getTerminalExpressionAccess().getIdenIdenKeyword_7_1_0(), "iden"); 
    }
 
	    {
	        if ($current==null) {
	            $current = factory.create(grammarAccess.getTerminalExpressionRule().getType().getClassifier());
	            associateNodeWithAstElement(currentNode, $current);
	        }
	        
	        try {
	       		set($current, "iden", lv_iden_29_0, "iden", lastConsumedNode);
	        } catch (ValueConverterException vce) {
				handleValueConverterException(vce);
	        }
	    }

)
))
    |((
	{ 
	  /* */ 
	}
    { 
        temp=factory.create(grammarAccess.getTerminalExpressionAccess().getExpressionAction_8_0().getType().getClassifier());
        $current = temp; 
        temp = null;
        CompositeNode newNode = createCompositeNode(grammarAccess.getTerminalExpressionAccess().getExpressionAction_8_0(), currentNode.getParent());
    newNode.getChildren().add(currentNode);
    moveLookaheadInfo(currentNode, newNode);
    currentNode = newNode; 
        associateNodeWithAstElement(currentNode, $current); 
    }
)(
(
		lv_univ_31_0=	'univ' 
    {
        createLeafNode(grammarAccess.getTerminalExpressionAccess().getUnivUnivKeyword_8_1_0(), "univ"); 
    }
 
	    {
	        if ($current==null) {
	            $current = factory.create(grammarAccess.getTerminalExpressionRule().getType().getClassifier());
	            associateNodeWithAstElement(currentNode, $current);
	        }
	        
	        try {
	       		set($current, "univ", lv_univ_31_0, "univ", lastConsumedNode);
	        } catch (ValueConverterException vce) {
				handleValueConverterException(vce);
	        }
	    }

)
))
    |((
	{ 
	  /* */ 
	}
    { 
        temp=factory.create(grammarAccess.getTerminalExpressionAccess().getExpressionAction_9_0().getType().getClassifier());
        $current = temp; 
        temp = null;
        CompositeNode newNode = createCompositeNode(grammarAccess.getTerminalExpressionAccess().getExpressionAction_9_0(), currentNode.getParent());
    newNode.getChildren().add(currentNode);
    moveLookaheadInfo(currentNode, newNode);
    currentNode = newNode; 
        associateNodeWithAstElement(currentNode, $current); 
    }
)((
(
		lv_int_33_0=	'int' 
    {
        createLeafNode(grammarAccess.getTerminalExpressionAccess().getIntIntKeyword_9_1_0_0(), "int"); 
    }
 
	    {
	        if ($current==null) {
	            $current = factory.create(grammarAccess.getTerminalExpressionRule().getType().getClassifier());
	            associateNodeWithAstElement(currentNode, $current);
	        }
	        
	        try {
	       		set($current, "int", lv_int_33_0, "int", lastConsumedNode);
	        } catch (ValueConverterException vce) {
				handleValueConverterException(vce);
	        }
	    }

)
)(
(
		{ 
		  /* */ 
		}
		{
			if ($current==null) {
	            $current = factory.create(grammarAccess.getTerminalExpressionRule().getType().getClassifier());
	            associateNodeWithAstElement(currentNode, $current);
	        }
        }
	RULE_ID
	{
		createLeafNode(grammarAccess.getTerminalExpressionAccess().getNameRefReferencesNameCrossReference_9_1_1_0(), "nameRef"); 
	}

)
)?))
    |(
(
		lv_int_35_0=	'Int' 
    {
        createLeafNode(grammarAccess.getTerminalExpressionAccess().getIntIntKeyword_10_0(), "int"); 
    }
 
	    {
	        if ($current==null) {
	            $current = factory.create(grammarAccess.getTerminalExpressionRule().getType().getClassifier());
	            associateNodeWithAstElement(currentNode, $current);
	        }
	        
	        try {
	       		set($current, "int", lv_int_35_0, "Int", lastConsumedNode);
	        } catch (ValueConverterException vce) {
				handleValueConverterException(vce);
	        }
	    }

)
)
    |((
	{ 
	  /* */ 
	}
    { 
        temp=factory.create(grammarAccess.getTerminalExpressionAccess().getExpressionAction_11_0().getType().getClassifier());
        $current = temp; 
        temp = null;
        CompositeNode newNode = createCompositeNode(grammarAccess.getTerminalExpressionAccess().getExpressionAction_11_0(), currentNode.getParent());
    newNode.getChildren().add(currentNode);
    moveLookaheadInfo(currentNode, newNode);
    currentNode = newNode; 
        associateNodeWithAstElement(currentNode, $current); 
    }
)(
(
		lv_seq_37_0=	'seq/Int' 
    {
        createLeafNode(grammarAccess.getTerminalExpressionAccess().getSeqSeqIntKeyword_11_1_0(), "seq"); 
    }
 
	    {
	        if ($current==null) {
	            $current = factory.create(grammarAccess.getTerminalExpressionRule().getType().getClassifier());
	            associateNodeWithAstElement(currentNode, $current);
	        }
	        
	        try {
	       		set($current, "seq", lv_seq_37_0, "seq/Int", lastConsumedNode);
	        } catch (ValueConverterException vce) {
				handleValueConverterException(vce);
	        }
	    }

)
))
    |((
	{ 
	  /* */ 
	}
    { 
        temp=factory.create(grammarAccess.getTerminalExpressionAccess().getExpressionAction_12_0().getType().getClassifier());
        $current = temp; 
        temp = null;
        CompositeNode newNode = createCompositeNode(grammarAccess.getTerminalExpressionAccess().getExpressionAction_12_0(), currentNode.getParent());
    newNode.getChildren().add(currentNode);
    moveLookaheadInfo(currentNode, newNode);
    currentNode = newNode; 
        associateNodeWithAstElement(currentNode, $current); 
    }
)(
(
		lv_parO_39_0=	'(' 
    {
        createLeafNode(grammarAccess.getTerminalExpressionAccess().getParOLeftParenthesisKeyword_12_1_0(), "parO"); 
    }
 
	    {
	        if ($current==null) {
	            $current = factory.create(grammarAccess.getTerminalExpressionRule().getType().getClassifier());
	            associateNodeWithAstElement(currentNode, $current);
	        }
	        
	        try {
	       		set($current, "parO", lv_parO_39_0, "(", lastConsumedNode);
	        } catch (ValueConverterException vce) {
				handleValueConverterException(vce);
	        }
	    }

)
)(
(
		{ 
	        currentNode=createCompositeNode(grammarAccess.getTerminalExpressionAccess().getExprExpressionParserRuleCall_12_2_0(), currentNode); 
	    }
		lv_expr_40_0=ruleExpression		{
	        if ($current==null) {
	            $current = factory.create(grammarAccess.getTerminalExpressionRule().getType().getClassifier());
	            associateNodeWithAstElement(currentNode.getParent(), $current);
	        }
	        try {
	       		add(
	       			$current, 
	       			"expr",
	        		lv_expr_40_0, 
	        		"Expression", 
	        		currentNode);
	        } catch (ValueConverterException vce) {
				handleValueConverterException(vce);
	        }
	        currentNode = currentNode.getParent();
	    }

)
)(
(
		lv_parF_41_0=	')' 
    {
        createLeafNode(grammarAccess.getTerminalExpressionAccess().getParFRightParenthesisKeyword_12_3_0(), "parF"); 
    }
 
	    {
	        if ($current==null) {
	            $current = factory.create(grammarAccess.getTerminalExpressionRule().getType().getClassifier());
	            associateNodeWithAstElement(currentNode, $current);
	        }
	        
	        try {
	       		set($current, "parF", lv_parF_41_0, ")", lastConsumedNode);
	        } catch (ValueConverterException vce) {
				handleValueConverterException(vce);
	        }
	    }

)
))
    |((
	{ 
	  /* */ 
	}
    { 
        temp=factory.create(grammarAccess.getTerminalExpressionAccess().getExpressionAction_13_0().getType().getClassifier());
        $current = temp; 
        temp = null;
        CompositeNode newNode = createCompositeNode(grammarAccess.getTerminalExpressionAccess().getExpressionAction_13_0(), currentNode.getParent());
    newNode.getChildren().add(currentNode);
    moveLookaheadInfo(currentNode, newNode);
    currentNode = newNode; 
        associateNodeWithAstElement(currentNode, $current); 
    }
)(	'@' 
    {
        createLeafNode(grammarAccess.getTerminalExpressionAccess().getCommercialAtKeyword_13_1(), null); 
    }
)?(	'int' 
    {
        createLeafNode(grammarAccess.getTerminalExpressionAccess().getIntKeyword_13_2(), null); 
    }
)?(((
(
		{ 
	        currentNode=createCompositeNode(grammarAccess.getTerminalExpressionAccess().getAsnameAsNameParserRuleCall_13_3_0_0_0(), currentNode); 
	    }
		lv_asname_45_0=ruleAsName		{
	        if ($current==null) {
	            $current = factory.create(grammarAccess.getTerminalExpressionRule().getType().getClassifier());
	            associateNodeWithAstElement(currentNode.getParent(), $current);
	        }
	        try {
	       		set(
	       			$current, 
	       			"asname",
	        		lv_asname_45_0, 
	        		"AsName", 
	        		currentNode);
	        } catch (ValueConverterException vce) {
				handleValueConverterException(vce);
	        }
	        currentNode = currentNode.getParent();
	    }

)
)
    |	'fun' 
    {
        createLeafNode(grammarAccess.getTerminalExpressionAccess().getFunKeyword_13_3_0_1(), null); 
    }

    |	'pred' 
    {
        createLeafNode(grammarAccess.getTerminalExpressionAccess().getPredKeyword_13_3_0_2(), null); 
    }

    |	'this' 
    {
        createLeafNode(grammarAccess.getTerminalExpressionAccess().getThisKeyword_13_3_0_3(), null); 
    }
)	'/' 
    {
        createLeafNode(grammarAccess.getTerminalExpressionAccess().getSolidusKeyword_13_3_1(), null); 
    }
)?((
(
		{ 
		  /* */ 
		}
		{
			if ($current==null) {
	            $current = factory.create(grammarAccess.getTerminalExpressionRule().getType().getClassifier());
	            associateNodeWithAstElement(currentNode, $current);
	        }
        }
	RULE_ID
	{
		createLeafNode(grammarAccess.getTerminalExpressionAccess().getNameRefReferencesNameCrossReference_13_4_0_0(), "nameRef"); 
	}

)
)
    |	'this' 
    {
        createLeafNode(grammarAccess.getTerminalExpressionAccess().getThisKeyword_13_4_1(), null); 
    }
))
    |((
	{ 
	  /* */ 
	}
    { 
        temp=factory.create(grammarAccess.getTerminalExpressionAccess().getExpressionAction_14_0().getType().getClassifier());
        $current = temp; 
        temp = null;
        CompositeNode newNode = createCompositeNode(grammarAccess.getTerminalExpressionAccess().getExpressionAction_14_0(), currentNode.getParent());
    newNode.getChildren().add(currentNode);
    moveLookaheadInfo(currentNode, newNode);
    currentNode = newNode; 
        associateNodeWithAstElement(currentNode, $current); 
    }
)(
(
		{ 
	        currentNode=createCompositeNode(grammarAccess.getTerminalExpressionAccess().getBlockBlockParserRuleCall_14_1_0(), currentNode); 
	    }
		lv_block_53_0=ruleBlock		{
	        if ($current==null) {
	            $current = factory.create(grammarAccess.getTerminalExpressionRule().getType().getClassifier());
	            associateNodeWithAstElement(currentNode.getParent(), $current);
	        }
	        try {
	       		add(
	       			$current, 
	       			"block",
	        		lv_block_53_0, 
	        		"Block", 
	        		currentNode);
	        } catch (ValueConverterException vce) {
				handleValueConverterException(vce);
	        }
	        currentNode = currentNode.getParent();
	    }

)
))
    |((
	{ 
	  /* */ 
	}
    { 
        temp=factory.create(grammarAccess.getTerminalExpressionAccess().getExpressionAction_15_0().getType().getClassifier());
        $current = temp; 
        temp = null;
        CompositeNode newNode = createCompositeNode(grammarAccess.getTerminalExpressionAccess().getExpressionAction_15_0(), currentNode.getParent());
    newNode.getChildren().add(currentNode);
    moveLookaheadInfo(currentNode, newNode);
    currentNode = newNode; 
        associateNodeWithAstElement(currentNode, $current); 
    }
)(
(
		{ 
	        currentNode=createCompositeNode(grammarAccess.getTerminalExpressionAccess().getLeftCurlyBracketLeftCurlyBracketParserRuleCall_15_1_0(), currentNode); 
	    }
		lv_leftCurlyBracket_55_0=ruleLeftCurlyBracket		{
	        if ($current==null) {
	            $current = factory.create(grammarAccess.getTerminalExpressionRule().getType().getClassifier());
	            associateNodeWithAstElement(currentNode.getParent(), $current);
	        }
	        try {
	       		set(
	       			$current, 
	       			"leftCurlyBracket",
	        		lv_leftCurlyBracket_55_0, 
	        		"LeftCurlyBracket", 
	        		currentNode);
	        } catch (ValueConverterException vce) {
				handleValueConverterException(vce);
	        }
	        currentNode = currentNode.getParent();
	    }

)
)(
(
		{ 
	        currentNode=createCompositeNode(grammarAccess.getTerminalExpressionAccess().getDeclDeclParserRuleCall_15_2_0(), currentNode); 
	    }
		lv_decl_56_0=ruleDecl		{
	        if ($current==null) {
	            $current = factory.create(grammarAccess.getTerminalExpressionRule().getType().getClassifier());
	            associateNodeWithAstElement(currentNode.getParent(), $current);
	        }
	        try {
	       		add(
	       			$current, 
	       			"decl",
	        		lv_decl_56_0, 
	        		"Decl", 
	        		currentNode);
	        } catch (ValueConverterException vce) {
				handleValueConverterException(vce);
	        }
	        currentNode = currentNode.getParent();
	    }

)
)((
(
		{ 
	        currentNode=createCompositeNode(grammarAccess.getTerminalExpressionAccess().getCommaCommaParserRuleCall_15_3_0_0(), currentNode); 
	    }
		lv_comma_57_0=ruleComma		{
	        if ($current==null) {
	            $current = factory.create(grammarAccess.getTerminalExpressionRule().getType().getClassifier());
	            associateNodeWithAstElement(currentNode.getParent(), $current);
	        }
	        try {
	       		add(
	       			$current, 
	       			"comma",
	        		lv_comma_57_0, 
	        		"Comma", 
	        		currentNode);
	        } catch (ValueConverterException vce) {
				handleValueConverterException(vce);
	        }
	        currentNode = currentNode.getParent();
	    }

)
)(
(
		{ 
	        currentNode=createCompositeNode(grammarAccess.getTerminalExpressionAccess().getDeclDeclParserRuleCall_15_3_1_0(), currentNode); 
	    }
		lv_decl_58_0=ruleDecl		{
	        if ($current==null) {
	            $current = factory.create(grammarAccess.getTerminalExpressionRule().getType().getClassifier());
	            associateNodeWithAstElement(currentNode.getParent(), $current);
	        }
	        try {
	       		add(
	       			$current, 
	       			"decl",
	        		lv_decl_58_0, 
	        		"Decl", 
	        		currentNode);
	        } catch (ValueConverterException vce) {
				handleValueConverterException(vce);
	        }
	        currentNode = currentNode.getParent();
	    }

)
))*(
(
		{ 
	        currentNode=createCompositeNode(grammarAccess.getTerminalExpressionAccess().getBlockOrBarBlockOrBarParserRuleCall_15_4_0(), currentNode); 
	    }
		lv_blockOrBar_59_0=ruleBlockOrBar		{
	        if ($current==null) {
	            $current = factory.create(grammarAccess.getTerminalExpressionRule().getType().getClassifier());
	            associateNodeWithAstElement(currentNode.getParent(), $current);
	        }
	        try {
	       		add(
	       			$current, 
	       			"blockOrBar",
	        		lv_blockOrBar_59_0, 
	        		"BlockOrBar", 
	        		currentNode);
	        } catch (ValueConverterException vce) {
				handleValueConverterException(vce);
	        }
	        currentNode = currentNode.getParent();
	    }

)
)(
(
		{ 
	        currentNode=createCompositeNode(grammarAccess.getTerminalExpressionAccess().getRightCurlyBracketRightCurlyBracketParserRuleCall_15_5_0(), currentNode); 
	    }
		lv_rightCurlyBracket_60_0=ruleRightCurlyBracket		{
	        if ($current==null) {
	            $current = factory.create(grammarAccess.getTerminalExpressionRule().getType().getClassifier());
	            associateNodeWithAstElement(currentNode.getParent(), $current);
	        }
	        try {
	       		set(
	       			$current, 
	       			"rightCurlyBracket",
	        		lv_rightCurlyBracket_60_0, 
	        		"RightCurlyBracket", 
	        		currentNode);
	        } catch (ValueConverterException vce) {
				handleValueConverterException(vce);
	        }
	        currentNode = currentNode.getParent();
	    }

)
)))
;





// Entry rule entryRuleDecl
entryRuleDecl returns [EObject current=null] 
	:
	{ currentNode = createCompositeNode(grammarAccess.getDeclRule(), currentNode); }
	 iv_ruleDecl=ruleDecl 
	 { $current=$iv_ruleDecl.current; } 
	 EOF 
;

// Rule Decl
ruleDecl returns [EObject current=null] 
    @init { EObject temp=null; setCurrentLookahead(); resetLookahead(); 
    }
    @after { resetLookahead(); 
    	lastConsumedNode = currentNode;
    }:
((	'private' 
    {
        createLeafNode(grammarAccess.getDeclAccess().getPrivateKeyword_0(), null); 
    }
)?(	'disj' 
    {
        createLeafNode(grammarAccess.getDeclAccess().getDisjKeyword_1(), null); 
    }
)?(
(
		{ 
	        currentNode=createCompositeNode(grammarAccess.getDeclAccess().getPropertyNamePropertyNameParserRuleCall_2_0(), currentNode); 
	    }
		lv_propertyName_2_0=rulePropertyName		{
	        if ($current==null) {
	            $current = factory.create(grammarAccess.getDeclRule().getType().getClassifier());
	            associateNodeWithAstElement(currentNode.getParent(), $current);
	        }
	        try {
	       		add(
	       			$current, 
	       			"propertyName",
	        		lv_propertyName_2_0, 
	        		"PropertyName", 
	        		currentNode);
	        } catch (ValueConverterException vce) {
				handleValueConverterException(vce);
	        }
	        currentNode = currentNode.getParent();
	    }

)
)((
(
		{ 
	        currentNode=createCompositeNode(grammarAccess.getDeclAccess().getCommaCommaParserRuleCall_3_0_0(), currentNode); 
	    }
		lv_comma_3_0=ruleComma		{
	        if ($current==null) {
	            $current = factory.create(grammarAccess.getDeclRule().getType().getClassifier());
	            associateNodeWithAstElement(currentNode.getParent(), $current);
	        }
	        try {
	       		add(
	       			$current, 
	       			"comma",
	        		lv_comma_3_0, 
	        		"Comma", 
	        		currentNode);
	        } catch (ValueConverterException vce) {
				handleValueConverterException(vce);
	        }
	        currentNode = currentNode.getParent();
	    }

)
)(
(
		{ 
	        currentNode=createCompositeNode(grammarAccess.getDeclAccess().getPropertyNamePropertyNameParserRuleCall_3_1_0(), currentNode); 
	    }
		lv_propertyName_4_0=rulePropertyName		{
	        if ($current==null) {
	            $current = factory.create(grammarAccess.getDeclRule().getType().getClassifier());
	            associateNodeWithAstElement(currentNode.getParent(), $current);
	        }
	        try {
	       		add(
	       			$current, 
	       			"propertyName",
	        		lv_propertyName_4_0, 
	        		"PropertyName", 
	        		currentNode);
	        } catch (ValueConverterException vce) {
				handleValueConverterException(vce);
	        }
	        currentNode = currentNode.getParent();
	    }

)
))*(
(
		{ 
	        currentNode=createCompositeNode(grammarAccess.getDeclAccess().getColonColonParserRuleCall_4_0(), currentNode); 
	    }
		lv_colon_5_0=ruleColon		{
	        if ($current==null) {
	            $current = factory.create(grammarAccess.getDeclRule().getType().getClassifier());
	            associateNodeWithAstElement(currentNode.getParent(), $current);
	        }
	        try {
	       		set(
	       			$current, 
	       			"colon",
	        		lv_colon_5_0, 
	        		"Colon", 
	        		currentNode);
	        } catch (ValueConverterException vce) {
				handleValueConverterException(vce);
	        }
	        currentNode = currentNode.getParent();
	    }

)
)(	'disj' 
    {
        createLeafNode(grammarAccess.getDeclAccess().getDisjKeyword_5(), null); 
    }
)?(
(
		{ 
	        currentNode=createCompositeNode(grammarAccess.getDeclAccess().getExprExpressionParserRuleCall_6_0(), currentNode); 
	    }
		lv_expr_7_0=ruleExpression		{
	        if ($current==null) {
	            $current = factory.create(grammarAccess.getDeclRule().getType().getClassifier());
	            associateNodeWithAstElement(currentNode.getParent(), $current);
	        }
	        try {
	       		set(
	       			$current, 
	       			"expr",
	        		lv_expr_7_0, 
	        		"Expression", 
	        		currentNode);
	        } catch (ValueConverterException vce) {
				handleValueConverterException(vce);
	        }
	        currentNode = currentNode.getParent();
	    }

)
))
;





// Entry rule entryRuleLetDecl
entryRuleLetDecl returns [EObject current=null] 
	:
	{ currentNode = createCompositeNode(grammarAccess.getLetDeclRule(), currentNode); }
	 iv_ruleLetDecl=ruleLetDecl 
	 { $current=$iv_ruleLetDecl.current; } 
	 EOF 
;

// Rule LetDecl
ruleLetDecl returns [EObject current=null] 
    @init { EObject temp=null; setCurrentLookahead(); resetLookahead(); 
    }
    @after { resetLookahead(); 
    	lastConsumedNode = currentNode;
    }:
((
(
		{ 
	        currentNode=createCompositeNode(grammarAccess.getLetDeclAccess().getNameExpressionPropertyNameParserRuleCall_0_0(), currentNode); 
	    }
		lv_nameExpression_0_0=rulePropertyName		{
	        if ($current==null) {
	            $current = factory.create(grammarAccess.getLetDeclRule().getType().getClassifier());
	            associateNodeWithAstElement(currentNode.getParent(), $current);
	        }
	        try {
	       		set(
	       			$current, 
	       			"nameExpression",
	        		lv_nameExpression_0_0, 
	        		"PropertyName", 
	        		currentNode);
	        } catch (ValueConverterException vce) {
				handleValueConverterException(vce);
	        }
	        currentNode = currentNode.getParent();
	    }

)
)	'=' 
    {
        createLeafNode(grammarAccess.getLetDeclAccess().getEqualsSignKeyword_1(), null); 
    }
(
(
		{ 
	        currentNode=createCompositeNode(grammarAccess.getLetDeclAccess().getExprExpressionParserRuleCall_2_0(), currentNode); 
	    }
		lv_expr_2_0=ruleExpression		{
	        if ($current==null) {
	            $current = factory.create(grammarAccess.getLetDeclRule().getType().getClassifier());
	            associateNodeWithAstElement(currentNode.getParent(), $current);
	        }
	        try {
	       		set(
	       			$current, 
	       			"expr",
	        		lv_expr_2_0, 
	        		"Expression", 
	        		currentNode);
	        } catch (ValueConverterException vce) {
				handleValueConverterException(vce);
	        }
	        currentNode = currentNode.getParent();
	    }

)
))
;





// Entry rule entryRuleQuant
entryRuleQuant returns [String current=null] 
	:
	{ currentNode = createCompositeNode(grammarAccess.getQuantRule(), currentNode); } 
	 iv_ruleQuant=ruleQuant 
	 { $current=$iv_ruleQuant.current.getText(); }  
	 EOF 
;

// Rule Quant
ruleQuant returns [AntlrDatatypeRuleToken current=new AntlrDatatypeRuleToken()] 
    @init { setCurrentLookahead(); resetLookahead(); 
    }
    @after { resetLookahead(); 
	    lastConsumedNode = currentNode;
    }:
(
	kw='all' 
    {
        $current.merge(kw);
        createLeafNode(grammarAccess.getQuantAccess().getAllKeyword_0(), null); 
    }

    |
	kw='sum' 
    {
        $current.merge(kw);
        createLeafNode(grammarAccess.getQuantAccess().getSumKeyword_1(), null); 
    }
)
    ;





// Entry rule entryRuleBinOp
entryRuleBinOp returns [EObject current=null] 
	:
	{ currentNode = createCompositeNode(grammarAccess.getBinOpRule(), currentNode); }
	 iv_ruleBinOp=ruleBinOp 
	 { $current=$iv_ruleBinOp.current; } 
	 EOF 
;

// Rule BinOp
ruleBinOp returns [EObject current=null] 
    @init { EObject temp=null; setCurrentLookahead(); resetLookahead(); 
    }
    @after { resetLookahead(); 
    	lastConsumedNode = currentNode;
    }:
((
	{ 
	  /* */ 
	}
    { 
        temp=factory.create(grammarAccess.getBinOpAccess().getBinOpAction_0().getType().getClassifier());
        $current = temp; 
        temp = null;
        CompositeNode newNode = createCompositeNode(grammarAccess.getBinOpAccess().getBinOpAction_0(), currentNode.getParent());
    newNode.getChildren().add(currentNode);
    moveLookaheadInfo(currentNode, newNode);
    currentNode = newNode; 
        associateNodeWithAstElement(currentNode, $current); 
    }
)(	'||' 
    {
        createLeafNode(grammarAccess.getBinOpAccess().getVerticalLineVerticalLineKeyword_1_0(), null); 
    }

    |	'or' 
    {
        createLeafNode(grammarAccess.getBinOpAccess().getOrKeyword_1_1(), null); 
    }

    |	'&&' 
    {
        createLeafNode(grammarAccess.getBinOpAccess().getAmpersandAmpersandKeyword_1_2(), null); 
    }

    |	'and' 
    {
        createLeafNode(grammarAccess.getBinOpAccess().getAndKeyword_1_3(), null); 
    }

    |	'&' 
    {
        createLeafNode(grammarAccess.getBinOpAccess().getAmpersandKeyword_1_4(), null); 
    }

    |	'<=>' 
    {
        createLeafNode(grammarAccess.getBinOpAccess().getLessThanSignEqualsSignGreaterThanSignKeyword_1_5(), null); 
    }

    |	'iff' 
    {
        createLeafNode(grammarAccess.getBinOpAccess().getIffKeyword_1_6(), null); 
    }

    |	'+' 
    {
        createLeafNode(grammarAccess.getBinOpAccess().getPlusSignKeyword_1_7(), null); 
    }

    |	'-' 
    {
        createLeafNode(grammarAccess.getBinOpAccess().getHyphenMinusKeyword_1_8(), null); 
    }

    |	'++' 
    {
        createLeafNode(grammarAccess.getBinOpAccess().getPlusSignPlusSignKeyword_1_9(), null); 
    }

    |	'<:' 
    {
        createLeafNode(grammarAccess.getBinOpAccess().getLessThanSignColonKeyword_1_10(), null); 
    }

    |	':>' 
    {
        createLeafNode(grammarAccess.getBinOpAccess().getColonGreaterThanSignKeyword_1_11(), null); 
    }

    |(
(
		{ 
	        currentNode=createCompositeNode(grammarAccess.getBinOpAccess().getDotDotParserRuleCall_1_12_0(), currentNode); 
	    }
		lv_dot_13_0=ruleDot		{
	        if ($current==null) {
	            $current = factory.create(grammarAccess.getBinOpRule().getType().getClassifier());
	            associateNodeWithAstElement(currentNode.getParent(), $current);
	        }
	        try {
	       		set(
	       			$current, 
	       			"dot",
	        		lv_dot_13_0, 
	        		"Dot", 
	        		currentNode);
	        } catch (ValueConverterException vce) {
				handleValueConverterException(vce);
	        }
	        currentNode = currentNode.getParent();
	    }

)
)
    |	'<<' 
    {
        createLeafNode(grammarAccess.getBinOpAccess().getLessThanSignLessThanSignKeyword_1_13(), null); 
    }

    |	'>>' 
    {
        createLeafNode(grammarAccess.getBinOpAccess().getGreaterThanSignGreaterThanSignKeyword_1_14(), null); 
    }

    |	'>>>' 
    {
        createLeafNode(grammarAccess.getBinOpAccess().getGreaterThanSignGreaterThanSignGreaterThanSignKeyword_1_15(), null); 
    }
))
;





// Entry rule entryRuleUnOp
entryRuleUnOp returns [EObject current=null] 
	:
	{ currentNode = createCompositeNode(grammarAccess.getUnOpRule(), currentNode); }
	 iv_ruleUnOp=ruleUnOp 
	 { $current=$iv_ruleUnOp.current; } 
	 EOF 
;

// Rule UnOp
ruleUnOp returns [EObject current=null] 
    @init { EObject temp=null; setCurrentLookahead(); resetLookahead(); 
    }
    @after { resetLookahead(); 
    	lastConsumedNode = currentNode;
    }:
((
	{ 
	  /* */ 
	}
    { 
        temp=factory.create(grammarAccess.getUnOpAccess().getUnOpAction_0().getType().getClassifier());
        $current = temp; 
        temp = null;
        CompositeNode newNode = createCompositeNode(grammarAccess.getUnOpAccess().getUnOpAction_0(), currentNode.getParent());
    newNode.getChildren().add(currentNode);
    moveLookaheadInfo(currentNode, newNode);
    currentNode = newNode; 
        associateNodeWithAstElement(currentNode, $current); 
    }
)(	'not' 
    {
        createLeafNode(grammarAccess.getUnOpAccess().getNotKeyword_1_0(), null); 
    }

    |	'set' 
    {
        createLeafNode(grammarAccess.getUnOpAccess().getSetKeyword_1_1(), null); 
    }

    |	'seq' 
    {
        createLeafNode(grammarAccess.getUnOpAccess().getSeqKeyword_1_2(), null); 
    }

    |(
(
(
		lv_op_4_1=	'!' 
    {
        createLeafNode(grammarAccess.getUnOpAccess().getOpExclamationMarkKeyword_1_3_0_0(), "op"); 
    }
 
	    {
	        if ($current==null) {
	            $current = factory.create(grammarAccess.getUnOpRule().getType().getClassifier());
	            associateNodeWithAstElement(currentNode, $current);
	        }
	        
	        try {
	       		set($current, "op", lv_op_4_1, null, lastConsumedNode);
	        } catch (ValueConverterException vce) {
				handleValueConverterException(vce);
	        }
	    }

    |		lv_op_4_2=	'#' 
    {
        createLeafNode(grammarAccess.getUnOpAccess().getOpNumberSignKeyword_1_3_0_1(), "op"); 
    }
 
	    {
	        if ($current==null) {
	            $current = factory.create(grammarAccess.getUnOpRule().getType().getClassifier());
	            associateNodeWithAstElement(currentNode, $current);
	        }
	        
	        try {
	       		set($current, "op", lv_op_4_2, null, lastConsumedNode);
	        } catch (ValueConverterException vce) {
				handleValueConverterException(vce);
	        }
	    }

    |		lv_op_4_3=	'~' 
    {
        createLeafNode(grammarAccess.getUnOpAccess().getOpTildeKeyword_1_3_0_2(), "op"); 
    }
 
	    {
	        if ($current==null) {
	            $current = factory.create(grammarAccess.getUnOpRule().getType().getClassifier());
	            associateNodeWithAstElement(currentNode, $current);
	        }
	        
	        try {
	       		set($current, "op", lv_op_4_3, null, lastConsumedNode);
	        } catch (ValueConverterException vce) {
				handleValueConverterException(vce);
	        }
	    }

    |		lv_op_4_4=	'*' 
    {
        createLeafNode(grammarAccess.getUnOpAccess().getOpAsteriskKeyword_1_3_0_3(), "op"); 
    }
 
	    {
	        if ($current==null) {
	            $current = factory.create(grammarAccess.getUnOpRule().getType().getClassifier());
	            associateNodeWithAstElement(currentNode, $current);
	        }
	        
	        try {
	       		set($current, "op", lv_op_4_4, null, lastConsumedNode);
	        } catch (ValueConverterException vce) {
				handleValueConverterException(vce);
	        }
	    }

    |		lv_op_4_5=	'^' 
    {
        createLeafNode(grammarAccess.getUnOpAccess().getOpCircumflexAccentKeyword_1_3_0_4(), "op"); 
    }
 
	    {
	        if ($current==null) {
	            $current = factory.create(grammarAccess.getUnOpRule().getType().getClassifier());
	            associateNodeWithAstElement(currentNode, $current);
	        }
	        
	        try {
	       		set($current, "op", lv_op_4_5, null, lastConsumedNode);
	        } catch (ValueConverterException vce) {
				handleValueConverterException(vce);
	        }
	    }

)

)
)))
;





// Entry rule entryRuleCommonQuantUnOp
entryRuleCommonQuantUnOp returns [EObject current=null] 
	:
	{ currentNode = createCompositeNode(grammarAccess.getCommonQuantUnOpRule(), currentNode); }
	 iv_ruleCommonQuantUnOp=ruleCommonQuantUnOp 
	 { $current=$iv_ruleCommonQuantUnOp.current; } 
	 EOF 
;

// Rule CommonQuantUnOp
ruleCommonQuantUnOp returns [EObject current=null] 
    @init { EObject temp=null; setCurrentLookahead(); resetLookahead(); 
    }
    @after { resetLookahead(); 
    	lastConsumedNode = currentNode;
    }:
((
	{ 
	  /* */ 
	}
    { 
        temp=factory.create(grammarAccess.getCommonQuantUnOpAccess().getCommonQuantUnOpAction_0().getType().getClassifier());
        $current = temp; 
        temp = null;
        CompositeNode newNode = createCompositeNode(grammarAccess.getCommonQuantUnOpAccess().getCommonQuantUnOpAction_0(), currentNode.getParent());
    newNode.getChildren().add(currentNode);
    moveLookaheadInfo(currentNode, newNode);
    currentNode = newNode; 
        associateNodeWithAstElement(currentNode, $current); 
    }
)(	'no' 
    {
        createLeafNode(grammarAccess.getCommonQuantUnOpAccess().getNoKeyword_1_0(), null); 
    }

    |	'some' 
    {
        createLeafNode(grammarAccess.getCommonQuantUnOpAccess().getSomeKeyword_1_1(), null); 
    }

    |	'lone' 
    {
        createLeafNode(grammarAccess.getCommonQuantUnOpAccess().getLoneKeyword_1_2(), null); 
    }

    |	'one' 
    {
        createLeafNode(grammarAccess.getCommonQuantUnOpAccess().getOneKeyword_1_3(), null); 
    }
))
;





// Entry rule entryRuleCompareOp
entryRuleCompareOp returns [String current=null] 
	:
	{ currentNode = createCompositeNode(grammarAccess.getCompareOpRule(), currentNode); } 
	 iv_ruleCompareOp=ruleCompareOp 
	 { $current=$iv_ruleCompareOp.current.getText(); }  
	 EOF 
;

// Rule CompareOp
ruleCompareOp returns [AntlrDatatypeRuleToken current=new AntlrDatatypeRuleToken()] 
    @init { setCurrentLookahead(); resetLookahead(); 
    }
    @after { resetLookahead(); 
	    lastConsumedNode = currentNode;
    }:
(
	kw='=' 
    {
        $current.merge(kw);
        createLeafNode(grammarAccess.getCompareOpAccess().getEqualsSignKeyword_0(), null); 
    }

    |
	kw='in' 
    {
        $current.merge(kw);
        createLeafNode(grammarAccess.getCompareOpAccess().getInKeyword_1(), null); 
    }

    |
	kw='<' 
    {
        $current.merge(kw);
        createLeafNode(grammarAccess.getCompareOpAccess().getLessThanSignKeyword_2(), null); 
    }

    |
	kw='>' 
    {
        $current.merge(kw);
        createLeafNode(grammarAccess.getCompareOpAccess().getGreaterThanSignKeyword_3(), null); 
    }

    |
	kw='=<' 
    {
        $current.merge(kw);
        createLeafNode(grammarAccess.getCompareOpAccess().getEqualsSignLessThanSignKeyword_4(), null); 
    }

    |
	kw='<=' 
    {
        $current.merge(kw);
        createLeafNode(grammarAccess.getCompareOpAccess().getLessThanSignEqualsSignKeyword_5(), null); 
    }

    |
	kw='>=' 
    {
        $current.merge(kw);
        createLeafNode(grammarAccess.getCompareOpAccess().getGreaterThanSignEqualsSignKeyword_6(), null); 
    }
)
    ;





// Entry rule entryRuleArrowOp
entryRuleArrowOp returns [EObject current=null] 
	:
	{ currentNode = createCompositeNode(grammarAccess.getArrowOpRule(), currentNode); }
	 iv_ruleArrowOp=ruleArrowOp 
	 { $current=$iv_ruleArrowOp.current; } 
	 EOF 
;

// Rule ArrowOp
ruleArrowOp returns [EObject current=null] 
    @init { EObject temp=null; setCurrentLookahead(); resetLookahead(); 
    }
    @after { resetLookahead(); 
    	lastConsumedNode = currentNode;
    }:
((	'some' 
    {
        createLeafNode(grammarAccess.getArrowOpAccess().getSomeKeyword_0_0(), null); 
    }

    |	'one' 
    {
        createLeafNode(grammarAccess.getArrowOpAccess().getOneKeyword_0_1(), null); 
    }

    |	'lone' 
    {
        createLeafNode(grammarAccess.getArrowOpAccess().getLoneKeyword_0_2(), null); 
    }

    |	'set' 
    {
        createLeafNode(grammarAccess.getArrowOpAccess().getSetKeyword_0_3(), null); 
    }
)?(
(
		lv_arrow_4_0=	'->' 
    {
        createLeafNode(grammarAccess.getArrowOpAccess().getArrowHyphenMinusGreaterThanSignKeyword_1_0(), "arrow"); 
    }
 
	    {
	        if ($current==null) {
	            $current = factory.create(grammarAccess.getArrowOpRule().getType().getClassifier());
	            associateNodeWithAstElement(currentNode, $current);
	        }
	        
	        try {
	       		set($current, "arrow", lv_arrow_4_0, "->", lastConsumedNode);
	        } catch (ValueConverterException vce) {
				handleValueConverterException(vce);
	        }
	    }

)
))
;





// Entry rule entryRuleBlock
entryRuleBlock returns [EObject current=null] 
	:
	{ currentNode = createCompositeNode(grammarAccess.getBlockRule(), currentNode); }
	 iv_ruleBlock=ruleBlock 
	 { $current=$iv_ruleBlock.current; } 
	 EOF 
;

// Rule Block
ruleBlock returns [EObject current=null] 
    @init { EObject temp=null; setCurrentLookahead(); resetLookahead(); 
    }
    @after { resetLookahead(); 
    	lastConsumedNode = currentNode;
    }:
((
(
		{ 
	        currentNode=createCompositeNode(grammarAccess.getBlockAccess().getLeftCLeftCurlyBracketParserRuleCall_0_0(), currentNode); 
	    }
		lv_leftC_0_0=ruleLeftCurlyBracket		{
	        if ($current==null) {
	            $current = factory.create(grammarAccess.getBlockRule().getType().getClassifier());
	            associateNodeWithAstElement(currentNode.getParent(), $current);
	        }
	        try {
	       		set(
	       			$current, 
	       			"leftC",
	        		lv_leftC_0_0, 
	        		"LeftCurlyBracket", 
	        		currentNode);
	        } catch (ValueConverterException vce) {
				handleValueConverterException(vce);
	        }
	        currentNode = currentNode.getParent();
	    }

)
)(
(
		{ 
	        currentNode=createCompositeNode(grammarAccess.getBlockAccess().getExprExpressionParserRuleCall_1_0(), currentNode); 
	    }
		lv_expr_1_0=ruleExpression		{
	        if ($current==null) {
	            $current = factory.create(grammarAccess.getBlockRule().getType().getClassifier());
	            associateNodeWithAstElement(currentNode.getParent(), $current);
	        }
	        try {
	       		add(
	       			$current, 
	       			"expr",
	        		lv_expr_1_0, 
	        		"Expression", 
	        		currentNode);
	        } catch (ValueConverterException vce) {
				handleValueConverterException(vce);
	        }
	        currentNode = currentNode.getParent();
	    }

)
)*(
(
		{ 
	        currentNode=createCompositeNode(grammarAccess.getBlockAccess().getRightCRightCurlyBracketParserRuleCall_2_0(), currentNode); 
	    }
		lv_rightC_2_0=ruleRightCurlyBracket		{
	        if ($current==null) {
	            $current = factory.create(grammarAccess.getBlockRule().getType().getClassifier());
	            associateNodeWithAstElement(currentNode.getParent(), $current);
	        }
	        try {
	       		set(
	       			$current, 
	       			"rightC",
	        		lv_rightC_2_0, 
	        		"RightCurlyBracket", 
	        		currentNode);
	        } catch (ValueConverterException vce) {
				handleValueConverterException(vce);
	        }
	        currentNode = currentNode.getParent();
	    }

)
))
;





// Entry rule entryRuleBlockOrBar
entryRuleBlockOrBar returns [EObject current=null] 
	:
	{ currentNode = createCompositeNode(grammarAccess.getBlockOrBarRule(), currentNode); }
	 iv_ruleBlockOrBar=ruleBlockOrBar 
	 { $current=$iv_ruleBlockOrBar.current; } 
	 EOF 
;

// Rule BlockOrBar
ruleBlockOrBar returns [EObject current=null] 
    @init { EObject temp=null; setCurrentLookahead(); resetLookahead(); 
    }
    @after { resetLookahead(); 
    	lastConsumedNode = currentNode;
    }:
((
(
		{ 
	        currentNode=createCompositeNode(grammarAccess.getBlockOrBarAccess().getBlockBlockParserRuleCall_0_0(), currentNode); 
	    }
		lv_block_0_0=ruleBlock		{
	        if ($current==null) {
	            $current = factory.create(grammarAccess.getBlockOrBarRule().getType().getClassifier());
	            associateNodeWithAstElement(currentNode.getParent(), $current);
	        }
	        try {
	       		set(
	       			$current, 
	       			"block",
	        		lv_block_0_0, 
	        		"Block", 
	        		currentNode);
	        } catch (ValueConverterException vce) {
				handleValueConverterException(vce);
	        }
	        currentNode = currentNode.getParent();
	    }

)
)
    |(	'|' 
    {
        createLeafNode(grammarAccess.getBlockOrBarAccess().getVerticalLineKeyword_1_0(), null); 
    }
(
(
		{ 
	        currentNode=createCompositeNode(grammarAccess.getBlockOrBarAccess().getExprExpressionParserRuleCall_1_1_0(), currentNode); 
	    }
		lv_expr_2_0=ruleExpression		{
	        if ($current==null) {
	            $current = factory.create(grammarAccess.getBlockOrBarRule().getType().getClassifier());
	            associateNodeWithAstElement(currentNode.getParent(), $current);
	        }
	        try {
	       		set(
	       			$current, 
	       			"expr",
	        		lv_expr_2_0, 
	        		"Expression", 
	        		currentNode);
	        } catch (ValueConverterException vce) {
				handleValueConverterException(vce);
	        }
	        currentNode = currentNode.getParent();
	    }

)
)))
;





// Entry rule entryRuleOpenName
entryRuleOpenName returns [EObject current=null] 
	:
	{ currentNode = createCompositeNode(grammarAccess.getOpenNameRule(), currentNode); }
	 iv_ruleOpenName=ruleOpenName 
	 { $current=$iv_ruleOpenName.current; } 
	 EOF 
;

// Rule OpenName
ruleOpenName returns [EObject current=null] 
    @init { EObject temp=null; setCurrentLookahead(); resetLookahead(); 
    }
    @after { resetLookahead(); 
    	lastConsumedNode = currentNode;
    }:
(	'open' 
    {
        createLeafNode(grammarAccess.getOpenNameAccess().getOpenKeyword_0(), null); 
    }
(
(
		{ 
	        currentNode=createCompositeNode(grammarAccess.getOpenNameAccess().getImportURINameParserRuleCall_1_0(), currentNode); 
	    }
		lv_importURI_1_0=ruleName		{
	        if ($current==null) {
	            $current = factory.create(grammarAccess.getOpenNameRule().getType().getClassifier());
	            associateNodeWithAstElement(currentNode.getParent(), $current);
	        }
	        try {
	       		set(
	       			$current, 
	       			"importURI",
	        		lv_importURI_1_0, 
	        		"Name", 
	        		currentNode);
	        } catch (ValueConverterException vce) {
				handleValueConverterException(vce);
	        }
	        currentNode = currentNode.getParent();
	    }

)
))
;





// Entry rule entryRuleFactName
entryRuleFactName returns [EObject current=null] 
	:
	{ currentNode = createCompositeNode(grammarAccess.getFactNameRule(), currentNode); }
	 iv_ruleFactName=ruleFactName 
	 { $current=$iv_ruleFactName.current; } 
	 EOF 
;

// Rule FactName
ruleFactName returns [EObject current=null] 
    @init { EObject temp=null; setCurrentLookahead(); resetLookahead(); 
    }
    @after { resetLookahead(); 
    	lastConsumedNode = currentNode;
    }:
((
	{ 
	  /* */ 
	}
    { 
        temp=factory.create(grammarAccess.getFactNameAccess().getFactNameAction_0().getType().getClassifier());
        $current = temp; 
        temp = null;
        CompositeNode newNode = createCompositeNode(grammarAccess.getFactNameAccess().getFactNameAction_0(), currentNode.getParent());
    newNode.getChildren().add(currentNode);
    moveLookaheadInfo(currentNode, newNode);
    currentNode = newNode; 
        associateNodeWithAstElement(currentNode, $current); 
    }
)	'fact' 
    {
        createLeafNode(grammarAccess.getFactNameAccess().getFactKeyword_1(), null); 
    }
(
(
		{ 
	        currentNode=createCompositeNode(grammarAccess.getFactNameAccess().getNameNameParserRuleCall_2_0(), currentNode); 
	    }
		lv_name_2_0=ruleName		{
	        if ($current==null) {
	            $current = factory.create(grammarAccess.getFactNameRule().getType().getClassifier());
	            associateNodeWithAstElement(currentNode.getParent(), $current);
	        }
	        try {
	       		set(
	       			$current, 
	       			"name",
	        		lv_name_2_0, 
	        		"Name", 
	        		currentNode);
	        } catch (ValueConverterException vce) {
				handleValueConverterException(vce);
	        }
	        currentNode = currentNode.getParent();
	    }

)
)?)
;





// Entry rule entryRuleAssertionName
entryRuleAssertionName returns [EObject current=null] 
	:
	{ currentNode = createCompositeNode(grammarAccess.getAssertionNameRule(), currentNode); }
	 iv_ruleAssertionName=ruleAssertionName 
	 { $current=$iv_ruleAssertionName.current; } 
	 EOF 
;

// Rule AssertionName
ruleAssertionName returns [EObject current=null] 
    @init { EObject temp=null; setCurrentLookahead(); resetLookahead(); 
    }
    @after { resetLookahead(); 
    	lastConsumedNode = currentNode;
    }:
((
	{ 
	  /* */ 
	}
    { 
        temp=factory.create(grammarAccess.getAssertionNameAccess().getAssertionNameAction_0().getType().getClassifier());
        $current = temp; 
        temp = null;
        CompositeNode newNode = createCompositeNode(grammarAccess.getAssertionNameAccess().getAssertionNameAction_0(), currentNode.getParent());
    newNode.getChildren().add(currentNode);
    moveLookaheadInfo(currentNode, newNode);
    currentNode = newNode; 
        associateNodeWithAstElement(currentNode, $current); 
    }
)	'assert' 
    {
        createLeafNode(grammarAccess.getAssertionNameAccess().getAssertKeyword_1(), null); 
    }
(
(
		{ 
	        currentNode=createCompositeNode(grammarAccess.getAssertionNameAccess().getNameNameParserRuleCall_2_0(), currentNode); 
	    }
		lv_name_2_0=ruleName		{
	        if ($current==null) {
	            $current = factory.create(grammarAccess.getAssertionNameRule().getType().getClassifier());
	            associateNodeWithAstElement(currentNode.getParent(), $current);
	        }
	        try {
	       		set(
	       			$current, 
	       			"name",
	        		lv_name_2_0, 
	        		"Name", 
	        		currentNode);
	        } catch (ValueConverterException vce) {
				handleValueConverterException(vce);
	        }
	        currentNode = currentNode.getParent();
	    }

)
)?)
;





// Entry rule entryRuleFunctionName
entryRuleFunctionName returns [EObject current=null] 
	:
	{ currentNode = createCompositeNode(grammarAccess.getFunctionNameRule(), currentNode); }
	 iv_ruleFunctionName=ruleFunctionName 
	 { $current=$iv_ruleFunctionName.current; } 
	 EOF 
;

// Rule FunctionName
ruleFunctionName returns [EObject current=null] 
    @init { EObject temp=null; setCurrentLookahead(); resetLookahead(); 
    }
    @after { resetLookahead(); 
    	lastConsumedNode = currentNode;
    }:
(
(
		{ 
	        currentNode=createCompositeNode(grammarAccess.getFunctionNameAccess().getNameNameParserRuleCall_0(), currentNode); 
	    }
		lv_name_0_0=ruleName		{
	        if ($current==null) {
	            $current = factory.create(grammarAccess.getFunctionNameRule().getType().getClassifier());
	            associateNodeWithAstElement(currentNode.getParent(), $current);
	        }
	        try {
	       		set(
	       			$current, 
	       			"name",
	        		lv_name_0_0, 
	        		"Name", 
	        		currentNode);
	        } catch (ValueConverterException vce) {
				handleValueConverterException(vce);
	        }
	        currentNode = currentNode.getParent();
	    }

)
)
;





// Entry rule entryRuleFunctionNamewParam
entryRuleFunctionNamewParam returns [EObject current=null] 
	:
	{ currentNode = createCompositeNode(grammarAccess.getFunctionNamewParamRule(), currentNode); }
	 iv_ruleFunctionNamewParam=ruleFunctionNamewParam 
	 { $current=$iv_ruleFunctionNamewParam.current; } 
	 EOF 
;

// Rule FunctionNamewParam
ruleFunctionNamewParam returns [EObject current=null] 
    @init { EObject temp=null; setCurrentLookahead(); resetLookahead(); 
    }
    @after { resetLookahead(); 
    	lastConsumedNode = currentNode;
    }:
(
(
		{ 
	        currentNode=createCompositeNode(grammarAccess.getFunctionNamewParamAccess().getNameNameParserRuleCall_0(), currentNode); 
	    }
		lv_name_0_0=ruleName		{
	        if ($current==null) {
	            $current = factory.create(grammarAccess.getFunctionNamewParamRule().getType().getClassifier());
	            associateNodeWithAstElement(currentNode.getParent(), $current);
	        }
	        try {
	       		set(
	       			$current, 
	       			"name",
	        		lv_name_0_0, 
	        		"Name", 
	        		currentNode);
	        } catch (ValueConverterException vce) {
				handleValueConverterException(vce);
	        }
	        currentNode = currentNode.getParent();
	    }

)
)
;





// Entry rule entryRulePredicateName
entryRulePredicateName returns [EObject current=null] 
	:
	{ currentNode = createCompositeNode(grammarAccess.getPredicateNameRule(), currentNode); }
	 iv_rulePredicateName=rulePredicateName 
	 { $current=$iv_rulePredicateName.current; } 
	 EOF 
;

// Rule PredicateName
rulePredicateName returns [EObject current=null] 
    @init { EObject temp=null; setCurrentLookahead(); resetLookahead(); 
    }
    @after { resetLookahead(); 
    	lastConsumedNode = currentNode;
    }:
(
(
		{ 
	        currentNode=createCompositeNode(grammarAccess.getPredicateNameAccess().getNameNameParserRuleCall_0(), currentNode); 
	    }
		lv_name_0_0=ruleName		{
	        if ($current==null) {
	            $current = factory.create(grammarAccess.getPredicateNameRule().getType().getClassifier());
	            associateNodeWithAstElement(currentNode.getParent(), $current);
	        }
	        try {
	       		set(
	       			$current, 
	       			"name",
	        		lv_name_0_0, 
	        		"Name", 
	        		currentNode);
	        } catch (ValueConverterException vce) {
				handleValueConverterException(vce);
	        }
	        currentNode = currentNode.getParent();
	    }

)
)
;





// Entry rule entryRuleAlias
entryRuleAlias returns [EObject current=null] 
	:
	{ currentNode = createCompositeNode(grammarAccess.getAliasRule(), currentNode); }
	 iv_ruleAlias=ruleAlias 
	 { $current=$iv_ruleAlias.current; } 
	 EOF 
;

// Rule Alias
ruleAlias returns [EObject current=null] 
    @init { EObject temp=null; setCurrentLookahead(); resetLookahead(); 
    }
    @after { resetLookahead(); 
    	lastConsumedNode = currentNode;
    }:
(
(
		{ 
	        currentNode=createCompositeNode(grammarAccess.getAliasAccess().getNameNameAliasParserRuleCall_0(), currentNode); 
	    }
		lv_name_0_0=ruleNameAlias		{
	        if ($current==null) {
	            $current = factory.create(grammarAccess.getAliasRule().getType().getClassifier());
	            associateNodeWithAstElement(currentNode.getParent(), $current);
	        }
	        try {
	       		set(
	       			$current, 
	       			"name",
	        		lv_name_0_0, 
	        		"NameAlias", 
	        		currentNode);
	        } catch (ValueConverterException vce) {
				handleValueConverterException(vce);
	        }
	        currentNode = currentNode.getParent();
	    }

)
)
;





// Entry rule entryRuleEnumName
entryRuleEnumName returns [EObject current=null] 
	:
	{ currentNode = createCompositeNode(grammarAccess.getEnumNameRule(), currentNode); }
	 iv_ruleEnumName=ruleEnumName 
	 { $current=$iv_ruleEnumName.current; } 
	 EOF 
;

// Rule EnumName
ruleEnumName returns [EObject current=null] 
    @init { EObject temp=null; setCurrentLookahead(); resetLookahead(); 
    }
    @after { resetLookahead(); 
    	lastConsumedNode = currentNode;
    }:
(	'enum' 
    {
        createLeafNode(grammarAccess.getEnumNameAccess().getEnumKeyword_0(), null); 
    }
(
(
		{ 
	        currentNode=createCompositeNode(grammarAccess.getEnumNameAccess().getNameNameParserRuleCall_1_0(), currentNode); 
	    }
		lv_name_1_0=ruleName		{
	        if ($current==null) {
	            $current = factory.create(grammarAccess.getEnumNameRule().getType().getClassifier());
	            associateNodeWithAstElement(currentNode.getParent(), $current);
	        }
	        try {
	       		set(
	       			$current, 
	       			"name",
	        		lv_name_1_0, 
	        		"Name", 
	        		currentNode);
	        } catch (ValueConverterException vce) {
				handleValueConverterException(vce);
	        }
	        currentNode = currentNode.getParent();
	    }

)
))
;





// Entry rule entryRuleEnumPropertyName
entryRuleEnumPropertyName returns [EObject current=null] 
	:
	{ currentNode = createCompositeNode(grammarAccess.getEnumPropertyNameRule(), currentNode); }
	 iv_ruleEnumPropertyName=ruleEnumPropertyName 
	 { $current=$iv_ruleEnumPropertyName.current; } 
	 EOF 
;

// Rule EnumPropertyName
ruleEnumPropertyName returns [EObject current=null] 
    @init { EObject temp=null; setCurrentLookahead(); resetLookahead(); 
    }
    @after { resetLookahead(); 
    	lastConsumedNode = currentNode;
    }:
(
(
		{ 
	        currentNode=createCompositeNode(grammarAccess.getEnumPropertyNameAccess().getNameNameParserRuleCall_0(), currentNode); 
	    }
		lv_name_0_0=ruleName		{
	        if ($current==null) {
	            $current = factory.create(grammarAccess.getEnumPropertyNameRule().getType().getClassifier());
	            associateNodeWithAstElement(currentNode.getParent(), $current);
	        }
	        try {
	       		set(
	       			$current, 
	       			"name",
	        		lv_name_0_0, 
	        		"Name", 
	        		currentNode);
	        } catch (ValueConverterException vce) {
				handleValueConverterException(vce);
	        }
	        currentNode = currentNode.getParent();
	    }

)
)
;





// Entry rule entryRuleLetName
entryRuleLetName returns [EObject current=null] 
	:
	{ currentNode = createCompositeNode(grammarAccess.getLetNameRule(), currentNode); }
	 iv_ruleLetName=ruleLetName 
	 { $current=$iv_ruleLetName.current; } 
	 EOF 
;

// Rule LetName
ruleLetName returns [EObject current=null] 
    @init { EObject temp=null; setCurrentLookahead(); resetLookahead(); 
    }
    @after { resetLookahead(); 
    	lastConsumedNode = currentNode;
    }:
(	'let' 
    {
        createLeafNode(grammarAccess.getLetNameAccess().getLetKeyword_0(), null); 
    }
(
(
		{ 
	        currentNode=createCompositeNode(grammarAccess.getLetNameAccess().getNameNameParserRuleCall_1_0(), currentNode); 
	    }
		lv_name_1_0=ruleName		{
	        if ($current==null) {
	            $current = factory.create(grammarAccess.getLetNameRule().getType().getClassifier());
	            associateNodeWithAstElement(currentNode.getParent(), $current);
	        }
	        try {
	       		set(
	       			$current, 
	       			"name",
	        		lv_name_1_0, 
	        		"Name", 
	        		currentNode);
	        } catch (ValueConverterException vce) {
				handleValueConverterException(vce);
	        }
	        currentNode = currentNode.getParent();
	    }

)
))
;





// Entry rule entryRuleSignatureName
entryRuleSignatureName returns [EObject current=null] 
	:
	{ currentNode = createCompositeNode(grammarAccess.getSignatureNameRule(), currentNode); }
	 iv_ruleSignatureName=ruleSignatureName 
	 { $current=$iv_ruleSignatureName.current; } 
	 EOF 
;

// Rule SignatureName
ruleSignatureName returns [EObject current=null] 
    @init { EObject temp=null; setCurrentLookahead(); resetLookahead(); 
    }
    @after { resetLookahead(); 
    	lastConsumedNode = currentNode;
    }:
(
(
		{ 
	        currentNode=createCompositeNode(grammarAccess.getSignatureNameAccess().getNameNameParserRuleCall_0(), currentNode); 
	    }
		lv_name_0_0=ruleName		{
	        if ($current==null) {
	            $current = factory.create(grammarAccess.getSignatureNameRule().getType().getClassifier());
	            associateNodeWithAstElement(currentNode.getParent(), $current);
	        }
	        try {
	       		set(
	       			$current, 
	       			"name",
	        		lv_name_0_0, 
	        		"Name", 
	        		currentNode);
	        } catch (ValueConverterException vce) {
				handleValueConverterException(vce);
	        }
	        currentNode = currentNode.getParent();
	    }

)
)
;





// Entry rule entryRulePropertyName
entryRulePropertyName returns [EObject current=null] 
	:
	{ currentNode = createCompositeNode(grammarAccess.getPropertyNameRule(), currentNode); }
	 iv_rulePropertyName=rulePropertyName 
	 { $current=$iv_rulePropertyName.current; } 
	 EOF 
;

// Rule PropertyName
rulePropertyName returns [EObject current=null] 
    @init { EObject temp=null; setCurrentLookahead(); resetLookahead(); 
    }
    @after { resetLookahead(); 
    	lastConsumedNode = currentNode;
    }:
(
(
		{ 
	        currentNode=createCompositeNode(grammarAccess.getPropertyNameAccess().getNameNameParserRuleCall_0(), currentNode); 
	    }
		lv_name_0_0=ruleName		{
	        if ($current==null) {
	            $current = factory.create(grammarAccess.getPropertyNameRule().getType().getClassifier());
	            associateNodeWithAstElement(currentNode.getParent(), $current);
	        }
	        try {
	       		set(
	       			$current, 
	       			"name",
	        		lv_name_0_0, 
	        		"Name", 
	        		currentNode);
	        } catch (ValueConverterException vce) {
				handleValueConverterException(vce);
	        }
	        currentNode = currentNode.getParent();
	    }

)
)
;





// Entry rule entryRuleExactlyName
entryRuleExactlyName returns [EObject current=null] 
	:
	{ currentNode = createCompositeNode(grammarAccess.getExactlyNameRule(), currentNode); }
	 iv_ruleExactlyName=ruleExactlyName 
	 { $current=$iv_ruleExactlyName.current; } 
	 EOF 
;

// Rule ExactlyName
ruleExactlyName returns [EObject current=null] 
    @init { EObject temp=null; setCurrentLookahead(); resetLookahead(); 
    }
    @after { resetLookahead(); 
    	lastConsumedNode = currentNode;
    }:
(
(
		{ 
	        currentNode=createCompositeNode(grammarAccess.getExactlyNameAccess().getNameNameParserRuleCall_0(), currentNode); 
	    }
		lv_name_0_0=ruleName		{
	        if ($current==null) {
	            $current = factory.create(grammarAccess.getExactlyNameRule().getType().getClassifier());
	            associateNodeWithAstElement(currentNode.getParent(), $current);
	        }
	        try {
	       		set(
	       			$current, 
	       			"name",
	        		lv_name_0_0, 
	        		"Name", 
	        		currentNode);
	        } catch (ValueConverterException vce) {
				handleValueConverterException(vce);
	        }
	        currentNode = currentNode.getParent();
	    }

)
)
;





// Entry rule entryRuleAsName
entryRuleAsName returns [EObject current=null] 
	:
	{ currentNode = createCompositeNode(grammarAccess.getAsNameRule(), currentNode); }
	 iv_ruleAsName=ruleAsName 
	 { $current=$iv_ruleAsName.current; } 
	 EOF 
;

// Rule AsName
ruleAsName returns [EObject current=null] 
    @init { EObject temp=null; setCurrentLookahead(); resetLookahead(); 
    }
    @after { resetLookahead(); 
    	lastConsumedNode = currentNode;
    }:
(
(
		lv_name_0_0=RULE_ID
		{
			createLeafNode(grammarAccess.getAsNameAccess().getNameIDTerminalRuleCall_0(), "name"); 
		}
		{
	        if ($current==null) {
	            $current = factory.create(grammarAccess.getAsNameRule().getType().getClassifier());
	            associateNodeWithAstElement(currentNode, $current);
	        }
	        try {
	       		set(
	       			$current, 
	       			"name",
	        		lv_name_0_0, 
	        		"ID", 
	        		lastConsumedNode);
	        } catch (ValueConverterException vce) {
				handleValueConverterException(vce);
	        }
	    }

)
)
;





// Entry rule entryRuleNameAlias
entryRuleNameAlias returns [String current=null] 
	:
	{ currentNode = createCompositeNode(grammarAccess.getNameAliasRule(), currentNode); } 
	 iv_ruleNameAlias=ruleNameAlias 
	 { $current=$iv_ruleNameAlias.current.getText(); }  
	 EOF 
;

// Rule NameAlias
ruleNameAlias returns [AntlrDatatypeRuleToken current=new AntlrDatatypeRuleToken()] 
    @init { setCurrentLookahead(); resetLookahead(); 
    }
    @after { resetLookahead(); 
	    lastConsumedNode = currentNode;
    }:
(    this_ID_0=RULE_ID    {
		$current.merge(this_ID_0);
    }

    { 
    createLeafNode(grammarAccess.getNameAliasAccess().getIDTerminalRuleCall_0(), null); 
    }
(
	kw='/' 
    {
        $current.merge(kw);
        createLeafNode(grammarAccess.getNameAliasAccess().getSolidusKeyword_1_0(), null); 
    }
    this_ID_2=RULE_ID    {
		$current.merge(this_ID_2);
    }

    { 
    createLeafNode(grammarAccess.getNameAliasAccess().getIDTerminalRuleCall_1_1(), null); 
    }
)*)
    ;





// Entry rule entryRuleName
entryRuleName returns [String current=null] 
	:
	{ currentNode = createCompositeNode(grammarAccess.getNameRule(), currentNode); } 
	 iv_ruleName=ruleName 
	 { $current=$iv_ruleName.current.getText(); }  
	 EOF 
;

// Rule Name
ruleName returns [AntlrDatatypeRuleToken current=new AntlrDatatypeRuleToken()] 
    @init { setCurrentLookahead(); resetLookahead(); 
    }
    @after { resetLookahead(); 
	    lastConsumedNode = currentNode;
    }:
((
	kw='this' 
    {
        $current.merge(kw);
        createLeafNode(grammarAccess.getNameAccess().getThisKeyword_0_0(), null); 
    }

    |    this_ID_1=RULE_ID    {
		$current.merge(this_ID_1);
    }

    { 
    createLeafNode(grammarAccess.getNameAccess().getIDTerminalRuleCall_0_1(), null); 
    }
)(
	kw='/' 
    {
        $current.merge(kw);
        createLeafNode(grammarAccess.getNameAccess().getSolidusKeyword_1_0(), null); 
    }
    this_ID_3=RULE_ID    {
		$current.merge(this_ID_3);
    }

    { 
    createLeafNode(grammarAccess.getNameAccess().getIDTerminalRuleCall_1_1(), null); 
    }
)*)
    ;





// Entry rule entryRuleReferencesName
entryRuleReferencesName returns [EObject current=null] 
	:
	{ currentNode = createCompositeNode(grammarAccess.getReferencesNameRule(), currentNode); }
	 iv_ruleReferencesName=ruleReferencesName 
	 { $current=$iv_ruleReferencesName.current; } 
	 EOF 
;

// Rule ReferencesName
ruleReferencesName returns [EObject current=null] 
    @init { EObject temp=null; setCurrentLookahead(); resetLookahead(); 
    }
    @after { resetLookahead(); 
    	lastConsumedNode = currentNode;
    }:
(
	{ 
	  /* */ 
	}
    { 
        currentNode=createCompositeNode(grammarAccess.getReferencesNameAccess().getFactNameParserRuleCall_0(), currentNode); 
    }
    this_FactName_0=ruleFactName
    { 
        $current = $this_FactName_0.current; 
        currentNode = currentNode.getParent();
    }

    |
	{ 
	  /* */ 
	}
    { 
        currentNode=createCompositeNode(grammarAccess.getReferencesNameAccess().getFunctionNameParserRuleCall_1(), currentNode); 
    }
    this_FunctionName_1=ruleFunctionName
    { 
        $current = $this_FunctionName_1.current; 
        currentNode = currentNode.getParent();
    }

    |
	{ 
	  /* */ 
	}
    { 
        currentNode=createCompositeNode(grammarAccess.getReferencesNameAccess().getFunctionNamewParamParserRuleCall_2(), currentNode); 
    }
    this_FunctionNamewParam_2=ruleFunctionNamewParam
    { 
        $current = $this_FunctionNamewParam_2.current; 
        currentNode = currentNode.getParent();
    }

    |
	{ 
	  /* */ 
	}
    { 
        currentNode=createCompositeNode(grammarAccess.getReferencesNameAccess().getEnumNameParserRuleCall_3(), currentNode); 
    }
    this_EnumName_3=ruleEnumName
    { 
        $current = $this_EnumName_3.current; 
        currentNode = currentNode.getParent();
    }

    |
	{ 
	  /* */ 
	}
    { 
        currentNode=createCompositeNode(grammarAccess.getReferencesNameAccess().getEnumPropertyNameParserRuleCall_4(), currentNode); 
    }
    this_EnumPropertyName_4=ruleEnumPropertyName
    { 
        $current = $this_EnumPropertyName_4.current; 
        currentNode = currentNode.getParent();
    }

    |
	{ 
	  /* */ 
	}
    { 
        currentNode=createCompositeNode(grammarAccess.getReferencesNameAccess().getSignatureNameParserRuleCall_5(), currentNode); 
    }
    this_SignatureName_5=ruleSignatureName
    { 
        $current = $this_SignatureName_5.current; 
        currentNode = currentNode.getParent();
    }

    |
	{ 
	  /* */ 
	}
    { 
        currentNode=createCompositeNode(grammarAccess.getReferencesNameAccess().getPropertyNameParserRuleCall_6(), currentNode); 
    }
    this_PropertyName_6=rulePropertyName
    { 
        $current = $this_PropertyName_6.current; 
        currentNode = currentNode.getParent();
    }

    |
	{ 
	  /* */ 
	}
    { 
        currentNode=createCompositeNode(grammarAccess.getReferencesNameAccess().getExactlyNameParserRuleCall_7(), currentNode); 
    }
    this_ExactlyName_7=ruleExactlyName
    { 
        $current = $this_ExactlyName_7.current; 
        currentNode = currentNode.getParent();
    }

    |
	{ 
	  /* */ 
	}
    { 
        currentNode=createCompositeNode(grammarAccess.getReferencesNameAccess().getLetNameParserRuleCall_8(), currentNode); 
    }
    this_LetName_8=ruleLetName
    { 
        $current = $this_LetName_8.current; 
        currentNode = currentNode.getParent();
    }

    |
	{ 
	  /* */ 
	}
    { 
        currentNode=createCompositeNode(grammarAccess.getReferencesNameAccess().getPredicateNameParserRuleCall_9(), currentNode); 
    }
    this_PredicateName_9=rulePredicateName
    { 
        $current = $this_PredicateName_9.current; 
        currentNode = currentNode.getParent();
    }
)
;





// Entry rule entryRuleReferencesSig
entryRuleReferencesSig returns [EObject current=null] 
	:
	{ currentNode = createCompositeNode(grammarAccess.getReferencesSigRule(), currentNode); }
	 iv_ruleReferencesSig=ruleReferencesSig 
	 { $current=$iv_ruleReferencesSig.current; } 
	 EOF 
;

// Rule ReferencesSig
ruleReferencesSig returns [EObject current=null] 
    @init { EObject temp=null; setCurrentLookahead(); resetLookahead(); 
    }
    @after { resetLookahead(); 
    	lastConsumedNode = currentNode;
    }:
((
	{ 
	  /* */ 
	}
    { 
        temp=factory.create(grammarAccess.getReferencesSigAccess().getReferencesSigAction_0().getType().getClassifier());
        $current = temp; 
        temp = null;
        CompositeNode newNode = createCompositeNode(grammarAccess.getReferencesSigAccess().getReferencesSigAction_0(), currentNode.getParent());
    newNode.getChildren().add(currentNode);
    moveLookaheadInfo(currentNode, newNode);
    currentNode = newNode; 
        associateNodeWithAstElement(currentNode, $current); 
    }
)(((
(
		{ 
	        currentNode=createCompositeNode(grammarAccess.getReferencesSigAccess().getAsNameAsNameParserRuleCall_1_0_0_0(), currentNode); 
	    }
		lv_asName_1_0=ruleAsName		{
	        if ($current==null) {
	            $current = factory.create(grammarAccess.getReferencesSigRule().getType().getClassifier());
	            associateNodeWithAstElement(currentNode.getParent(), $current);
	        }
	        try {
	       		set(
	       			$current, 
	       			"asName",
	        		lv_asName_1_0, 
	        		"AsName", 
	        		currentNode);
	        } catch (ValueConverterException vce) {
				handleValueConverterException(vce);
	        }
	        currentNode = currentNode.getParent();
	    }

)
)?(
(
		{ 
		  /* */ 
		}
		{
			if ($current==null) {
	            $current = factory.create(grammarAccess.getReferencesSigRule().getType().getClassifier());
	            associateNodeWithAstElement(currentNode, $current);
	        }
        }
	RULE_ID
	{
		createLeafNode(grammarAccess.getReferencesSigAccess().getNameRefSignatureNameCrossReference_1_0_1_0(), "nameRef"); 
	}

)
))
    |	'univ' 
    {
        createLeafNode(grammarAccess.getReferencesSigAccess().getUnivKeyword_1_1(), null); 
    }

    |	'Int' 
    {
        createLeafNode(grammarAccess.getReferencesSigAccess().getIntKeyword_1_2(), null); 
    }

    |	'seq/Int' 
    {
        createLeafNode(grammarAccess.getReferencesSigAccess().getSeqIntKeyword_1_3(), null); 
    }
))
;





// Entry rule entryRuleRef
entryRuleRef returns [EObject current=null] 
	:
	{ currentNode = createCompositeNode(grammarAccess.getRefRule(), currentNode); }
	 iv_ruleRef=ruleRef 
	 { $current=$iv_ruleRef.current; } 
	 EOF 
;

// Rule Ref
ruleRef returns [EObject current=null] 
    @init { EObject temp=null; setCurrentLookahead(); resetLookahead(); 
    }
    @after { resetLookahead(); 
    	lastConsumedNode = currentNode;
    }:
((
	{ 
	  /* */ 
	}
    { 
        temp=factory.create(grammarAccess.getRefAccess().getRefAction_0().getType().getClassifier());
        $current = temp; 
        temp = null;
        CompositeNode newNode = createCompositeNode(grammarAccess.getRefAccess().getRefAction_0(), currentNode.getParent());
    newNode.getChildren().add(currentNode);
    moveLookaheadInfo(currentNode, newNode);
    currentNode = newNode; 
        associateNodeWithAstElement(currentNode, $current); 
    }
)((
(
		{ 
		  /* */ 
		}
		{
			if ($current==null) {
	            $current = factory.create(grammarAccess.getRefRule().getType().getClassifier());
	            associateNodeWithAstElement(currentNode, $current);
	        }
        }
	RULE_ID
	{
		createLeafNode(grammarAccess.getRefAccess().getNameRefReferencesNameCrossReference_1_0_0(), "nameRef"); 
	}

)
)
    |	'univ' 
    {
        createLeafNode(grammarAccess.getRefAccess().getUnivKeyword_1_1(), null); 
    }

    |	'Int' 
    {
        createLeafNode(grammarAccess.getRefAccess().getIntKeyword_1_2(), null); 
    }

    |	'seq/Int' 
    {
        createLeafNode(grammarAccess.getRefAccess().getSeqIntKeyword_1_3(), null); 
    }
))
;





// Entry rule entryRuleLeftCurlyBracket
entryRuleLeftCurlyBracket returns [EObject current=null] 
	:
	{ currentNode = createCompositeNode(grammarAccess.getLeftCurlyBracketRule(), currentNode); }
	 iv_ruleLeftCurlyBracket=ruleLeftCurlyBracket 
	 { $current=$iv_ruleLeftCurlyBracket.current; } 
	 EOF 
;

// Rule LeftCurlyBracket
ruleLeftCurlyBracket returns [EObject current=null] 
    @init { EObject temp=null; setCurrentLookahead(); resetLookahead(); 
    }
    @after { resetLookahead(); 
    	lastConsumedNode = currentNode;
    }:
(
(
		lv_leftCurlyBracket_0_0=	'{' 
    {
        createLeafNode(grammarAccess.getLeftCurlyBracketAccess().getLeftCurlyBracketLeftCurlyBracketKeyword_0(), "leftCurlyBracket"); 
    }
 
	    {
	        if ($current==null) {
	            $current = factory.create(grammarAccess.getLeftCurlyBracketRule().getType().getClassifier());
	            associateNodeWithAstElement(currentNode, $current);
	        }
	        
	        try {
	       		set($current, "leftCurlyBracket", lv_leftCurlyBracket_0_0, "{", lastConsumedNode);
	        } catch (ValueConverterException vce) {
				handleValueConverterException(vce);
	        }
	    }

)
)
;





// Entry rule entryRuleRightCurlyBracket
entryRuleRightCurlyBracket returns [EObject current=null] 
	:
	{ currentNode = createCompositeNode(grammarAccess.getRightCurlyBracketRule(), currentNode); }
	 iv_ruleRightCurlyBracket=ruleRightCurlyBracket 
	 { $current=$iv_ruleRightCurlyBracket.current; } 
	 EOF 
;

// Rule RightCurlyBracket
ruleRightCurlyBracket returns [EObject current=null] 
    @init { EObject temp=null; setCurrentLookahead(); resetLookahead(); 
    }
    @after { resetLookahead(); 
    	lastConsumedNode = currentNode;
    }:
(
(
		lv_rightCurlyBracket_0_0=	'}' 
    {
        createLeafNode(grammarAccess.getRightCurlyBracketAccess().getRightCurlyBracketRightCurlyBracketKeyword_0(), "rightCurlyBracket"); 
    }
 
	    {
	        if ($current==null) {
	            $current = factory.create(grammarAccess.getRightCurlyBracketRule().getType().getClassifier());
	            associateNodeWithAstElement(currentNode, $current);
	        }
	        
	        try {
	       		set($current, "rightCurlyBracket", lv_rightCurlyBracket_0_0, "}", lastConsumedNode);
	        } catch (ValueConverterException vce) {
				handleValueConverterException(vce);
	        }
	    }

)
)
;





// Entry rule entryRuleDot
entryRuleDot returns [EObject current=null] 
	:
	{ currentNode = createCompositeNode(grammarAccess.getDotRule(), currentNode); }
	 iv_ruleDot=ruleDot 
	 { $current=$iv_ruleDot.current; } 
	 EOF 
;

// Rule Dot
ruleDot returns [EObject current=null] 
    @init { EObject temp=null; setCurrentLookahead(); resetLookahead(); 
    }
    @after { resetLookahead(); 
    	lastConsumedNode = currentNode;
    }:
(
(
		lv_dot_0_0=	'.' 
    {
        createLeafNode(grammarAccess.getDotAccess().getDotFullStopKeyword_0(), "dot"); 
    }
 
	    {
	        if ($current==null) {
	            $current = factory.create(grammarAccess.getDotRule().getType().getClassifier());
	            associateNodeWithAstElement(currentNode, $current);
	        }
	        
	        try {
	       		set($current, "dot", lv_dot_0_0, ".", lastConsumedNode);
	        } catch (ValueConverterException vce) {
				handleValueConverterException(vce);
	        }
	    }

)
)
;





// Entry rule entryRuleComma
entryRuleComma returns [EObject current=null] 
	:
	{ currentNode = createCompositeNode(grammarAccess.getCommaRule(), currentNode); }
	 iv_ruleComma=ruleComma 
	 { $current=$iv_ruleComma.current; } 
	 EOF 
;

// Rule Comma
ruleComma returns [EObject current=null] 
    @init { EObject temp=null; setCurrentLookahead(); resetLookahead(); 
    }
    @after { resetLookahead(); 
    	lastConsumedNode = currentNode;
    }:
(
(
		lv_comma_0_0=	',' 
    {
        createLeafNode(grammarAccess.getCommaAccess().getCommaCommaKeyword_0(), "comma"); 
    }
 
	    {
	        if ($current==null) {
	            $current = factory.create(grammarAccess.getCommaRule().getType().getClassifier());
	            associateNodeWithAstElement(currentNode, $current);
	        }
	        
	        try {
	       		set($current, "comma", lv_comma_0_0, ",", lastConsumedNode);
	        } catch (ValueConverterException vce) {
				handleValueConverterException(vce);
	        }
	    }

)
)
;





// Entry rule entryRuleColon
entryRuleColon returns [EObject current=null] 
	:
	{ currentNode = createCompositeNode(grammarAccess.getColonRule(), currentNode); }
	 iv_ruleColon=ruleColon 
	 { $current=$iv_ruleColon.current; } 
	 EOF 
;

// Rule Colon
ruleColon returns [EObject current=null] 
    @init { EObject temp=null; setCurrentLookahead(); resetLookahead(); 
    }
    @after { resetLookahead(); 
    	lastConsumedNode = currentNode;
    }:
(
(
		lv_colon_0_0=	':' 
    {
        createLeafNode(grammarAccess.getColonAccess().getColonColonKeyword_0(), "colon"); 
    }
 
	    {
	        if ($current==null) {
	            $current = factory.create(grammarAccess.getColonRule().getType().getClassifier());
	            associateNodeWithAstElement(currentNode, $current);
	        }
	        
	        try {
	       		set($current, "colon", lv_colon_0_0, ":", lastConsumedNode);
	        } catch (ValueConverterException vce) {
				handleValueConverterException(vce);
	        }
	    }

)
)
;





// Entry rule entryRuleLeftParenthesis
entryRuleLeftParenthesis returns [EObject current=null] 
	:
	{ currentNode = createCompositeNode(grammarAccess.getLeftParenthesisRule(), currentNode); }
	 iv_ruleLeftParenthesis=ruleLeftParenthesis 
	 { $current=$iv_ruleLeftParenthesis.current; } 
	 EOF 
;

// Rule LeftParenthesis
ruleLeftParenthesis returns [EObject current=null] 
    @init { EObject temp=null; setCurrentLookahead(); resetLookahead(); 
    }
    @after { resetLookahead(); 
    	lastConsumedNode = currentNode;
    }:
(
(
		lv_leftParenthesis_0_0=	'(' 
    {
        createLeafNode(grammarAccess.getLeftParenthesisAccess().getLeftParenthesisLeftParenthesisKeyword_0(), "leftParenthesis"); 
    }
 
	    {
	        if ($current==null) {
	            $current = factory.create(grammarAccess.getLeftParenthesisRule().getType().getClassifier());
	            associateNodeWithAstElement(currentNode, $current);
	        }
	        
	        try {
	       		set($current, "leftParenthesis", lv_leftParenthesis_0_0, "(", lastConsumedNode);
	        } catch (ValueConverterException vce) {
				handleValueConverterException(vce);
	        }
	    }

)
)
;





// Entry rule entryRuleRightParenthesis
entryRuleRightParenthesis returns [EObject current=null] 
	:
	{ currentNode = createCompositeNode(grammarAccess.getRightParenthesisRule(), currentNode); }
	 iv_ruleRightParenthesis=ruleRightParenthesis 
	 { $current=$iv_ruleRightParenthesis.current; } 
	 EOF 
;

// Rule RightParenthesis
ruleRightParenthesis returns [EObject current=null] 
    @init { EObject temp=null; setCurrentLookahead(); resetLookahead(); 
    }
    @after { resetLookahead(); 
    	lastConsumedNode = currentNode;
    }:
(
(
		lv_rightParenthesis_0_0=	')' 
    {
        createLeafNode(grammarAccess.getRightParenthesisAccess().getRightParenthesisRightParenthesisKeyword_0(), "rightParenthesis"); 
    }
 
	    {
	        if ($current==null) {
	            $current = factory.create(grammarAccess.getRightParenthesisRule().getType().getClassifier());
	            associateNodeWithAstElement(currentNode, $current);
	        }
	        
	        try {
	       		set($current, "rightParenthesis", lv_rightParenthesis_0_0, ")", lastConsumedNode);
	        } catch (ValueConverterException vce) {
				handleValueConverterException(vce);
	        }
	    }

)
)
;





// Entry rule entryRuleLeftSquareBracketKeyword
entryRuleLeftSquareBracketKeyword returns [EObject current=null] 
	:
	{ currentNode = createCompositeNode(grammarAccess.getLeftSquareBracketKeywordRule(), currentNode); }
	 iv_ruleLeftSquareBracketKeyword=ruleLeftSquareBracketKeyword 
	 { $current=$iv_ruleLeftSquareBracketKeyword.current; } 
	 EOF 
;

// Rule LeftSquareBracketKeyword
ruleLeftSquareBracketKeyword returns [EObject current=null] 
    @init { EObject temp=null; setCurrentLookahead(); resetLookahead(); 
    }
    @after { resetLookahead(); 
    	lastConsumedNode = currentNode;
    }:
(
(
		lv_leftSquareBracketKeyword_0_0=	'[' 
    {
        createLeafNode(grammarAccess.getLeftSquareBracketKeywordAccess().getLeftSquareBracketKeywordLeftSquareBracketKeyword_0(), "leftSquareBracketKeyword"); 
    }
 
	    {
	        if ($current==null) {
	            $current = factory.create(grammarAccess.getLeftSquareBracketKeywordRule().getType().getClassifier());
	            associateNodeWithAstElement(currentNode, $current);
	        }
	        
	        try {
	       		set($current, "leftSquareBracketKeyword", lv_leftSquareBracketKeyword_0_0, "[", lastConsumedNode);
	        } catch (ValueConverterException vce) {
				handleValueConverterException(vce);
	        }
	    }

)
)
;





// Entry rule entryRuleRightSquareBracketKeyword
entryRuleRightSquareBracketKeyword returns [EObject current=null] 
	:
	{ currentNode = createCompositeNode(grammarAccess.getRightSquareBracketKeywordRule(), currentNode); }
	 iv_ruleRightSquareBracketKeyword=ruleRightSquareBracketKeyword 
	 { $current=$iv_ruleRightSquareBracketKeyword.current; } 
	 EOF 
;

// Rule RightSquareBracketKeyword
ruleRightSquareBracketKeyword returns [EObject current=null] 
    @init { EObject temp=null; setCurrentLookahead(); resetLookahead(); 
    }
    @after { resetLookahead(); 
    	lastConsumedNode = currentNode;
    }:
(
(
		lv_rightSquareBracketKeyword_0_0=	']' 
    {
        createLeafNode(grammarAccess.getRightSquareBracketKeywordAccess().getRightSquareBracketKeywordRightSquareBracketKeyword_0(), "rightSquareBracketKeyword"); 
    }
 
	    {
	        if ($current==null) {
	            $current = factory.create(grammarAccess.getRightSquareBracketKeywordRule().getType().getClassifier());
	            associateNodeWithAstElement(currentNode, $current);
	        }
	        
	        try {
	       		set($current, "rightSquareBracketKeyword", lv_rightSquareBracketKeyword_0_0, "]", lastConsumedNode);
	        } catch (ValueConverterException vce) {
				handleValueConverterException(vce);
	        }
	    }

)
)
;





RULE_NEGATIVE_INTEGER : '-' RULE_INT;

RULE_SL_COMMENT : ('//' ~(('\n'|'\r'))* ('\r'? '\n')?|'--' ( options {greedy=false;} : . )*'\n');

RULE_ID : ('a'..'z'|'A'..'Z'|'_') ('a'..'z'|'A'..'Z'|'_'|'0'..'9')* ('\''|'"')*;

RULE_INT : ('0'..'9')+;

RULE_STRING : ('"' ('\\' ('b'|'t'|'n'|'f'|'r'|'"'|'\''|'\\')|~(('\\'|'"')))* '"'|'\'' ('\\' ('b'|'t'|'n'|'f'|'r'|'"'|'\''|'\\')|~(('\\'|'\'')))* '\'');

RULE_ML_COMMENT : '/*' ( options {greedy=false;} : . )*'*/';

RULE_WS : (' '|'\t'|'\r'|'\n')+;

RULE_ANY_OTHER : .;


