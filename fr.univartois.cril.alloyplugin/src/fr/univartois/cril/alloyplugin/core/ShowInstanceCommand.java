package fr.univartois.cril.alloyplugin.core;import java.io.FileInputStream;import java.io.InputStreamReader;import java.util.Hashtable;import java.util.LinkedHashMap;import java.util.Map;import nanoxml_2_2_3.XMLElement;import org.eclipse.core.resources.IFile;import org.eclipse.core.resources.IResource;import org.eclipse.core.runtime.CoreException;import org.eclipse.jface.resource.ImageRegistry;import org.eclipse.swt.graphics.Image;import org.eclipse.swt.widgets.Display;import org.eclipse.ui.IViewPart;import org.eclipse.ui.IWorkbenchPage;import org.eclipse.ui.PlatformUI;import edu.mit.csail.sdg.alloy4.A4Reporter;import edu.mit.csail.sdg.alloy4.ConstList;import edu.mit.csail.sdg.alloy4.Err;import edu.mit.csail.sdg.alloy4.ErrorFatal;import edu.mit.csail.sdg.alloy4.Pair;import edu.mit.csail.sdg.alloy4compiler.ast.Func;import edu.mit.csail.sdg.alloy4compiler.parser.CompUtil;import edu.mit.csail.sdg.alloy4compiler.parser.Module;import edu.mit.csail.sdg.alloy4compiler.translator.A4Options;import edu.mit.csail.sdg.alloy4compiler.translator.A4Solution;import edu.mit.csail.sdg.alloy4compiler.translator.A4SolutionReader;import edu.mit.csail.sdg.alloy4compiler.translator.A4Options.SatSolver;import fr.univartois.cril.alloyplugin.AlloyPlugin;import fr.univartois.cril.alloyplugin.api.ALSImageRegistry;import fr.univartois.cril.alloyplugin.api.IALSCommand;import fr.univartois.cril.alloyplugin.api.IALSFile;import fr.univartois.cril.alloyplugin.api.ICommandListener;import fr.univartois.cril.alloyplugin.api.IReporter;import fr.univartois.cril.alloyplugin.api.Util;import fr.univartois.cril.alloyplugin.preferences.PreferenceConstants;/** * An Alloy command with its world and its resources. Can be executed. */public class ShowInstanceCommand implements IALSCommand {    public static final Image iconrun   = ALSImageRegistry.getImage(            ALSImageRegistry.RUN_ICON_ID);    public static final Image iconcheck = ALSImageRegistry.getImage(            ALSImageRegistry.CHECK_ICON_ID);    /**     * The Command's world .     */    private final Module      world;    private final IFile			outputFile;    /**     * The ALS file which has provided the command.     */    private final IALSFile     file;    private final String 			filename;        /**     * result can be executable.SAT executable.UNSAT or executable.UNKNOWN.     */    private int               result;    /**     *      */    private String            stringResult;    private A4Solution        ans;        private IWorkbenchPage		workbenchPage;    private IViewPart			viewPart;        /**     * Constructor.     * @throws ErrorFatal      */    public ShowInstanceCommand(IWorkbenchPage page, IFile outputFile) throws ErrorFatal {        assert (outputFile != null);        assert (page != null);                this.workbenchPage = page;        this.outputFile = outputFile;                this.filename = Util.getFileLocation(this.outputFile);                FileInputStream fis = null;        InputStreamReader reader = null;        try {            Map<String,String> fc = new LinkedHashMap<String,String>();            fis = new FileInputStream(filename);            reader = new InputStreamReader(fis, "UTF-8");            XMLElement x = new XMLElement(new Hashtable<Object,Object>(), true, false);            x.parseFromReader(reader);            if (!x.is("alloy")) throw new Exception();            String mainname=null;            for(XMLElement sub: x.getChildren()) if (sub.is("instance")) {               mainname=sub.getAttribute("filename");               break;            }            if (mainname==null) throw new Exception();            for(XMLElement sub: x.getChildren()) if (sub.is("source")) {               String name = sub.getAttribute("filename");               String content = sub.getAttribute("content");               fc.put(name, content);            }                        this.world = CompUtil.parseEverything_fromFile(A4Reporter.NOP, fc, mainname);                        Pair<A4Solution,ConstList<Func>> ansPair =            	A4SolutionReader.read(this.world.getAllReachableSigs(), x);                        for(Func f:this.world.getAllFunc()) if (f.params.size()==0) {               String label = f.label;               while(label.startsWith("this/")) label=label.substring(5);               this.world.addGlobal("$"+label, f.call());            }            for(Func f:ansPair.b)             	this.world.addGlobal(f.label, f.call());                        for(Map.Entry<String,Func> f:ansPair.a.getAllAtoms().entrySet())             	this.world.addGlobal(f.getKey(), f.getValue().call());                        this.ans = ansPair.a;                        IFile f = Util.getFileForLocation(this.ans.getOriginalFilename());            this.file = ALSFileFactory.instance().getIALSFile(f);                        setStringResult(this.ans.toString());                        setSat(this.ans.satisfiable());                    } catch(Throwable ex) {            throw new ErrorFatal("Failed to read or parse the XML file.");        } finally {        	edu.mit.csail.sdg.alloy4.Util.close(reader);        	edu.mit.csail.sdg.alloy4.Util.close(fis);        }                this.result = IALSCommand.UNKNOW;    }    /**     * Get the option.     */    public A4Options getOptions() {        A4Options options = new A4Options();        SatSolver solver;// =A4Options.SatSolver.SAT4J;        String defaultSolver = AlloyPlugin.getDefault().getPreferenceStore()                .getString(PreferenceConstants.P_SOLVER_CHOICE);        if (PreferenceConstants.V_SOLVER_BERKMIN.equals(defaultSolver)) {            solver = A4Options.SatSolver.BerkMinPIPE;        } else if (PreferenceConstants.V_SOLVER_ZChaffJNI.equals(defaultSolver)) {            solver = A4Options.SatSolver.ZChaffJNI;        } else if (PreferenceConstants.V_SOLVER_MiniSatProverJNI                .equals(defaultSolver)) {            solver = A4Options.SatSolver.MiniSatProverJNI;        } else if (PreferenceConstants.V_SOLVER_MiniSatProverUnsatCore                .equals(defaultSolver)) {            solver = A4Options.SatSolver.MiniSatProverJNI;        } else {            solver = A4Options.SatSolver.SAT4J;        }        // solver = A4Options.SatSolver.MiniSatProverJNI;        options.solver = solver;        options.solverDirectory = AlloyPlugin.getDefault().getPreferenceStore()                .getString(PreferenceConstants.P_SOLVERS_PATH);        options.originalFilename = getFilename();        return options;    }    /**     * Get the resource which this command is from.     */    public IResource getResource() {        return file.getResource();    }    /**     * Get the location of the file where this command is located.     */    public String getFilename() {        return Util.getFileLocation(file.getResource());    }    public IViewPart getViewPart() { return viewPart; }        /**     * return the world.     */    public Module getWorld() {        return world;    }    /**     * Execute this command with te given reporter.     */    public Pair<A4Solution,Boolean> execute(IReporter rep) throws Err {        rep.setExecCommand(this);        // if preference "show answer after execution" is enable, display answer        // in a Graphic thread:        if (AlloyPlugin.getDefault().getPreferenceStore().getBoolean(                PreferenceConstants.P_BOOLEAN_WRITE_SHOW_ANSWER))        {            displayAnsSafe();        }        return new Pair<A4Solution,Boolean>(ans, null!=ans);    }    public Pair<A4Solution, Boolean> getAns() {        return new Pair<A4Solution, Boolean>(ans, null!=ans);    }    /**     * Set this command sat.     */    public void setSat(boolean sat) {        if (sat)            result = IALSCommand.SAT;        else            result = IALSCommand.UNSAT;    }    /**     * Set the string result for this command.     */    public void setStringResult(String s) {        stringResult = s;    }    /**     * Get the string result of this command.     */    public String getStringResult() {        return stringResult;    }    public Image getIcon() {        // return command.check ?iconcheck:iconrun;        ImageRegistry reg = ALSImageRegistry.getImageRegistry();        if (this.result == IALSCommand.SAT) {            if (isCheck()) {                if (isExpect())// expected sat check command                    return reg.get(ALSImageRegistry.BLUE_CHECK_ID);                // not expected                // sat check                // command                return reg.get(ALSImageRegistry.RED_CHECK_ID);            }            // Sat Run command            return reg.get(ALSImageRegistry.GREEN_RUN_ID);        }        if (this.result == IALSCommand.UNSAT) {            if (isCheck())                return reg.get(ALSImageRegistry.GREEN_CHECK_ID);// OK            if (this.ans.getOriginalCommand() instanceof String)                return reg.get(ALSImageRegistry.BLUE_RUN_ID);            return reg.get(ALSImageRegistry.RED_RUN_ID);        }        if (isCheck())            return reg.get(ALSImageRegistry.CHECK_ID);        return reg.get(ALSImageRegistry.RUN_ID);    }    public int getBeginLine() {        return 0;    }        public int getEndLine() {        return 0;    }    public String getName() {        return this.ans.getOriginalCommand();    }    public String toString() {    	return this.ans.toString();    }    /**     * Display answer.     */    private void displayAns() throws Err {                   if (!outputFile.exists()) {            	AlloyPlugin.getDefault().logError(this.getClass().getCanonicalName() + " no output file");            	return;            }                       String secondaryId = outputFile.getFullPath().toString().replace(' ', '_').replace(':', '_');            // IEditorInput editorInput = new FileEditorInput(outputFile);            ICommandListener commandListener;            try {                IViewPart vizView = this.workbenchPage.showView(                        "fr.univartois.cril.alloyplugin.views.vizview",                        secondaryId, IWorkbenchPage.VIEW_ACTIVATE);                commandListener = (ICommandListener) vizView;                this.viewPart = vizView;                String titlename = getName() + ", " + AlloyLaunching.getResourcePartName(getResource());                commandListener.onXmlSolutionFileCreation(filename, titlename);                            } catch (CoreException e) {            	AlloyPlugin.getDefault().log(e);            }            }        /*     * (non-Javadoc)     * @see fr.univartois.cril.alloyplugin.api.IALSCommand#displayAnsSafe()     */    public void displayAnsSafe() {        Display display = PlatformUI.getWorkbench().getDisplay();        if (display != null)            display.asyncExec(            new Runnable() {                public void run() {                    try {                        ShowInstanceCommand.this.displayAns();                    } catch (Err e) {                    	AlloyPlugin.getDefault().log(e);                    }                }            });    }    public boolean isCheck() {        return true;    }    public boolean isExpect() {        return true;    }}