package fr.univartois.cril.xtext.alloyplugin.core;import java.io.FileNotFoundException;import java.io.PrintWriter;import java.io.UnsupportedEncodingException;import org.eclipse.core.resources.IFile;import org.eclipse.core.resources.IFolder;import org.eclipse.core.runtime.CoreException;import org.eclipse.core.runtime.IProgressMonitor;import org.eclipse.jface.resource.ImageRegistry;import org.eclipse.swt.graphics.Image;import org.eclipse.swt.widgets.Display;import org.eclipse.ui.IWorkbenchPage;import org.eclipse.ui.IWorkbenchWindow;import org.eclipse.ui.PlatformUI;import edu.mit.csail.sdg.alloy4.ConstList;import edu.mit.csail.sdg.alloy4.ConstSet;import edu.mit.csail.sdg.alloy4.Err;import edu.mit.csail.sdg.alloy4.Pair;import edu.mit.csail.sdg.alloy4.Pos;import edu.mit.csail.sdg.alloy4.Version;import edu.mit.csail.sdg.alloy4compiler.ast.Sig;import edu.mit.csail.sdg.alloy4compiler.parser.CompModule;import edu.mit.csail.sdg.alloy4compiler.translator.A4Solution;import edu.mit.csail.sdg.alloy4compiler.translator.A4SolutionWriter;import fr.univartois.cril.xtext.ui.activator.AlsActivator;import fr.univartois.cril.xtext.alloyplugin.api.ALSImageRegistry;import fr.univartois.cril.xtext.alloyplugin.api.IALSCommand;import fr.univartois.cril.xtext.alloyplugin.api.IALSFile;import fr.univartois.cril.xtext.alloyplugin.api.IReporter;import fr.univartois.cril.xtext.alloyplugin.api.Util;import fr.univartois.cril.xtext.alloyplugin.views.VizView;/** * An Alloy command with its world and its resources. Can be executed. */public class MetamodelCommand extends AbstractCommand {	private IFile metamodelFile = null;	/**	 * Constructor.	 */	public MetamodelCommand(IALSFile file, CompModule world) {		super(file, world);		assert (file != null);		assert (world != null);	}	public static void A4Metamodel(String a4Filename, CompModule a4Module,			String mmFilename) throws Err {		try {			Iterable<Sig> sigs = a4Module.getAllReachableSigs();			PrintWriter of = new PrintWriter(mmFilename, "UTF-8");			edu.mit.csail.sdg.alloy4.Util.encodeXMLs(of,					"\n<alloy builddate=\"", Version.buildDate(), "\">\n\n");			A4SolutionWriter.writeMetamodel(ConstList.make(sigs), a4Filename,					of);			edu.mit.csail.sdg.alloy4.Util.encodeXMLs(of, "\n</alloy>");			edu.mit.csail.sdg.alloy4.Util.close(of);		} catch (UnsupportedEncodingException e) {			throw new edu.mit.csail.sdg.alloy4.ErrorAPI(e.getMessage(), e);		} catch (FileNotFoundException e) {			throw new edu.mit.csail.sdg.alloy4.ErrorAPI(e.getMessage(), e);		}	}	/**	 * Execute this command with te given reporter.	 */	public Pair<A4Solution, Boolean> execute(IReporter rep, IProgressMonitor monitor) throws Err {		metamodelFile = null;		rep.setExecCommand(this);		IFolder outputFolder = getAnswerFolder("output");		if (outputFolder == null)			return new Pair<A4Solution, Boolean>(null, false);		IFile mFile = outputFolder.getFile(getName() + ".xml");		if (mFile.exists()) {			try {				mFile.delete(true, null);			} catch (CoreException e) {				AlsActivator.getDefault().log(e);			}		}		try {			A4Metamodel(getFilename(), world, Util.getFileLocation(mFile));			metamodelFile = mFile;		} catch (Err e) {			AlsActivator.getDefault().log(e);		}		file.fireChange();		// if preference "show answer after execution" is enable, display answer		// in a Graphic thread:		// if (AlloyPlugin.getDefault().getPreferenceStore().getBoolean(		// PreferenceConstants.P_BOOLEAN_WRITE_SHOW_ANSWER))		// {		displayAnsSafe();		// }		return new Pair<A4Solution, Boolean>(null, null != metamodelFile);	}	public Pair<A4Solution, Boolean> getAns() {		return new Pair<A4Solution, Boolean>(null, null != metamodelFile);	}	public Image getIcon() {		// return command.check ?iconcheck:iconrun;		ImageRegistry reg = ALSImageRegistry.getImageRegistry();		if (getResult() == IALSCommand.SAT) {			if (isCheck()) {				if (isExpect())// expected sat check command					return reg.get(ALSImageRegistry.BLUE_CHECK_ID);				// not expected				// sat check				// command				return reg.get(ALSImageRegistry.RED_CHECK_ID);			}			// Sat Run command			return reg.get(ALSImageRegistry.GREEN_RUN_ID);		}		if (getResult() == IALSCommand.UNSAT) {			if (isCheck())				return reg.get(ALSImageRegistry.GREEN_CHECK_ID);// OK			return reg.get(ALSImageRegistry.RED_RUN_ID);		}		if (isCheck())			return reg.get(ALSImageRegistry.CHECK_ID);		return reg.get(ALSImageRegistry.RUN_ID);	}	public int getBeginLine() {		/**		 * TODO Return the line number of the 'module ...'		 */		return 1;	}	public int getEndLine() {		return getBeginLine();	}	public String getName() {		return "Metamodel";	}	public String toString() {		if (this.getResult() == IALSCommand.UNKNOW)			return getName();		if (this.getResult() != IALSCommand.SAT)			return getName() + " [UNSAT]";		return getName() + " [SAT]";	}	/**	 * Display answer.	 */	private void displayAns() throws Err {		if (null == metamodelFile)			return;		IWorkbenchWindow window = PlatformUI.getWorkbench()				.getActiveWorkbenchWindow();		IWorkbenchPage page = window.getActivePage();		String secondaryId = metamodelFile.getFullPath().toString().replace(				' ', '_').replace(':', '_');		String titlename = "MM - "				+ AlloyLaunching.getResourcePartName(getResource());		this.viewPart[0] = VizView.showAlloyVisualizationView(this, page,				metamodelFile, titlename, secondaryId);	}	/*	 * (non-Javadoc)	 * 	 * @see fr.univartois.cril.alloyplugin.api.IALSCommand#displayAnsSafe()	 */	public void displayAnsSafe() {		Display display = PlatformUI.getWorkbench().getDisplay();		if (display != null) {			display.asyncExec(new Runnable() {				public void run() {					try {						MetamodelCommand.this.displayAns();					} catch (Err e) {						AlsActivator.getDefault().log(e);					}				}			});		}	}	public boolean isCheck() {		return false;	}	public boolean isExpect() {		return false;	}	public void showNextA4Solution() {		// do nothing ?	}	public A4Solution accessAns() {		return null;	}	public boolean shouldShowUnsatCore() {		return false;	}	public ConstSet<Pos> getCore() {		return null;	}	public void closeOldVizView() {		// do nothing	}}