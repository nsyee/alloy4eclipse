/*
* generated by Xtext
*/

package fr.univartois.cril.xtext2.services;

import com.google.inject.Singleton;
import com.google.inject.Inject;

import org.eclipse.xtext.*;
import org.eclipse.xtext.service.GrammarProvider;
import org.eclipse.xtext.service.AbstractElementFinder.*;


@Singleton
public class AlsGrammarAccess extends AbstractGrammarElementFinder {
	
	
	public class SpecificationElements extends AbstractParserRuleElementFinder {
		private final ParserRule rule = (ParserRule) GrammarUtil.findRuleForName(getGrammar(), "Specification");
		private final Group cGroup = (Group)rule.eContents().get(1);
		private final Assignment cModuleAssignment_0 = (Assignment)cGroup.eContents().get(0);
		private final RuleCall cModuleModuleParserRuleCall_0_0 = (RuleCall)cModuleAssignment_0.eContents().get(0);
		private final Assignment cOpenAssignment_1 = (Assignment)cGroup.eContents().get(1);
		private final RuleCall cOpenOpenParserRuleCall_1_0 = (RuleCall)cOpenAssignment_1.eContents().get(0);
		private final Assignment cParagraphAssignment_2 = (Assignment)cGroup.eContents().get(2);
		private final RuleCall cParagraphParagraphParserRuleCall_2_0 = (RuleCall)cParagraphAssignment_2.eContents().get(0);
		
		/// *
		//	specification ::= [module] open* paragraph*
		// * / Specification:
		//	module=Module? open+=Open* paragraph+=Paragraph*;
		public ParserRule getRule() { return rule; }

		//module=Module? open+=Open* paragraph+=Paragraph*
		public Group getGroup() { return cGroup; }

		//module=Module?
		public Assignment getModuleAssignment_0() { return cModuleAssignment_0; }

		//Module
		public RuleCall getModuleModuleParserRuleCall_0_0() { return cModuleModuleParserRuleCall_0_0; }

		//open+=Open*
		public Assignment getOpenAssignment_1() { return cOpenAssignment_1; }

		//Open
		public RuleCall getOpenOpenParserRuleCall_1_0() { return cOpenOpenParserRuleCall_1_0; }

		//paragraph+=Paragraph*
		public Assignment getParagraphAssignment_2() { return cParagraphAssignment_2; }

		//Paragraph
		public RuleCall getParagraphParagraphParserRuleCall_2_0() { return cParagraphParagraphParserRuleCall_2_0; }
	}

	public class ModuleElements extends AbstractParserRuleElementFinder {
		private final ParserRule rule = (ParserRule) GrammarUtil.findRuleForName(getGrammar(), "Module");
		private final Group cGroup = (Group)rule.eContents().get(1);
		private final Keyword cModuleKeyword_0 = (Keyword)cGroup.eContents().get(0);
		private final Assignment cModuleNameAssignment_1 = (Assignment)cGroup.eContents().get(1);
		private final RuleCall cModuleNameNameParserRuleCall_1_0 = (RuleCall)cModuleNameAssignment_1.eContents().get(0);
		private final Group cGroup_2 = (Group)cGroup.eContents().get(2);
		private final Assignment cLeftAssignment_2_0 = (Assignment)cGroup_2.eContents().get(0);
		private final RuleCall cLeftLeftSquareBracketKeywordParserRuleCall_2_0_0 = (RuleCall)cLeftAssignment_2_0.eContents().get(0);
		private final Assignment cExactlyAssignment_2_1 = (Assignment)cGroup_2.eContents().get(1);
		private final Keyword cExactlyExactlyKeyword_2_1_0 = (Keyword)cExactlyAssignment_2_1.eContents().get(0);
		private final Assignment cNameAssignment_2_2 = (Assignment)cGroup_2.eContents().get(2);
		private final RuleCall cNameExactlyNameParserRuleCall_2_2_0 = (RuleCall)cNameAssignment_2_2.eContents().get(0);
		private final Group cGroup_2_3 = (Group)cGroup_2.eContents().get(3);
		private final Assignment cCommaAssignment_2_3_0 = (Assignment)cGroup_2_3.eContents().get(0);
		private final RuleCall cCommaCommaParserRuleCall_2_3_0_0 = (RuleCall)cCommaAssignment_2_3_0.eContents().get(0);
		private final Alternatives cAlternatives_2_3_1 = (Alternatives)cGroup_2_3.eContents().get(1);
		private final Group cGroup_2_3_1_0 = (Group)cAlternatives_2_3_1.eContents().get(0);
		private final Assignment cExactlyAssignment_2_3_1_0_0 = (Assignment)cGroup_2_3_1_0.eContents().get(0);
		private final Keyword cExactlyExactlyKeyword_2_3_1_0_0_0 = (Keyword)cExactlyAssignment_2_3_1_0_0.eContents().get(0);
		private final Assignment cNumberAssignment_2_3_1_0_1 = (Assignment)cGroup_2_3_1_0.eContents().get(1);
		private final RuleCall cNumberINTTerminalRuleCall_2_3_1_0_1_0 = (RuleCall)cNumberAssignment_2_3_1_0_1.eContents().get(0);
		private final Assignment cNameAssignment_2_3_1_1 = (Assignment)cAlternatives_2_3_1.eContents().get(1);
		private final RuleCall cNameExactlyNameParserRuleCall_2_3_1_1_0 = (RuleCall)cNameAssignment_2_3_1_1.eContents().get(0);
		private final Assignment cRightAssignment_2_4 = (Assignment)cGroup_2.eContents().get(4);
		private final RuleCall cRightRightSquareBracketKeywordParserRuleCall_2_4_0 = (RuleCall)cRightAssignment_2_4.eContents().get(0);
		
		/// *
		//	module ::= "module" name  [ "["  ["exactly"] name  ("," ["exactly"] num)*    "]" ]
		// * / Module:
		//	"module" moduleName=Name (left=LeftSquareBracketKeyword exactly+="exactly"? name+=ExactlyName (comma+=Comma
		//	(exactly+="exactly"? number+=INT | name+=ExactlyName))* right=RightSquareBracketKeyword)?;
		public ParserRule getRule() { return rule; }

		//"module" moduleName=Name (left=LeftSquareBracketKeyword exactly+="exactly"? name+=ExactlyName (comma+=Comma
		//(exactly+="exactly"? number+=INT | name+=ExactlyName))* right=RightSquareBracketKeyword)?
		public Group getGroup() { return cGroup; }

		//"module"
		public Keyword getModuleKeyword_0() { return cModuleKeyword_0; }

		//moduleName=Name
		public Assignment getModuleNameAssignment_1() { return cModuleNameAssignment_1; }

		//Name
		public RuleCall getModuleNameNameParserRuleCall_1_0() { return cModuleNameNameParserRuleCall_1_0; }

		//(left=LeftSquareBracketKeyword exactly+="exactly"? name+=ExactlyName (comma+=Comma (exactly+="exactly"? number+=INT |
		//name+=ExactlyName))* right=RightSquareBracketKeyword)?
		public Group getGroup_2() { return cGroup_2; }

		//left=LeftSquareBracketKeyword
		public Assignment getLeftAssignment_2_0() { return cLeftAssignment_2_0; }

		//LeftSquareBracketKeyword
		public RuleCall getLeftLeftSquareBracketKeywordParserRuleCall_2_0_0() { return cLeftLeftSquareBracketKeywordParserRuleCall_2_0_0; }

		//exactly+="exactly"?
		public Assignment getExactlyAssignment_2_1() { return cExactlyAssignment_2_1; }

		//"exactly"
		public Keyword getExactlyExactlyKeyword_2_1_0() { return cExactlyExactlyKeyword_2_1_0; }

		//name+=ExactlyName
		public Assignment getNameAssignment_2_2() { return cNameAssignment_2_2; }

		//ExactlyName
		public RuleCall getNameExactlyNameParserRuleCall_2_2_0() { return cNameExactlyNameParserRuleCall_2_2_0; }

		//(comma+=Comma (exactly+="exactly"? number+=INT | name+=ExactlyName))*
		public Group getGroup_2_3() { return cGroup_2_3; }

		//comma+=Comma
		public Assignment getCommaAssignment_2_3_0() { return cCommaAssignment_2_3_0; }

		//Comma
		public RuleCall getCommaCommaParserRuleCall_2_3_0_0() { return cCommaCommaParserRuleCall_2_3_0_0; }

		//exactly+="exactly"? number+=INT | name+=ExactlyName
		public Alternatives getAlternatives_2_3_1() { return cAlternatives_2_3_1; }

		//exactly+="exactly"? number+=INT
		public Group getGroup_2_3_1_0() { return cGroup_2_3_1_0; }

		//exactly+="exactly"?
		public Assignment getExactlyAssignment_2_3_1_0_0() { return cExactlyAssignment_2_3_1_0_0; }

		//"exactly"
		public Keyword getExactlyExactlyKeyword_2_3_1_0_0_0() { return cExactlyExactlyKeyword_2_3_1_0_0_0; }

		//number+=INT
		public Assignment getNumberAssignment_2_3_1_0_1() { return cNumberAssignment_2_3_1_0_1; }

		//INT
		public RuleCall getNumberINTTerminalRuleCall_2_3_1_0_1_0() { return cNumberINTTerminalRuleCall_2_3_1_0_1_0; }

		//name+=ExactlyName
		public Assignment getNameAssignment_2_3_1_1() { return cNameAssignment_2_3_1_1; }

		//ExactlyName
		public RuleCall getNameExactlyNameParserRuleCall_2_3_1_1_0() { return cNameExactlyNameParserRuleCall_2_3_1_1_0; }

		//right=RightSquareBracketKeyword
		public Assignment getRightAssignment_2_4() { return cRightAssignment_2_4; }

		//RightSquareBracketKeyword
		public RuleCall getRightRightSquareBracketKeywordParserRuleCall_2_4_0() { return cRightRightSquareBracketKeywordParserRuleCall_2_4_0; }
	}

	public class OpenElements extends AbstractParserRuleElementFinder {
		private final ParserRule rule = (ParserRule) GrammarUtil.findRuleForName(getGrammar(), "Open");
		private final Group cGroup = (Group)rule.eContents().get(1);
		private final Keyword cPrivateKeyword_0 = (Keyword)cGroup.eContents().get(0);
		private final Assignment cOpenNameAssignment_1 = (Assignment)cGroup.eContents().get(1);
		private final RuleCall cOpenNameOpenNameParserRuleCall_1_0 = (RuleCall)cOpenNameAssignment_1.eContents().get(0);
		private final Group cGroup_2 = (Group)cGroup.eContents().get(2);
		private final Assignment cLeftAssignment_2_0 = (Assignment)cGroup_2.eContents().get(0);
		private final RuleCall cLeftLeftSquareBracketKeywordParserRuleCall_2_0_0 = (RuleCall)cLeftAssignment_2_0.eContents().get(0);
		private final Group cGroup_2_1 = (Group)cGroup_2.eContents().get(1);
		private final Assignment cPreviousNameAsAssignment_2_1_0 = (Assignment)cGroup_2_1.eContents().get(0);
		private final RuleCall cPreviousNameAsAsNameParserRuleCall_2_1_0_0 = (RuleCall)cPreviousNameAsAssignment_2_1_0.eContents().get(0);
		private final Keyword cSolidusKeyword_2_1_1 = (Keyword)cGroup_2_1.eContents().get(1);
		private final Assignment cRefnameAssignment_2_2 = (Assignment)cGroup_2.eContents().get(2);
		private final CrossReference cRefnameSignatureNameCrossReference_2_2_0 = (CrossReference)cRefnameAssignment_2_2.eContents().get(0);
		private final RuleCall cRefnameSignatureNameIDTerminalRuleCall_2_2_0_1 = (RuleCall)cRefnameSignatureNameCrossReference_2_2_0.eContents().get(1);
		private final Assignment cRightAssignment_2_3 = (Assignment)cGroup_2.eContents().get(3);
		private final RuleCall cRightRightSquareBracketKeywordParserRuleCall_2_3_0 = (RuleCall)cRightAssignment_2_3.eContents().get(0);
		private final Group cGroup_3 = (Group)cGroup.eContents().get(3);
		private final Keyword cAsKeyword_3_0 = (Keyword)cGroup_3.eContents().get(0);
		private final Assignment cNameAsAssignment_3_1 = (Assignment)cGroup_3.eContents().get(1);
		private final RuleCall cNameAsAsNameParserRuleCall_3_1_0 = (RuleCall)cNameAsAssignment_3_1.eContents().get(0);
		
		/// *
		//	open ::= ["private"]  "open"  name  [ "[" ref,+ "]" ]  [ "as" name ]
		// * / Open:
		//	"private"? openName=OpenName (left= / *ref+=Ref (comma+=Comma ref+=Ref)** / LeftSquareBracketKeyword
		//	(previousNameAs=AsName "/")? refname=[SignatureName] right=RightSquareBracketKeyword)? ("as" nameAs=AsName)?;
		public ParserRule getRule() { return rule; }

		//"private"? openName=OpenName (left= / *ref+=Ref (comma+=Comma ref+=Ref)** / LeftSquareBracketKeyword
		//(previousNameAs=AsName "/")? refname=[SignatureName] right=RightSquareBracketKeyword)? ("as" nameAs=AsName)?
		public Group getGroup() { return cGroup; }

		//"private"?
		public Keyword getPrivateKeyword_0() { return cPrivateKeyword_0; }

		//openName=OpenName
		public Assignment getOpenNameAssignment_1() { return cOpenNameAssignment_1; }

		//OpenName
		public RuleCall getOpenNameOpenNameParserRuleCall_1_0() { return cOpenNameOpenNameParserRuleCall_1_0; }

		//(left= / *ref+=Ref (comma+=Comma ref+=Ref)** / LeftSquareBracketKeyword (previousNameAs=AsName "/")?
		//refname=[SignatureName] right=RightSquareBracketKeyword)?
		public Group getGroup_2() { return cGroup_2; }

		//left= / *ref+=Ref (comma+=Comma ref+=Ref)** / LeftSquareBracketKeyword
		public Assignment getLeftAssignment_2_0() { return cLeftAssignment_2_0; }

		/// *ref+=Ref (comma+=Comma ref+=Ref)** / LeftSquareBracketKeyword
		public RuleCall getLeftLeftSquareBracketKeywordParserRuleCall_2_0_0() { return cLeftLeftSquareBracketKeywordParserRuleCall_2_0_0; }

		//(previousNameAs=AsName "/")?
		public Group getGroup_2_1() { return cGroup_2_1; }

		//previousNameAs=AsName
		public Assignment getPreviousNameAsAssignment_2_1_0() { return cPreviousNameAsAssignment_2_1_0; }

		//AsName
		public RuleCall getPreviousNameAsAsNameParserRuleCall_2_1_0_0() { return cPreviousNameAsAsNameParserRuleCall_2_1_0_0; }

		//"/"
		public Keyword getSolidusKeyword_2_1_1() { return cSolidusKeyword_2_1_1; }

		//refname=[SignatureName]
		public Assignment getRefnameAssignment_2_2() { return cRefnameAssignment_2_2; }

		//[SignatureName]
		public CrossReference getRefnameSignatureNameCrossReference_2_2_0() { return cRefnameSignatureNameCrossReference_2_2_0; }

		//ID
		public RuleCall getRefnameSignatureNameIDTerminalRuleCall_2_2_0_1() { return cRefnameSignatureNameIDTerminalRuleCall_2_2_0_1; }

		//right=RightSquareBracketKeyword
		public Assignment getRightAssignment_2_3() { return cRightAssignment_2_3; }

		//RightSquareBracketKeyword
		public RuleCall getRightRightSquareBracketKeywordParserRuleCall_2_3_0() { return cRightRightSquareBracketKeywordParserRuleCall_2_3_0; }

		//("as" nameAs=AsName)?
		public Group getGroup_3() { return cGroup_3; }

		//"as"
		public Keyword getAsKeyword_3_0() { return cAsKeyword_3_0; }

		//nameAs=AsName
		public Assignment getNameAsAssignment_3_1() { return cNameAsAssignment_3_1; }

		//AsName
		public RuleCall getNameAsAsNameParserRuleCall_3_1_0() { return cNameAsAsNameParserRuleCall_3_1_0; }
	}

	public class ParagraphElements extends AbstractParserRuleElementFinder {
		private final ParserRule rule = (ParserRule) GrammarUtil.findRuleForName(getGrammar(), "Paragraph");
		private final Alternatives cAlternatives = (Alternatives)rule.eContents().get(1);
		private final RuleCall cEnumDeclParserRuleCall_0 = (RuleCall)cAlternatives.eContents().get(0);
		private final RuleCall cFactDeclParserRuleCall_1 = (RuleCall)cAlternatives.eContents().get(1);
		private final RuleCall cFunDeclParserRuleCall_2 = (RuleCall)cAlternatives.eContents().get(2);
		private final RuleCall cFunDeclWParamParserRuleCall_3 = (RuleCall)cAlternatives.eContents().get(3);
		private final RuleCall cLetOutDeclParserRuleCall_4 = (RuleCall)cAlternatives.eContents().get(4);
		private final RuleCall cPredDeclParserRuleCall_5 = (RuleCall)cAlternatives.eContents().get(5);
		private final RuleCall cSigDeclParserRuleCall_6 = (RuleCall)cAlternatives.eContents().get(6);
		private final RuleCall cAssertDeclParserRuleCall_7 = (RuleCall)cAlternatives.eContents().get(7);
		private final RuleCall cRunDeclParserRuleCall_8 = (RuleCall)cAlternatives.eContents().get(8);
		private final RuleCall cCheckDeclParserRuleCall_9 = (RuleCall)cAlternatives.eContents().get(9);
		
		/// *
		//	paragraph ::= factDecl | assertDecl | funDecl | cmdDecl | enumDecl | sigDecl
		// * / Paragraph:
		//	EnumDecl | FactDecl | FunDecl | FunDeclWParam | LetOutDecl | PredDecl | SigDecl | AssertDecl | RunDecl | CheckDecl;
		public ParserRule getRule() { return rule; }

		//EnumDecl | FactDecl | FunDecl | FunDeclWParam | LetOutDecl | PredDecl | SigDecl | AssertDecl | RunDecl | CheckDecl
		public Alternatives getAlternatives() { return cAlternatives; }

		//EnumDecl
		public RuleCall getEnumDeclParserRuleCall_0() { return cEnumDeclParserRuleCall_0; }

		//FactDecl
		public RuleCall getFactDeclParserRuleCall_1() { return cFactDeclParserRuleCall_1; }

		//FunDecl
		public RuleCall getFunDeclParserRuleCall_2() { return cFunDeclParserRuleCall_2; }

		//FunDeclWParam
		public RuleCall getFunDeclWParamParserRuleCall_3() { return cFunDeclWParamParserRuleCall_3; }

		//LetOutDecl
		public RuleCall getLetOutDeclParserRuleCall_4() { return cLetOutDeclParserRuleCall_4; }

		//PredDecl
		public RuleCall getPredDeclParserRuleCall_5() { return cPredDeclParserRuleCall_5; }

		//SigDecl
		public RuleCall getSigDeclParserRuleCall_6() { return cSigDeclParserRuleCall_6; }

		//AssertDecl
		public RuleCall getAssertDeclParserRuleCall_7() { return cAssertDeclParserRuleCall_7; }

		//RunDecl
		public RuleCall getRunDeclParserRuleCall_8() { return cRunDeclParserRuleCall_8; }

		//CheckDecl
		public RuleCall getCheckDeclParserRuleCall_9() { return cCheckDeclParserRuleCall_9; }
	}

	public class EnumDeclElements extends AbstractParserRuleElementFinder {
		private final ParserRule rule = (ParserRule) GrammarUtil.findRuleForName(getGrammar(), "EnumDecl");
		private final Group cGroup = (Group)rule.eContents().get(1);
		private final Assignment cDocumentationAssignment_0 = (Assignment)cGroup.eContents().get(0);
		private final RuleCall cDocumentationDOC_COMMENTTerminalRuleCall_0_0 = (RuleCall)cDocumentationAssignment_0.eContents().get(0);
		private final Assignment cEnumNameAssignment_1 = (Assignment)cGroup.eContents().get(1);
		private final RuleCall cEnumNameEnumNameParserRuleCall_1_0 = (RuleCall)cEnumNameAssignment_1.eContents().get(0);
		private final Assignment cLeftCAssignment_2 = (Assignment)cGroup.eContents().get(2);
		private final RuleCall cLeftCLeftCurlyBracketParserRuleCall_2_0 = (RuleCall)cLeftCAssignment_2.eContents().get(0);
		private final Assignment cPropertyEnumAssignment_3 = (Assignment)cGroup.eContents().get(3);
		private final RuleCall cPropertyEnumEnumPropertyNameParserRuleCall_3_0 = (RuleCall)cPropertyEnumAssignment_3.eContents().get(0);
		private final Group cGroup_4 = (Group)cGroup.eContents().get(4);
		private final Assignment cCommaAssignment_4_0 = (Assignment)cGroup_4.eContents().get(0);
		private final RuleCall cCommaCommaParserRuleCall_4_0_0 = (RuleCall)cCommaAssignment_4_0.eContents().get(0);
		private final Assignment cPropertyEnumAssignment_4_1 = (Assignment)cGroup_4.eContents().get(1);
		private final RuleCall cPropertyEnumEnumPropertyNameParserRuleCall_4_1_0 = (RuleCall)cPropertyEnumAssignment_4_1.eContents().get(0);
		private final Assignment cRightCAssignment_5 = (Assignment)cGroup.eContents().get(5);
		private final RuleCall cRightCRightCurlyBracketParserRuleCall_5_0 = (RuleCall)cRightCAssignment_5.eContents().get(0);
		
		/// *
		//	enumDecl ::= "enum" name "{" name  ("," name)*  "}"
		// * / EnumDecl:
		//	documentation+=DOC_COMMENT? enumName=EnumName leftC=LeftCurlyBracket propertyEnum+=EnumPropertyName (comma+=Comma
		//	propertyEnum+=EnumPropertyName)* rightC=RightCurlyBracket;
		public ParserRule getRule() { return rule; }

		//documentation+=DOC_COMMENT? enumName=EnumName leftC=LeftCurlyBracket propertyEnum+=EnumPropertyName (comma+=Comma
		//propertyEnum+=EnumPropertyName)* rightC=RightCurlyBracket
		public Group getGroup() { return cGroup; }

		//documentation+=DOC_COMMENT?
		public Assignment getDocumentationAssignment_0() { return cDocumentationAssignment_0; }

		//DOC_COMMENT
		public RuleCall getDocumentationDOC_COMMENTTerminalRuleCall_0_0() { return cDocumentationDOC_COMMENTTerminalRuleCall_0_0; }

		//enumName=EnumName
		public Assignment getEnumNameAssignment_1() { return cEnumNameAssignment_1; }

		//EnumName
		public RuleCall getEnumNameEnumNameParserRuleCall_1_0() { return cEnumNameEnumNameParserRuleCall_1_0; }

		//leftC=LeftCurlyBracket
		public Assignment getLeftCAssignment_2() { return cLeftCAssignment_2; }

		//LeftCurlyBracket
		public RuleCall getLeftCLeftCurlyBracketParserRuleCall_2_0() { return cLeftCLeftCurlyBracketParserRuleCall_2_0; }

		//propertyEnum+=EnumPropertyName
		public Assignment getPropertyEnumAssignment_3() { return cPropertyEnumAssignment_3; }

		//EnumPropertyName
		public RuleCall getPropertyEnumEnumPropertyNameParserRuleCall_3_0() { return cPropertyEnumEnumPropertyNameParserRuleCall_3_0; }

		//(comma+=Comma propertyEnum+=EnumPropertyName)*
		public Group getGroup_4() { return cGroup_4; }

		//comma+=Comma
		public Assignment getCommaAssignment_4_0() { return cCommaAssignment_4_0; }

		//Comma
		public RuleCall getCommaCommaParserRuleCall_4_0_0() { return cCommaCommaParserRuleCall_4_0_0; }

		//propertyEnum+=EnumPropertyName
		public Assignment getPropertyEnumAssignment_4_1() { return cPropertyEnumAssignment_4_1; }

		//EnumPropertyName
		public RuleCall getPropertyEnumEnumPropertyNameParserRuleCall_4_1_0() { return cPropertyEnumEnumPropertyNameParserRuleCall_4_1_0; }

		//rightC=RightCurlyBracket
		public Assignment getRightCAssignment_5() { return cRightCAssignment_5; }

		//RightCurlyBracket
		public RuleCall getRightCRightCurlyBracketParserRuleCall_5_0() { return cRightCRightCurlyBracketParserRuleCall_5_0; }
	}

	public class FactDeclElements extends AbstractParserRuleElementFinder {
		private final ParserRule rule = (ParserRule) GrammarUtil.findRuleForName(getGrammar(), "FactDecl");
		private final Group cGroup = (Group)rule.eContents().get(1);
		private final Assignment cDocumentationAssignment_0 = (Assignment)cGroup.eContents().get(0);
		private final RuleCall cDocumentationDOC_COMMENTTerminalRuleCall_0_0 = (RuleCall)cDocumentationAssignment_0.eContents().get(0);
		private final Assignment cNameAssignment_1 = (Assignment)cGroup.eContents().get(1);
		private final RuleCall cNameFactNameParserRuleCall_1_0 = (RuleCall)cNameAssignment_1.eContents().get(0);
		private final Assignment cBlockAssignment_2 = (Assignment)cGroup.eContents().get(2);
		private final RuleCall cBlockBlockParserRuleCall_2_0 = (RuleCall)cBlockAssignment_2.eContents().get(0);
		
		/// *
		//	factDecl ::= "fact" [name] block
		// * / FactDecl returns Fact:
		//	documentation+=DOC_COMMENT? name=FactName block=Block;
		public ParserRule getRule() { return rule; }

		//documentation+=DOC_COMMENT? name=FactName block=Block
		public Group getGroup() { return cGroup; }

		//documentation+=DOC_COMMENT?
		public Assignment getDocumentationAssignment_0() { return cDocumentationAssignment_0; }

		//DOC_COMMENT
		public RuleCall getDocumentationDOC_COMMENTTerminalRuleCall_0_0() { return cDocumentationDOC_COMMENTTerminalRuleCall_0_0; }

		//name=FactName
		public Assignment getNameAssignment_1() { return cNameAssignment_1; }

		//FactName
		public RuleCall getNameFactNameParserRuleCall_1_0() { return cNameFactNameParserRuleCall_1_0; }

		//block=Block
		public Assignment getBlockAssignment_2() { return cBlockAssignment_2; }

		//Block
		public RuleCall getBlockBlockParserRuleCall_2_0() { return cBlockBlockParserRuleCall_2_0; }
	}

	public class FunDeclElements extends AbstractParserRuleElementFinder {
		private final ParserRule rule = (ParserRule) GrammarUtil.findRuleForName(getGrammar(), "FunDecl");
		private final Group cGroup = (Group)rule.eContents().get(1);
		private final Assignment cDocumentationAssignment_0 = (Assignment)cGroup.eContents().get(0);
		private final RuleCall cDocumentationDOC_COMMENTTerminalRuleCall_0_0 = (RuleCall)cDocumentationAssignment_0.eContents().get(0);
		private final Keyword cPrivateKeyword_1 = (Keyword)cGroup.eContents().get(1);
		private final Keyword cFunKeyword_2 = (Keyword)cGroup.eContents().get(2);
		private final Group cGroup_3 = (Group)cGroup.eContents().get(3);
		private final Assignment cRefAssignment_3_0 = (Assignment)cGroup_3.eContents().get(0);
		private final RuleCall cRefRefParserRuleCall_3_0_0 = (RuleCall)cRefAssignment_3_0.eContents().get(0);
		private final Assignment cDotAssignment_3_1 = (Assignment)cGroup_3.eContents().get(1);
		private final RuleCall cDotDotParserRuleCall_3_1_0 = (RuleCall)cDotAssignment_3_1.eContents().get(0);
		private final Assignment cNameAssignment_4 = (Assignment)cGroup.eContents().get(4);
		private final RuleCall cNameFunctionNameParserRuleCall_4_0 = (RuleCall)cNameAssignment_4.eContents().get(0);
		private final Alternatives cAlternatives_5 = (Alternatives)cGroup.eContents().get(5);
		private final Group cGroup_5_0 = (Group)cAlternatives_5.eContents().get(0);
		private final Assignment cLeftSAssignment_5_0_0 = (Assignment)cGroup_5_0.eContents().get(0);
		private final RuleCall cLeftSLeftSquareBracketKeywordParserRuleCall_5_0_0_0 = (RuleCall)cLeftSAssignment_5_0_0.eContents().get(0);
		private final Group cGroup_5_0_1 = (Group)cGroup_5_0.eContents().get(1);
		private final Assignment cParamAssignment_5_0_1_0 = (Assignment)cGroup_5_0_1.eContents().get(0);
		private final RuleCall cParamParamParserRuleCall_5_0_1_0_0 = (RuleCall)cParamAssignment_5_0_1_0.eContents().get(0);
		private final Group cGroup_5_0_1_1 = (Group)cGroup_5_0_1.eContents().get(1);
		private final Assignment cCommaAssignment_5_0_1_1_0 = (Assignment)cGroup_5_0_1_1.eContents().get(0);
		private final RuleCall cCommaCommaParserRuleCall_5_0_1_1_0_0 = (RuleCall)cCommaAssignment_5_0_1_1_0.eContents().get(0);
		private final Assignment cParamAssignment_5_0_1_1_1 = (Assignment)cGroup_5_0_1_1.eContents().get(1);
		private final RuleCall cParamParamParserRuleCall_5_0_1_1_1_0 = (RuleCall)cParamAssignment_5_0_1_1_1.eContents().get(0);
		private final Assignment cRightSAssignment_5_0_2 = (Assignment)cGroup_5_0.eContents().get(2);
		private final RuleCall cRightSRightSquareBracketKeywordParserRuleCall_5_0_2_0 = (RuleCall)cRightSAssignment_5_0_2.eContents().get(0);
		private final Group cGroup_5_1 = (Group)cAlternatives_5.eContents().get(1);
		private final Assignment cLeftPAssignment_5_1_0 = (Assignment)cGroup_5_1.eContents().get(0);
		private final RuleCall cLeftPLeftParenthesisParserRuleCall_5_1_0_0 = (RuleCall)cLeftPAssignment_5_1_0.eContents().get(0);
		private final Group cGroup_5_1_1 = (Group)cGroup_5_1.eContents().get(1);
		private final Assignment cDeclAssignment_5_1_1_0 = (Assignment)cGroup_5_1_1.eContents().get(0);
		private final RuleCall cDeclDeclParserRuleCall_5_1_1_0_0 = (RuleCall)cDeclAssignment_5_1_1_0.eContents().get(0);
		private final Group cGroup_5_1_1_1 = (Group)cGroup_5_1_1.eContents().get(1);
		private final Assignment cCommaAssignment_5_1_1_1_0 = (Assignment)cGroup_5_1_1_1.eContents().get(0);
		private final RuleCall cCommaCommaParserRuleCall_5_1_1_1_0_0 = (RuleCall)cCommaAssignment_5_1_1_1_0.eContents().get(0);
		private final Assignment cDeclAssignment_5_1_1_1_1 = (Assignment)cGroup_5_1_1_1.eContents().get(1);
		private final RuleCall cDeclDeclParserRuleCall_5_1_1_1_1_0 = (RuleCall)cDeclAssignment_5_1_1_1_1.eContents().get(0);
		private final Assignment cRightPAssignment_5_1_2 = (Assignment)cGroup_5_1.eContents().get(2);
		private final RuleCall cRightPRightParenthesisParserRuleCall_5_1_2_0 = (RuleCall)cRightPAssignment_5_1_2.eContents().get(0);
		private final Assignment cColonAssignment_6 = (Assignment)cGroup.eContents().get(6);
		private final RuleCall cColonColonParserRuleCall_6_0 = (RuleCall)cColonAssignment_6.eContents().get(0);
		private final Assignment cExprAssignment_7 = (Assignment)cGroup.eContents().get(7);
		private final RuleCall cExprExpressionParserRuleCall_7_0 = (RuleCall)cExprAssignment_7.eContents().get(0);
		private final Assignment cBlockAssignment_8 = (Assignment)cGroup.eContents().get(8);
		private final RuleCall cBlockBlockParserRuleCall_8_0 = (RuleCall)cBlockAssignment_8.eContents().get(0);
		
		/// *
		//	funDecl ::= ["private"] "fun" [ref "."] name "(" decl,* ")" ":" expr block
		//	funDecl ::= ["private"] "fun" [ref "."] name "[" decl,* "]" ":" expr block
		//	funDecl ::= ["private"] "fun" [ref "."] name                ":" expr block
		// * / FunDecl returns Function:
		//	documentation+=DOC_COMMENT? "private"? "fun" (ref=Ref dot=Dot)? name=FunctionName (leftS=LeftSquareBracketKeyword
		//	(param+=Param (comma+=Comma param+=Param)*)? rightS=RightSquareBracketKeyword | leftP=LeftParenthesis (decl+=Decl
		//	(comma+=Comma decl+=Decl)*)? rightP=RightParenthesis) colon=Colon expr=Expression block=Block;
		public ParserRule getRule() { return rule; }

		//documentation+=DOC_COMMENT? "private"? "fun" (ref=Ref dot=Dot)? name=FunctionName (leftS=LeftSquareBracketKeyword
		//(param+=Param (comma+=Comma param+=Param)*)? rightS=RightSquareBracketKeyword | leftP=LeftParenthesis (decl+=Decl
		//(comma+=Comma decl+=Decl)*)? rightP=RightParenthesis) colon=Colon expr=Expression block=Block
		public Group getGroup() { return cGroup; }

		//documentation+=DOC_COMMENT?
		public Assignment getDocumentationAssignment_0() { return cDocumentationAssignment_0; }

		//DOC_COMMENT
		public RuleCall getDocumentationDOC_COMMENTTerminalRuleCall_0_0() { return cDocumentationDOC_COMMENTTerminalRuleCall_0_0; }

		//"private"?
		public Keyword getPrivateKeyword_1() { return cPrivateKeyword_1; }

		//"fun"
		public Keyword getFunKeyword_2() { return cFunKeyword_2; }

		//(ref=Ref dot=Dot)?
		public Group getGroup_3() { return cGroup_3; }

		//ref=Ref
		public Assignment getRefAssignment_3_0() { return cRefAssignment_3_0; }

		//Ref
		public RuleCall getRefRefParserRuleCall_3_0_0() { return cRefRefParserRuleCall_3_0_0; }

		//dot=Dot
		public Assignment getDotAssignment_3_1() { return cDotAssignment_3_1; }

		//Dot
		public RuleCall getDotDotParserRuleCall_3_1_0() { return cDotDotParserRuleCall_3_1_0; }

		//name=FunctionName
		public Assignment getNameAssignment_4() { return cNameAssignment_4; }

		//FunctionName
		public RuleCall getNameFunctionNameParserRuleCall_4_0() { return cNameFunctionNameParserRuleCall_4_0; }

		//leftS=LeftSquareBracketKeyword (param+=Param (comma+=Comma param+=Param)*)? rightS=RightSquareBracketKeyword |
		//leftP=LeftParenthesis (decl+=Decl (comma+=Comma decl+=Decl)*)? rightP=RightParenthesis
		public Alternatives getAlternatives_5() { return cAlternatives_5; }

		//leftS=LeftSquareBracketKeyword (param+=Param (comma+=Comma param+=Param)*)? rightS=RightSquareBracketKeyword
		public Group getGroup_5_0() { return cGroup_5_0; }

		//leftS=LeftSquareBracketKeyword
		public Assignment getLeftSAssignment_5_0_0() { return cLeftSAssignment_5_0_0; }

		//LeftSquareBracketKeyword
		public RuleCall getLeftSLeftSquareBracketKeywordParserRuleCall_5_0_0_0() { return cLeftSLeftSquareBracketKeywordParserRuleCall_5_0_0_0; }

		//(param+=Param (comma+=Comma param+=Param)*)?
		public Group getGroup_5_0_1() { return cGroup_5_0_1; }

		//param+=Param
		public Assignment getParamAssignment_5_0_1_0() { return cParamAssignment_5_0_1_0; }

		//Param
		public RuleCall getParamParamParserRuleCall_5_0_1_0_0() { return cParamParamParserRuleCall_5_0_1_0_0; }

		//(comma+=Comma param+=Param)*
		public Group getGroup_5_0_1_1() { return cGroup_5_0_1_1; }

		//comma+=Comma
		public Assignment getCommaAssignment_5_0_1_1_0() { return cCommaAssignment_5_0_1_1_0; }

		//Comma
		public RuleCall getCommaCommaParserRuleCall_5_0_1_1_0_0() { return cCommaCommaParserRuleCall_5_0_1_1_0_0; }

		//param+=Param
		public Assignment getParamAssignment_5_0_1_1_1() { return cParamAssignment_5_0_1_1_1; }

		//Param
		public RuleCall getParamParamParserRuleCall_5_0_1_1_1_0() { return cParamParamParserRuleCall_5_0_1_1_1_0; }

		//rightS=RightSquareBracketKeyword
		public Assignment getRightSAssignment_5_0_2() { return cRightSAssignment_5_0_2; }

		//RightSquareBracketKeyword
		public RuleCall getRightSRightSquareBracketKeywordParserRuleCall_5_0_2_0() { return cRightSRightSquareBracketKeywordParserRuleCall_5_0_2_0; }

		//leftP=LeftParenthesis (decl+=Decl (comma+=Comma decl+=Decl)*)? rightP=RightParenthesis
		public Group getGroup_5_1() { return cGroup_5_1; }

		//leftP=LeftParenthesis
		public Assignment getLeftPAssignment_5_1_0() { return cLeftPAssignment_5_1_0; }

		//LeftParenthesis
		public RuleCall getLeftPLeftParenthesisParserRuleCall_5_1_0_0() { return cLeftPLeftParenthesisParserRuleCall_5_1_0_0; }

		//(decl+=Decl (comma+=Comma decl+=Decl)*)?
		public Group getGroup_5_1_1() { return cGroup_5_1_1; }

		//decl+=Decl
		public Assignment getDeclAssignment_5_1_1_0() { return cDeclAssignment_5_1_1_0; }

		//Decl
		public RuleCall getDeclDeclParserRuleCall_5_1_1_0_0() { return cDeclDeclParserRuleCall_5_1_1_0_0; }

		//(comma+=Comma decl+=Decl)*
		public Group getGroup_5_1_1_1() { return cGroup_5_1_1_1; }

		//comma+=Comma
		public Assignment getCommaAssignment_5_1_1_1_0() { return cCommaAssignment_5_1_1_1_0; }

		//Comma
		public RuleCall getCommaCommaParserRuleCall_5_1_1_1_0_0() { return cCommaCommaParserRuleCall_5_1_1_1_0_0; }

		//decl+=Decl
		public Assignment getDeclAssignment_5_1_1_1_1() { return cDeclAssignment_5_1_1_1_1; }

		//Decl
		public RuleCall getDeclDeclParserRuleCall_5_1_1_1_1_0() { return cDeclDeclParserRuleCall_5_1_1_1_1_0; }

		//rightP=RightParenthesis
		public Assignment getRightPAssignment_5_1_2() { return cRightPAssignment_5_1_2; }

		//RightParenthesis
		public RuleCall getRightPRightParenthesisParserRuleCall_5_1_2_0() { return cRightPRightParenthesisParserRuleCall_5_1_2_0; }

		//colon=Colon
		public Assignment getColonAssignment_6() { return cColonAssignment_6; }

		//Colon
		public RuleCall getColonColonParserRuleCall_6_0() { return cColonColonParserRuleCall_6_0; }

		//expr=Expression
		public Assignment getExprAssignment_7() { return cExprAssignment_7; }

		//Expression
		public RuleCall getExprExpressionParserRuleCall_7_0() { return cExprExpressionParserRuleCall_7_0; }

		//block=Block
		public Assignment getBlockAssignment_8() { return cBlockAssignment_8; }

		//Block
		public RuleCall getBlockBlockParserRuleCall_8_0() { return cBlockBlockParserRuleCall_8_0; }
	}

	public class FunDeclWParamElements extends AbstractParserRuleElementFinder {
		private final ParserRule rule = (ParserRule) GrammarUtil.findRuleForName(getGrammar(), "FunDeclWParam");
		private final Group cGroup = (Group)rule.eContents().get(1);
		private final Assignment cDocumentationAssignment_0 = (Assignment)cGroup.eContents().get(0);
		private final RuleCall cDocumentationDOC_COMMENTTerminalRuleCall_0_0 = (RuleCall)cDocumentationAssignment_0.eContents().get(0);
		private final Keyword cPrivateKeyword_1 = (Keyword)cGroup.eContents().get(1);
		private final Keyword cFunKeyword_2 = (Keyword)cGroup.eContents().get(2);
		private final Group cGroup_3 = (Group)cGroup.eContents().get(3);
		private final Assignment cRefAssignment_3_0 = (Assignment)cGroup_3.eContents().get(0);
		private final RuleCall cRefRefParserRuleCall_3_0_0 = (RuleCall)cRefAssignment_3_0.eContents().get(0);
		private final Assignment cDotAssignment_3_1 = (Assignment)cGroup_3.eContents().get(1);
		private final RuleCall cDotDotParserRuleCall_3_1_0 = (RuleCall)cDotAssignment_3_1.eContents().get(0);
		private final Assignment cNameAssignment_4 = (Assignment)cGroup.eContents().get(4);
		private final RuleCall cNameFunctionNamewParamParserRuleCall_4_0 = (RuleCall)cNameAssignment_4.eContents().get(0);
		private final Assignment cColonAssignment_5 = (Assignment)cGroup.eContents().get(5);
		private final RuleCall cColonColonParserRuleCall_5_0 = (RuleCall)cColonAssignment_5.eContents().get(0);
		private final Assignment cExprAssignment_6 = (Assignment)cGroup.eContents().get(6);
		private final RuleCall cExprExpressionParserRuleCall_6_0 = (RuleCall)cExprAssignment_6.eContents().get(0);
		private final Assignment cBlockAssignment_7 = (Assignment)cGroup.eContents().get(7);
		private final RuleCall cBlockBlockParserRuleCall_7_0 = (RuleCall)cBlockAssignment_7.eContents().get(0);
		
		/// *
		//	funDecl ::= ["private"] "fun" [ref "."] name "(" decl,* ")" ":" expr block
		//	funDecl ::= ["private"] "fun" [ref "."] name "[" decl,* "]" ":" expr block
		//	funDecl ::= ["private"] "fun" [ref "."] name                ":" expr block
		// * / / * without parameters* / FunDeclWParam returns Function:
		//	documentation+=DOC_COMMENT? "private"? "fun" (ref=Ref dot=Dot)? name=FunctionNamewParam colon=Colon expr=Expression
		//	block=Block;
		public ParserRule getRule() { return rule; }

		//documentation+=DOC_COMMENT? "private"? "fun" (ref=Ref dot=Dot)? name=FunctionNamewParam colon=Colon expr=Expression
		//block=Block
		public Group getGroup() { return cGroup; }

		//documentation+=DOC_COMMENT?
		public Assignment getDocumentationAssignment_0() { return cDocumentationAssignment_0; }

		//DOC_COMMENT
		public RuleCall getDocumentationDOC_COMMENTTerminalRuleCall_0_0() { return cDocumentationDOC_COMMENTTerminalRuleCall_0_0; }

		//"private"?
		public Keyword getPrivateKeyword_1() { return cPrivateKeyword_1; }

		//"fun"
		public Keyword getFunKeyword_2() { return cFunKeyword_2; }

		//(ref=Ref dot=Dot)?
		public Group getGroup_3() { return cGroup_3; }

		//ref=Ref
		public Assignment getRefAssignment_3_0() { return cRefAssignment_3_0; }

		//Ref
		public RuleCall getRefRefParserRuleCall_3_0_0() { return cRefRefParserRuleCall_3_0_0; }

		//dot=Dot
		public Assignment getDotAssignment_3_1() { return cDotAssignment_3_1; }

		//Dot
		public RuleCall getDotDotParserRuleCall_3_1_0() { return cDotDotParserRuleCall_3_1_0; }

		//name=FunctionNamewParam
		public Assignment getNameAssignment_4() { return cNameAssignment_4; }

		//FunctionNamewParam
		public RuleCall getNameFunctionNamewParamParserRuleCall_4_0() { return cNameFunctionNamewParamParserRuleCall_4_0; }

		//colon=Colon
		public Assignment getColonAssignment_5() { return cColonAssignment_5; }

		//Colon
		public RuleCall getColonColonParserRuleCall_5_0() { return cColonColonParserRuleCall_5_0; }

		//expr=Expression
		public Assignment getExprAssignment_6() { return cExprAssignment_6; }

		//Expression
		public RuleCall getExprExpressionParserRuleCall_6_0() { return cExprExpressionParserRuleCall_6_0; }

		//block=Block
		public Assignment getBlockAssignment_7() { return cBlockAssignment_7; }

		//Block
		public RuleCall getBlockBlockParserRuleCall_7_0() { return cBlockBlockParserRuleCall_7_0; }
	}

	public class LetOutDeclElements extends AbstractParserRuleElementFinder {
		private final ParserRule rule = (ParserRule) GrammarUtil.findRuleForName(getGrammar(), "LetOutDecl");
		private final Group cGroup = (Group)rule.eContents().get(1);
		private final Assignment cDocumentationAssignment_0 = (Assignment)cGroup.eContents().get(0);
		private final RuleCall cDocumentationDOC_COMMENTTerminalRuleCall_0_0 = (RuleCall)cDocumentationAssignment_0.eContents().get(0);
		private final Assignment cNameAssignment_1 = (Assignment)cGroup.eContents().get(1);
		private final RuleCall cNameLetNameParserRuleCall_1_0 = (RuleCall)cNameAssignment_1.eContents().get(0);
		private final Group cGroup_2 = (Group)cGroup.eContents().get(2);
		private final Assignment cLeftSAssignment_2_0 = (Assignment)cGroup_2.eContents().get(0);
		private final RuleCall cLeftSLeftSquareBracketKeywordParserRuleCall_2_0_0 = (RuleCall)cLeftSAssignment_2_0.eContents().get(0);
		private final Group cGroup_2_1 = (Group)cGroup_2.eContents().get(1);
		private final Assignment cNameRefAssignment_2_1_0 = (Assignment)cGroup_2_1.eContents().get(0);
		private final RuleCall cNameRefReferencesNameParserRuleCall_2_1_0_0 = (RuleCall)cNameRefAssignment_2_1_0.eContents().get(0);
		private final Group cGroup_2_1_1 = (Group)cGroup_2_1.eContents().get(1);
		private final Assignment cCommaAssignment_2_1_1_0 = (Assignment)cGroup_2_1_1.eContents().get(0);
		private final RuleCall cCommaCommaParserRuleCall_2_1_1_0_0 = (RuleCall)cCommaAssignment_2_1_1_0.eContents().get(0);
		private final Assignment cNameRefAssignment_2_1_1_1 = (Assignment)cGroup_2_1_1.eContents().get(1);
		private final RuleCall cNameRefReferencesNameParserRuleCall_2_1_1_1_0 = (RuleCall)cNameRefAssignment_2_1_1_1.eContents().get(0);
		private final Assignment cRightSAssignment_2_2 = (Assignment)cGroup_2.eContents().get(2);
		private final RuleCall cRightSRightSquareBracketKeywordParserRuleCall_2_2_0 = (RuleCall)cRightSAssignment_2_2.eContents().get(0);
		private final Alternatives cAlternatives_3 = (Alternatives)cGroup.eContents().get(3);
		private final Assignment cBlockAssignment_3_0 = (Assignment)cAlternatives_3.eContents().get(0);
		private final RuleCall cBlockBlockParserRuleCall_3_0_0 = (RuleCall)cBlockAssignment_3_0.eContents().get(0);
		private final Group cGroup_3_1 = (Group)cAlternatives_3.eContents().get(1);
		private final Keyword cEqualsSignKeyword_3_1_0 = (Keyword)cGroup_3_1.eContents().get(0);
		private final Assignment cExprNameAssignment_3_1_1 = (Assignment)cGroup_3_1.eContents().get(1);
		private final RuleCall cExprNameExpressionParserRuleCall_3_1_1_0 = (RuleCall)cExprNameAssignment_3_1_1.eContents().get(0);
		
		//LetOutDecl returns Let:
		//	documentation+=DOC_COMMENT? name=LetName (leftS=LeftSquareBracketKeyword (nameRef+=ReferencesName (comma+=Comma
		//	nameRef+=ReferencesName)*)? rightS=RightSquareBracketKeyword)? (block=Block | "=" exprName=Expression);
		public ParserRule getRule() { return rule; }

		//documentation+=DOC_COMMENT? name=LetName (leftS=LeftSquareBracketKeyword (nameRef+=ReferencesName (comma+=Comma
		//nameRef+=ReferencesName)*)? rightS=RightSquareBracketKeyword)? (block=Block | "=" exprName=Expression)
		public Group getGroup() { return cGroup; }

		//documentation+=DOC_COMMENT?
		public Assignment getDocumentationAssignment_0() { return cDocumentationAssignment_0; }

		//DOC_COMMENT
		public RuleCall getDocumentationDOC_COMMENTTerminalRuleCall_0_0() { return cDocumentationDOC_COMMENTTerminalRuleCall_0_0; }

		//name=LetName
		public Assignment getNameAssignment_1() { return cNameAssignment_1; }

		//LetName
		public RuleCall getNameLetNameParserRuleCall_1_0() { return cNameLetNameParserRuleCall_1_0; }

		//(leftS=LeftSquareBracketKeyword (nameRef+=ReferencesName (comma+=Comma nameRef+=ReferencesName)*)?
		//rightS=RightSquareBracketKeyword)?
		public Group getGroup_2() { return cGroup_2; }

		//leftS=LeftSquareBracketKeyword
		public Assignment getLeftSAssignment_2_0() { return cLeftSAssignment_2_0; }

		//LeftSquareBracketKeyword
		public RuleCall getLeftSLeftSquareBracketKeywordParserRuleCall_2_0_0() { return cLeftSLeftSquareBracketKeywordParserRuleCall_2_0_0; }

		//(nameRef+=ReferencesName (comma+=Comma nameRef+=ReferencesName)*)?
		public Group getGroup_2_1() { return cGroup_2_1; }

		//nameRef+=ReferencesName
		public Assignment getNameRefAssignment_2_1_0() { return cNameRefAssignment_2_1_0; }

		//ReferencesName
		public RuleCall getNameRefReferencesNameParserRuleCall_2_1_0_0() { return cNameRefReferencesNameParserRuleCall_2_1_0_0; }

		//(comma+=Comma nameRef+=ReferencesName)*
		public Group getGroup_2_1_1() { return cGroup_2_1_1; }

		//comma+=Comma
		public Assignment getCommaAssignment_2_1_1_0() { return cCommaAssignment_2_1_1_0; }

		//Comma
		public RuleCall getCommaCommaParserRuleCall_2_1_1_0_0() { return cCommaCommaParserRuleCall_2_1_1_0_0; }

		//nameRef+=ReferencesName
		public Assignment getNameRefAssignment_2_1_1_1() { return cNameRefAssignment_2_1_1_1; }

		//ReferencesName
		public RuleCall getNameRefReferencesNameParserRuleCall_2_1_1_1_0() { return cNameRefReferencesNameParserRuleCall_2_1_1_1_0; }

		//rightS=RightSquareBracketKeyword
		public Assignment getRightSAssignment_2_2() { return cRightSAssignment_2_2; }

		//RightSquareBracketKeyword
		public RuleCall getRightSRightSquareBracketKeywordParserRuleCall_2_2_0() { return cRightSRightSquareBracketKeywordParserRuleCall_2_2_0; }

		//block=Block | "=" exprName=Expression
		public Alternatives getAlternatives_3() { return cAlternatives_3; }

		//block=Block
		public Assignment getBlockAssignment_3_0() { return cBlockAssignment_3_0; }

		//Block
		public RuleCall getBlockBlockParserRuleCall_3_0_0() { return cBlockBlockParserRuleCall_3_0_0; }

		//"=" exprName=Expression
		public Group getGroup_3_1() { return cGroup_3_1; }

		//"="
		public Keyword getEqualsSignKeyword_3_1_0() { return cEqualsSignKeyword_3_1_0; }

		//exprName=Expression
		public Assignment getExprNameAssignment_3_1_1() { return cExprNameAssignment_3_1_1; }

		//Expression
		public RuleCall getExprNameExpressionParserRuleCall_3_1_1_0() { return cExprNameExpressionParserRuleCall_3_1_1_0; }
	}

	public class PredDeclElements extends AbstractParserRuleElementFinder {
		private final ParserRule rule = (ParserRule) GrammarUtil.findRuleForName(getGrammar(), "PredDecl");
		private final Group cGroup = (Group)rule.eContents().get(1);
		private final Assignment cDocumentationAssignment_0 = (Assignment)cGroup.eContents().get(0);
		private final RuleCall cDocumentationDOC_COMMENTTerminalRuleCall_0_0 = (RuleCall)cDocumentationAssignment_0.eContents().get(0);
		private final Keyword cPrivateKeyword_1 = (Keyword)cGroup.eContents().get(1);
		private final Keyword cPredKeyword_2 = (Keyword)cGroup.eContents().get(2);
		private final Group cGroup_3 = (Group)cGroup.eContents().get(3);
		private final Assignment cRefAssignment_3_0 = (Assignment)cGroup_3.eContents().get(0);
		private final RuleCall cRefRefParserRuleCall_3_0_0 = (RuleCall)cRefAssignment_3_0.eContents().get(0);
		private final Assignment cDotAssignment_3_1 = (Assignment)cGroup_3.eContents().get(1);
		private final RuleCall cDotDotParserRuleCall_3_1_0 = (RuleCall)cDotAssignment_3_1.eContents().get(0);
		private final Assignment cNameAssignment_4 = (Assignment)cGroup.eContents().get(4);
		private final RuleCall cNamePredicateNameParserRuleCall_4_0 = (RuleCall)cNameAssignment_4.eContents().get(0);
		private final Alternatives cAlternatives_5 = (Alternatives)cGroup.eContents().get(5);
		private final Group cGroup_5_0 = (Group)cAlternatives_5.eContents().get(0);
		private final Assignment cLeftSAssignment_5_0_0 = (Assignment)cGroup_5_0.eContents().get(0);
		private final RuleCall cLeftSLeftSquareBracketKeywordParserRuleCall_5_0_0_0 = (RuleCall)cLeftSAssignment_5_0_0.eContents().get(0);
		private final Group cGroup_5_0_1 = (Group)cGroup_5_0.eContents().get(1);
		private final Assignment cParamAssignment_5_0_1_0 = (Assignment)cGroup_5_0_1.eContents().get(0);
		private final RuleCall cParamParamParserRuleCall_5_0_1_0_0 = (RuleCall)cParamAssignment_5_0_1_0.eContents().get(0);
		private final Group cGroup_5_0_1_1 = (Group)cGroup_5_0_1.eContents().get(1);
		private final Assignment cCommaAssignment_5_0_1_1_0 = (Assignment)cGroup_5_0_1_1.eContents().get(0);
		private final RuleCall cCommaCommaParserRuleCall_5_0_1_1_0_0 = (RuleCall)cCommaAssignment_5_0_1_1_0.eContents().get(0);
		private final Assignment cParamAssignment_5_0_1_1_1 = (Assignment)cGroup_5_0_1_1.eContents().get(1);
		private final RuleCall cParamParamParserRuleCall_5_0_1_1_1_0 = (RuleCall)cParamAssignment_5_0_1_1_1.eContents().get(0);
		private final Assignment cRightSAssignment_5_0_2 = (Assignment)cGroup_5_0.eContents().get(2);
		private final RuleCall cRightSRightSquareBracketKeywordParserRuleCall_5_0_2_0 = (RuleCall)cRightSAssignment_5_0_2.eContents().get(0);
		private final Group cGroup_5_1 = (Group)cAlternatives_5.eContents().get(1);
		private final Assignment cLeftPAssignment_5_1_0 = (Assignment)cGroup_5_1.eContents().get(0);
		private final RuleCall cLeftPLeftParenthesisParserRuleCall_5_1_0_0 = (RuleCall)cLeftPAssignment_5_1_0.eContents().get(0);
		private final Group cGroup_5_1_1 = (Group)cGroup_5_1.eContents().get(1);
		private final Assignment cParamAssignment_5_1_1_0 = (Assignment)cGroup_5_1_1.eContents().get(0);
		private final RuleCall cParamParamParserRuleCall_5_1_1_0_0 = (RuleCall)cParamAssignment_5_1_1_0.eContents().get(0);
		private final Group cGroup_5_1_1_1 = (Group)cGroup_5_1_1.eContents().get(1);
		private final Assignment cCommaAssignment_5_1_1_1_0 = (Assignment)cGroup_5_1_1_1.eContents().get(0);
		private final RuleCall cCommaCommaParserRuleCall_5_1_1_1_0_0 = (RuleCall)cCommaAssignment_5_1_1_1_0.eContents().get(0);
		private final Assignment cParamAssignment_5_1_1_1_1 = (Assignment)cGroup_5_1_1_1.eContents().get(1);
		private final RuleCall cParamParamParserRuleCall_5_1_1_1_1_0 = (RuleCall)cParamAssignment_5_1_1_1_1.eContents().get(0);
		private final Assignment cRightPAssignment_5_1_2 = (Assignment)cGroup_5_1.eContents().get(2);
		private final RuleCall cRightPRightParenthesisParserRuleCall_5_1_2_0 = (RuleCall)cRightPAssignment_5_1_2.eContents().get(0);
		private final Assignment cBlockAssignment_6 = (Assignment)cGroup.eContents().get(6);
		private final RuleCall cBlockBlockParserRuleCall_6_0 = (RuleCall)cBlockAssignment_6.eContents().get(0);
		
		/// *
		//	funDecl ::= ["private"] "pred" [ref "."] name "(" decl,* ")" block
		//	funDecl ::= ["private"] "pred" [ref "."] name "[" decl,* "]" block
		//	funDecl ::= ["private"] "pred" [ref "."] name                block
		// * / PredDecl returns Predicate:
		//	documentation+=DOC_COMMENT? "private"? "pred" (ref=Ref dot=Dot)? name=PredicateName (leftS=LeftSquareBracketKeyword
		//	(param+=Param (comma+=Comma param+=Param)*)? rightS=RightSquareBracketKeyword | leftP=LeftParenthesis (param+=Param
		//	(comma+=Comma param+=Param)*)? rightP=RightParenthesis)? block=Block;
		public ParserRule getRule() { return rule; }

		//documentation+=DOC_COMMENT? "private"? "pred" (ref=Ref dot=Dot)? name=PredicateName (leftS=LeftSquareBracketKeyword
		//(param+=Param (comma+=Comma param+=Param)*)? rightS=RightSquareBracketKeyword | leftP=LeftParenthesis (param+=Param
		//(comma+=Comma param+=Param)*)? rightP=RightParenthesis)? block=Block
		public Group getGroup() { return cGroup; }

		//documentation+=DOC_COMMENT?
		public Assignment getDocumentationAssignment_0() { return cDocumentationAssignment_0; }

		//DOC_COMMENT
		public RuleCall getDocumentationDOC_COMMENTTerminalRuleCall_0_0() { return cDocumentationDOC_COMMENTTerminalRuleCall_0_0; }

		//"private"?
		public Keyword getPrivateKeyword_1() { return cPrivateKeyword_1; }

		//"pred"
		public Keyword getPredKeyword_2() { return cPredKeyword_2; }

		//(ref=Ref dot=Dot)?
		public Group getGroup_3() { return cGroup_3; }

		//ref=Ref
		public Assignment getRefAssignment_3_0() { return cRefAssignment_3_0; }

		//Ref
		public RuleCall getRefRefParserRuleCall_3_0_0() { return cRefRefParserRuleCall_3_0_0; }

		//dot=Dot
		public Assignment getDotAssignment_3_1() { return cDotAssignment_3_1; }

		//Dot
		public RuleCall getDotDotParserRuleCall_3_1_0() { return cDotDotParserRuleCall_3_1_0; }

		//name=PredicateName
		public Assignment getNameAssignment_4() { return cNameAssignment_4; }

		//PredicateName
		public RuleCall getNamePredicateNameParserRuleCall_4_0() { return cNamePredicateNameParserRuleCall_4_0; }

		//(leftS=LeftSquareBracketKeyword (param+=Param (comma+=Comma param+=Param)*)? rightS=RightSquareBracketKeyword |
		//leftP=LeftParenthesis (param+=Param (comma+=Comma param+=Param)*)? rightP=RightParenthesis)?
		public Alternatives getAlternatives_5() { return cAlternatives_5; }

		//leftS=LeftSquareBracketKeyword (param+=Param (comma+=Comma param+=Param)*)? rightS=RightSquareBracketKeyword
		public Group getGroup_5_0() { return cGroup_5_0; }

		//leftS=LeftSquareBracketKeyword
		public Assignment getLeftSAssignment_5_0_0() { return cLeftSAssignment_5_0_0; }

		//LeftSquareBracketKeyword
		public RuleCall getLeftSLeftSquareBracketKeywordParserRuleCall_5_0_0_0() { return cLeftSLeftSquareBracketKeywordParserRuleCall_5_0_0_0; }

		//(param+=Param (comma+=Comma param+=Param)*)?
		public Group getGroup_5_0_1() { return cGroup_5_0_1; }

		//param+=Param
		public Assignment getParamAssignment_5_0_1_0() { return cParamAssignment_5_0_1_0; }

		//Param
		public RuleCall getParamParamParserRuleCall_5_0_1_0_0() { return cParamParamParserRuleCall_5_0_1_0_0; }

		//(comma+=Comma param+=Param)*
		public Group getGroup_5_0_1_1() { return cGroup_5_0_1_1; }

		//comma+=Comma
		public Assignment getCommaAssignment_5_0_1_1_0() { return cCommaAssignment_5_0_1_1_0; }

		//Comma
		public RuleCall getCommaCommaParserRuleCall_5_0_1_1_0_0() { return cCommaCommaParserRuleCall_5_0_1_1_0_0; }

		//param+=Param
		public Assignment getParamAssignment_5_0_1_1_1() { return cParamAssignment_5_0_1_1_1; }

		//Param
		public RuleCall getParamParamParserRuleCall_5_0_1_1_1_0() { return cParamParamParserRuleCall_5_0_1_1_1_0; }

		//rightS=RightSquareBracketKeyword
		public Assignment getRightSAssignment_5_0_2() { return cRightSAssignment_5_0_2; }

		//RightSquareBracketKeyword
		public RuleCall getRightSRightSquareBracketKeywordParserRuleCall_5_0_2_0() { return cRightSRightSquareBracketKeywordParserRuleCall_5_0_2_0; }

		//leftP=LeftParenthesis (param+=Param (comma+=Comma param+=Param)*)? rightP=RightParenthesis
		public Group getGroup_5_1() { return cGroup_5_1; }

		//leftP=LeftParenthesis
		public Assignment getLeftPAssignment_5_1_0() { return cLeftPAssignment_5_1_0; }

		//LeftParenthesis
		public RuleCall getLeftPLeftParenthesisParserRuleCall_5_1_0_0() { return cLeftPLeftParenthesisParserRuleCall_5_1_0_0; }

		//(param+=Param (comma+=Comma param+=Param)*)?
		public Group getGroup_5_1_1() { return cGroup_5_1_1; }

		//param+=Param
		public Assignment getParamAssignment_5_1_1_0() { return cParamAssignment_5_1_1_0; }

		//Param
		public RuleCall getParamParamParserRuleCall_5_1_1_0_0() { return cParamParamParserRuleCall_5_1_1_0_0; }

		//(comma+=Comma param+=Param)*
		public Group getGroup_5_1_1_1() { return cGroup_5_1_1_1; }

		//comma+=Comma
		public Assignment getCommaAssignment_5_1_1_1_0() { return cCommaAssignment_5_1_1_1_0; }

		//Comma
		public RuleCall getCommaCommaParserRuleCall_5_1_1_1_0_0() { return cCommaCommaParserRuleCall_5_1_1_1_0_0; }

		//param+=Param
		public Assignment getParamAssignment_5_1_1_1_1() { return cParamAssignment_5_1_1_1_1; }

		//Param
		public RuleCall getParamParamParserRuleCall_5_1_1_1_1_0() { return cParamParamParserRuleCall_5_1_1_1_1_0; }

		//rightP=RightParenthesis
		public Assignment getRightPAssignment_5_1_2() { return cRightPAssignment_5_1_2; }

		//RightParenthesis
		public RuleCall getRightPRightParenthesisParserRuleCall_5_1_2_0() { return cRightPRightParenthesisParserRuleCall_5_1_2_0; }

		//block=Block
		public Assignment getBlockAssignment_6() { return cBlockAssignment_6; }

		//Block
		public RuleCall getBlockBlockParserRuleCall_6_0() { return cBlockBlockParserRuleCall_6_0; }
	}

	public class SigDeclElements extends AbstractParserRuleElementFinder {
		private final ParserRule rule = (ParserRule) GrammarUtil.findRuleForName(getGrammar(), "SigDecl");
		private final Group cGroup = (Group)rule.eContents().get(1);
		private final Assignment cDocumentationAssignment_0 = (Assignment)cGroup.eContents().get(0);
		private final RuleCall cDocumentationDOC_COMMENTTerminalRuleCall_0_0 = (RuleCall)cDocumentationAssignment_0.eContents().get(0);
		private final RuleCall cSigQualParserRuleCall_1 = (RuleCall)cGroup.eContents().get(1);
		private final Keyword cSigKeyword_2 = (Keyword)cGroup.eContents().get(2);
		private final Assignment cSignatureNameAssignment_3 = (Assignment)cGroup.eContents().get(3);
		private final RuleCall cSignatureNameSignatureNameParserRuleCall_3_0 = (RuleCall)cSignatureNameAssignment_3.eContents().get(0);
		private final Group cGroup_4 = (Group)cGroup.eContents().get(4);
		private final Assignment cCommaAssignment_4_0 = (Assignment)cGroup_4.eContents().get(0);
		private final RuleCall cCommaCommaParserRuleCall_4_0_0 = (RuleCall)cCommaAssignment_4_0.eContents().get(0);
		private final Assignment cSignatureNameAssignment_4_1 = (Assignment)cGroup_4.eContents().get(1);
		private final RuleCall cSignatureNameSignatureNameParserRuleCall_4_1_0 = (RuleCall)cSignatureNameAssignment_4_1.eContents().get(0);
		private final Assignment cSigExtAssignment_5 = (Assignment)cGroup.eContents().get(5);
		private final RuleCall cSigExtSigExtParserRuleCall_5_0 = (RuleCall)cSigExtAssignment_5.eContents().get(0);
		private final Keyword cLeftCurlyBracketKeyword_6 = (Keyword)cGroup.eContents().get(6);
		private final Group cGroup_7 = (Group)cGroup.eContents().get(7);
		private final Assignment cDeclAssignment_7_0 = (Assignment)cGroup_7.eContents().get(0);
		private final RuleCall cDeclDeclParserRuleCall_7_0_0 = (RuleCall)cDeclAssignment_7_0.eContents().get(0);
		private final Group cGroup_7_1 = (Group)cGroup_7.eContents().get(1);
		private final Assignment cComma2Assignment_7_1_0 = (Assignment)cGroup_7_1.eContents().get(0);
		private final Keyword cComma2CommaKeyword_7_1_0_0 = (Keyword)cComma2Assignment_7_1_0.eContents().get(0);
		private final Assignment cDeclAssignment_7_1_1 = (Assignment)cGroup_7_1.eContents().get(1);
		private final RuleCall cDeclDeclParserRuleCall_7_1_1_0 = (RuleCall)cDeclAssignment_7_1_1.eContents().get(0);
		private final Keyword cRightCurlyBracketKeyword_8 = (Keyword)cGroup.eContents().get(8);
		private final Assignment cBlockAssignment_9 = (Assignment)cGroup.eContents().get(9);
		private final RuleCall cBlockBlockParserRuleCall_9_0 = (RuleCall)cBlockAssignment_9.eContents().get(0);
		
		/// *
		//	sigDecl ::= sigQual* "sig" name,+ [sigExt] "{" decl,* "}" [block]
		// * / SigDecl returns Signature:
		//	documentation+=DOC_COMMENT? SigQual* "sig" signatureName+=SignatureName (comma+=Comma signatureName+=SignatureName)*
		//	sigExt=SigExt? "{" (decl+=Decl (comma2+="," decl+=Decl)*)? "}" block=Block?;
		public ParserRule getRule() { return rule; }

		//documentation+=DOC_COMMENT? SigQual* "sig" signatureName+=SignatureName (comma+=Comma signatureName+=SignatureName)*
		//sigExt=SigExt? "{" (decl+=Decl (comma2+="," decl+=Decl)*)? "}" block=Block?
		public Group getGroup() { return cGroup; }

		//documentation+=DOC_COMMENT?
		public Assignment getDocumentationAssignment_0() { return cDocumentationAssignment_0; }

		//DOC_COMMENT
		public RuleCall getDocumentationDOC_COMMENTTerminalRuleCall_0_0() { return cDocumentationDOC_COMMENTTerminalRuleCall_0_0; }

		//SigQual*
		public RuleCall getSigQualParserRuleCall_1() { return cSigQualParserRuleCall_1; }

		//"sig"
		public Keyword getSigKeyword_2() { return cSigKeyword_2; }

		//signatureName+=SignatureName
		public Assignment getSignatureNameAssignment_3() { return cSignatureNameAssignment_3; }

		//SignatureName
		public RuleCall getSignatureNameSignatureNameParserRuleCall_3_0() { return cSignatureNameSignatureNameParserRuleCall_3_0; }

		//(comma+=Comma signatureName+=SignatureName)*
		public Group getGroup_4() { return cGroup_4; }

		//comma+=Comma
		public Assignment getCommaAssignment_4_0() { return cCommaAssignment_4_0; }

		//Comma
		public RuleCall getCommaCommaParserRuleCall_4_0_0() { return cCommaCommaParserRuleCall_4_0_0; }

		//signatureName+=SignatureName
		public Assignment getSignatureNameAssignment_4_1() { return cSignatureNameAssignment_4_1; }

		//SignatureName
		public RuleCall getSignatureNameSignatureNameParserRuleCall_4_1_0() { return cSignatureNameSignatureNameParserRuleCall_4_1_0; }

		//sigExt=SigExt?
		public Assignment getSigExtAssignment_5() { return cSigExtAssignment_5; }

		//SigExt
		public RuleCall getSigExtSigExtParserRuleCall_5_0() { return cSigExtSigExtParserRuleCall_5_0; }

		//"{"
		public Keyword getLeftCurlyBracketKeyword_6() { return cLeftCurlyBracketKeyword_6; }

		//(decl+=Decl (comma2+="," decl+=Decl)*)?
		public Group getGroup_7() { return cGroup_7; }

		//decl+=Decl
		public Assignment getDeclAssignment_7_0() { return cDeclAssignment_7_0; }

		//Decl
		public RuleCall getDeclDeclParserRuleCall_7_0_0() { return cDeclDeclParserRuleCall_7_0_0; }

		//(comma2+="," decl+=Decl)*
		public Group getGroup_7_1() { return cGroup_7_1; }

		//comma2+=","
		public Assignment getComma2Assignment_7_1_0() { return cComma2Assignment_7_1_0; }

		//","
		public Keyword getComma2CommaKeyword_7_1_0_0() { return cComma2CommaKeyword_7_1_0_0; }

		//decl+=Decl
		public Assignment getDeclAssignment_7_1_1() { return cDeclAssignment_7_1_1; }

		//Decl
		public RuleCall getDeclDeclParserRuleCall_7_1_1_0() { return cDeclDeclParserRuleCall_7_1_1_0; }

		//"}"
		public Keyword getRightCurlyBracketKeyword_8() { return cRightCurlyBracketKeyword_8; }

		//block=Block?
		public Assignment getBlockAssignment_9() { return cBlockAssignment_9; }

		//Block
		public RuleCall getBlockBlockParserRuleCall_9_0() { return cBlockBlockParserRuleCall_9_0; }
	}

	public class AssertDeclElements extends AbstractParserRuleElementFinder {
		private final ParserRule rule = (ParserRule) GrammarUtil.findRuleForName(getGrammar(), "AssertDecl");
		private final Group cGroup = (Group)rule.eContents().get(1);
		private final Assignment cNameAssignment_0 = (Assignment)cGroup.eContents().get(0);
		private final RuleCall cNameAssertionNameParserRuleCall_0_0 = (RuleCall)cNameAssignment_0.eContents().get(0);
		private final Assignment cBlockAssignment_1 = (Assignment)cGroup.eContents().get(1);
		private final RuleCall cBlockBlockParserRuleCall_1_0 = (RuleCall)cBlockAssignment_1.eContents().get(0);
		
		/// *
		//	assertDecl ::= "assert" [name] block
		// * / AssertDecl returns Assertion:
		//	name=AssertionName block=Block;
		public ParserRule getRule() { return rule; }

		//name=AssertionName block=Block
		public Group getGroup() { return cGroup; }

		//name=AssertionName
		public Assignment getNameAssignment_0() { return cNameAssignment_0; }

		//AssertionName
		public RuleCall getNameAssertionNameParserRuleCall_0_0() { return cNameAssertionNameParserRuleCall_0_0; }

		//block=Block
		public Assignment getBlockAssignment_1() { return cBlockAssignment_1; }

		//Block
		public RuleCall getBlockBlockParserRuleCall_1_0() { return cBlockBlockParserRuleCall_1_0; }
	}

	public class RunDeclElements extends AbstractParserRuleElementFinder {
		private final ParserRule rule = (ParserRule) GrammarUtil.findRuleForName(getGrammar(), "RunDecl");
		private final Group cGroup = (Group)rule.eContents().get(1);
		private final Group cGroup_0 = (Group)cGroup.eContents().get(0);
		private final Assignment cRunNameAssignment_0_0 = (Assignment)cGroup_0.eContents().get(0);
		private final RuleCall cRunNameAliasParserRuleCall_0_0_0 = (RuleCall)cRunNameAssignment_0_0.eContents().get(0);
		private final Keyword cColonKeyword_0_1 = (Keyword)cGroup_0.eContents().get(1);
		private final Keyword cRunKeyword_1 = (Keyword)cGroup.eContents().get(1);
		private final Alternatives cAlternatives_2 = (Alternatives)cGroup.eContents().get(2);
		private final Assignment cNameAssignment_2_0 = (Assignment)cAlternatives_2.eContents().get(0);
		private final CrossReference cNamePredicateNameCrossReference_2_0_0 = (CrossReference)cNameAssignment_2_0.eContents().get(0);
		private final RuleCall cNamePredicateNameIDTerminalRuleCall_2_0_0_1 = (RuleCall)cNamePredicateNameCrossReference_2_0_0.eContents().get(1);
		private final Assignment cBlockAssignment_2_1 = (Assignment)cAlternatives_2.eContents().get(1);
		private final RuleCall cBlockBlockParserRuleCall_2_1_0 = (RuleCall)cBlockAssignment_2_1.eContents().get(0);
		private final Assignment cScopeAssignment_3 = (Assignment)cGroup.eContents().get(3);
		private final RuleCall cScopeScopeParserRuleCall_3_0 = (RuleCall)cScopeAssignment_3.eContents().get(0);
		
		/// *
		//	cmdDecl ::= [name ":"] ["run"|"check"] [name|block] scope //JUST RUN
		// * / RunDecl returns RunCommand:
		//	(runName=Alias ":")? "run" / *name=[FunctionNamewParam]|name=[FunctionName] |* / (name=[PredicateName] | block=Block)
		//	scope=Scope;
		public ParserRule getRule() { return rule; }

		//(runName=Alias ":")? "run" / *name=[FunctionNamewParam]|name=[FunctionName] |* / (name=[PredicateName] | block=Block)
		//scope=Scope
		public Group getGroup() { return cGroup; }

		//(runName=Alias ":")?
		public Group getGroup_0() { return cGroup_0; }

		//runName=Alias
		public Assignment getRunNameAssignment_0_0() { return cRunNameAssignment_0_0; }

		//Alias
		public RuleCall getRunNameAliasParserRuleCall_0_0_0() { return cRunNameAliasParserRuleCall_0_0_0; }

		//":"
		public Keyword getColonKeyword_0_1() { return cColonKeyword_0_1; }

		//"run"
		public Keyword getRunKeyword_1() { return cRunKeyword_1; }

		/// *name=[FunctionNamewParam]|name=[FunctionName] |* / name=[PredicateName] | block=Block
		public Alternatives getAlternatives_2() { return cAlternatives_2; }

		/// *name=[FunctionNamewParam]|name=[FunctionName] |* / name=[PredicateName]
		public Assignment getNameAssignment_2_0() { return cNameAssignment_2_0; }

		//[PredicateName]
		public CrossReference getNamePredicateNameCrossReference_2_0_0() { return cNamePredicateNameCrossReference_2_0_0; }

		//ID
		public RuleCall getNamePredicateNameIDTerminalRuleCall_2_0_0_1() { return cNamePredicateNameIDTerminalRuleCall_2_0_0_1; }

		//block=Block
		public Assignment getBlockAssignment_2_1() { return cBlockAssignment_2_1; }

		//Block
		public RuleCall getBlockBlockParserRuleCall_2_1_0() { return cBlockBlockParserRuleCall_2_1_0; }

		//scope=Scope
		public Assignment getScopeAssignment_3() { return cScopeAssignment_3; }

		//Scope
		public RuleCall getScopeScopeParserRuleCall_3_0() { return cScopeScopeParserRuleCall_3_0; }
	}

	public class CheckDeclElements extends AbstractParserRuleElementFinder {
		private final ParserRule rule = (ParserRule) GrammarUtil.findRuleForName(getGrammar(), "CheckDecl");
		private final Group cGroup = (Group)rule.eContents().get(1);
		private final Group cGroup_0 = (Group)cGroup.eContents().get(0);
		private final Assignment cCheckNameAssignment_0_0 = (Assignment)cGroup_0.eContents().get(0);
		private final RuleCall cCheckNameAliasParserRuleCall_0_0_0 = (RuleCall)cCheckNameAssignment_0_0.eContents().get(0);
		private final Keyword cColonKeyword_0_1 = (Keyword)cGroup_0.eContents().get(1);
		private final Keyword cCheckKeyword_1 = (Keyword)cGroup.eContents().get(1);
		private final Alternatives cAlternatives_2 = (Alternatives)cGroup.eContents().get(2);
		private final Assignment cNameAssignment_2_0 = (Assignment)cAlternatives_2.eContents().get(0);
		private final CrossReference cNameAssertionNameCrossReference_2_0_0 = (CrossReference)cNameAssignment_2_0.eContents().get(0);
		private final RuleCall cNameAssertionNameIDTerminalRuleCall_2_0_0_1 = (RuleCall)cNameAssertionNameCrossReference_2_0_0.eContents().get(1);
		private final Assignment cBlockAssignment_2_1 = (Assignment)cAlternatives_2.eContents().get(1);
		private final RuleCall cBlockBlockParserRuleCall_2_1_0 = (RuleCall)cBlockAssignment_2_1.eContents().get(0);
		private final Assignment cScopeAssignment_3 = (Assignment)cGroup.eContents().get(3);
		private final RuleCall cScopeScopeParserRuleCall_3_0 = (RuleCall)cScopeAssignment_3.eContents().get(0);
		
		/// *
		//	cmdDecl ::= [name ":"] ["run"|"check"] [name|block] scope //JUST CHECK
		// * / CheckDecl returns CheckCommand:
		//	(checkName=Alias ":")? "check" (name=[AssertionName] | block=Block) scope=Scope;
		public ParserRule getRule() { return rule; }

		//(checkName=Alias ":")? "check" (name=[AssertionName] | block=Block) scope=Scope
		public Group getGroup() { return cGroup; }

		//(checkName=Alias ":")?
		public Group getGroup_0() { return cGroup_0; }

		//checkName=Alias
		public Assignment getCheckNameAssignment_0_0() { return cCheckNameAssignment_0_0; }

		//Alias
		public RuleCall getCheckNameAliasParserRuleCall_0_0_0() { return cCheckNameAliasParserRuleCall_0_0_0; }

		//":"
		public Keyword getColonKeyword_0_1() { return cColonKeyword_0_1; }

		//"check"
		public Keyword getCheckKeyword_1() { return cCheckKeyword_1; }

		//name=[AssertionName] | block=Block
		public Alternatives getAlternatives_2() { return cAlternatives_2; }

		//name=[AssertionName]
		public Assignment getNameAssignment_2_0() { return cNameAssignment_2_0; }

		//[AssertionName]
		public CrossReference getNameAssertionNameCrossReference_2_0_0() { return cNameAssertionNameCrossReference_2_0_0; }

		//ID
		public RuleCall getNameAssertionNameIDTerminalRuleCall_2_0_0_1() { return cNameAssertionNameIDTerminalRuleCall_2_0_0_1; }

		//block=Block
		public Assignment getBlockAssignment_2_1() { return cBlockAssignment_2_1; }

		//Block
		public RuleCall getBlockBlockParserRuleCall_2_1_0() { return cBlockBlockParserRuleCall_2_1_0; }

		//scope=Scope
		public Assignment getScopeAssignment_3() { return cScopeAssignment_3; }

		//Scope
		public RuleCall getScopeScopeParserRuleCall_3_0() { return cScopeScopeParserRuleCall_3_0; }
	}

	public class ScopeElements extends AbstractParserRuleElementFinder {
		private final ParserRule rule = (ParserRule) GrammarUtil.findRuleForName(getGrammar(), "Scope");
		private final Alternatives cAlternatives = (Alternatives)rule.eContents().get(1);
		private final Group cGroup_0 = (Group)cAlternatives.eContents().get(0);
		private final Action cScopeAction_0_0 = (Action)cGroup_0.eContents().get(0);
		private final Assignment cForAssignment_0_1 = (Assignment)cGroup_0.eContents().get(1);
		private final Keyword cForForKeyword_0_1_0 = (Keyword)cForAssignment_0_1.eContents().get(0);
		private final Assignment cValueAssignment_0_2 = (Assignment)cGroup_0.eContents().get(2);
		private final RuleCall cValueINTTerminalRuleCall_0_2_0 = (RuleCall)cValueAssignment_0_2.eContents().get(0);
		private final Assignment cExpectAssignment_0_3 = (Assignment)cGroup_0.eContents().get(3);
		private final RuleCall cExpectExpectationParserRuleCall_0_3_0 = (RuleCall)cExpectAssignment_0_3.eContents().get(0);
		private final Group cGroup_1 = (Group)cAlternatives.eContents().get(1);
		private final Action cScopeAction_1_0 = (Action)cGroup_1.eContents().get(0);
		private final Assignment cForAssignment_1_1 = (Assignment)cGroup_1.eContents().get(1);
		private final Keyword cForForKeyword_1_1_0 = (Keyword)cForAssignment_1_1.eContents().get(0);
		private final Assignment cValueAssignment_1_2 = (Assignment)cGroup_1.eContents().get(2);
		private final RuleCall cValueINTTerminalRuleCall_1_2_0 = (RuleCall)cValueAssignment_1_2.eContents().get(0);
		private final Assignment cButAssignment_1_3 = (Assignment)cGroup_1.eContents().get(3);
		private final Keyword cButButKeyword_1_3_0 = (Keyword)cButAssignment_1_3.eContents().get(0);
		private final Assignment cTypescopeAssignment_1_4 = (Assignment)cGroup_1.eContents().get(4);
		private final RuleCall cTypescopeTypescopeParserRuleCall_1_4_0 = (RuleCall)cTypescopeAssignment_1_4.eContents().get(0);
		private final Group cGroup_1_5 = (Group)cGroup_1.eContents().get(5);
		private final Assignment cCommaAssignment_1_5_0 = (Assignment)cGroup_1_5.eContents().get(0);
		private final RuleCall cCommaCommaParserRuleCall_1_5_0_0 = (RuleCall)cCommaAssignment_1_5_0.eContents().get(0);
		private final Assignment cTypescopeAssignment_1_5_1 = (Assignment)cGroup_1_5.eContents().get(1);
		private final RuleCall cTypescopeTypescopeParserRuleCall_1_5_1_0 = (RuleCall)cTypescopeAssignment_1_5_1.eContents().get(0);
		private final Assignment cExpectAssignment_1_6 = (Assignment)cGroup_1.eContents().get(6);
		private final RuleCall cExpectExpectationParserRuleCall_1_6_0 = (RuleCall)cExpectAssignment_1_6.eContents().get(0);
		private final Group cGroup_2 = (Group)cAlternatives.eContents().get(2);
		private final Action cScopeAction_2_0 = (Action)cGroup_2.eContents().get(0);
		private final Assignment cForAssignment_2_1 = (Assignment)cGroup_2.eContents().get(1);
		private final Keyword cForForKeyword_2_1_0 = (Keyword)cForAssignment_2_1.eContents().get(0);
		private final Assignment cTypescopeAssignment_2_2 = (Assignment)cGroup_2.eContents().get(2);
		private final RuleCall cTypescopeTypescopeParserRuleCall_2_2_0 = (RuleCall)cTypescopeAssignment_2_2.eContents().get(0);
		private final Group cGroup_2_3 = (Group)cGroup_2.eContents().get(3);
		private final Assignment cCommaAssignment_2_3_0 = (Assignment)cGroup_2_3.eContents().get(0);
		private final RuleCall cCommaCommaParserRuleCall_2_3_0_0 = (RuleCall)cCommaAssignment_2_3_0.eContents().get(0);
		private final Assignment cTypescopeAssignment_2_3_1 = (Assignment)cGroup_2_3.eContents().get(1);
		private final RuleCall cTypescopeTypescopeParserRuleCall_2_3_1_0 = (RuleCall)cTypescopeAssignment_2_3_1.eContents().get(0);
		private final Assignment cExpectAssignment_2_4 = (Assignment)cGroup_2.eContents().get(4);
		private final RuleCall cExpectExpectationParserRuleCall_2_4_0 = (RuleCall)cExpectAssignment_2_4.eContents().get(0);
		private final Group cGroup_3 = (Group)cAlternatives.eContents().get(3);
		private final Action cScopeAction_3_0 = (Action)cGroup_3.eContents().get(0);
		private final Assignment cExpectAssignment_3_1 = (Assignment)cGroup_3.eContents().get(1);
		private final RuleCall cExpectExpectationParserRuleCall_3_1_0 = (RuleCall)cExpectAssignment_3_1.eContents().get(0);
		
		/// *
		//	scope ::= "for" number                   ["expect" [0|1]]
		//	scope ::= "for" number "but" typescope,+ ["expect" [0|1]]
		//	scope ::= "for"              typescope,+ ["expect" [0|1]]
		//	scope ::=                                ["expect" [0|1]]	
		// * / Scope:
		//	{Scope} for="for" value=INT expect=Expectation? | {Scope} for="for" value=INT but="but" typescope+=Typescope
		//	(comma+=Comma typescope+=Typescope)* expect=Expectation? | {Scope} for="for" typescope+=Typescope (comma+=Comma
		//	typescope+=Typescope)* expect=Expectation? | {Scope} expect=Expectation?;
		public ParserRule getRule() { return rule; }

		//{Scope} for="for" value=INT expect=Expectation? | {Scope} for="for" value=INT but="but" typescope+=Typescope
		//(comma+=Comma typescope+=Typescope)* expect=Expectation? | {Scope} for="for" typescope+=Typescope (comma+=Comma
		//typescope+=Typescope)* expect=Expectation? | {Scope} expect=Expectation?
		public Alternatives getAlternatives() { return cAlternatives; }

		//{Scope} for="for" value=INT expect=Expectation?
		public Group getGroup_0() { return cGroup_0; }

		//{Scope}
		public Action getScopeAction_0_0() { return cScopeAction_0_0; }

		//for="for"
		public Assignment getForAssignment_0_1() { return cForAssignment_0_1; }

		//"for"
		public Keyword getForForKeyword_0_1_0() { return cForForKeyword_0_1_0; }

		//value=INT
		public Assignment getValueAssignment_0_2() { return cValueAssignment_0_2; }

		//INT
		public RuleCall getValueINTTerminalRuleCall_0_2_0() { return cValueINTTerminalRuleCall_0_2_0; }

		//expect=Expectation?
		public Assignment getExpectAssignment_0_3() { return cExpectAssignment_0_3; }

		//Expectation
		public RuleCall getExpectExpectationParserRuleCall_0_3_0() { return cExpectExpectationParserRuleCall_0_3_0; }

		//{Scope} for="for" value=INT but="but" typescope+=Typescope (comma+=Comma typescope+=Typescope)* expect=Expectation?
		public Group getGroup_1() { return cGroup_1; }

		//{Scope}
		public Action getScopeAction_1_0() { return cScopeAction_1_0; }

		//for="for"
		public Assignment getForAssignment_1_1() { return cForAssignment_1_1; }

		//"for"
		public Keyword getForForKeyword_1_1_0() { return cForForKeyword_1_1_0; }

		//value=INT
		public Assignment getValueAssignment_1_2() { return cValueAssignment_1_2; }

		//INT
		public RuleCall getValueINTTerminalRuleCall_1_2_0() { return cValueINTTerminalRuleCall_1_2_0; }

		//but="but"
		public Assignment getButAssignment_1_3() { return cButAssignment_1_3; }

		//"but"
		public Keyword getButButKeyword_1_3_0() { return cButButKeyword_1_3_0; }

		//typescope+=Typescope
		public Assignment getTypescopeAssignment_1_4() { return cTypescopeAssignment_1_4; }

		//Typescope
		public RuleCall getTypescopeTypescopeParserRuleCall_1_4_0() { return cTypescopeTypescopeParserRuleCall_1_4_0; }

		//(comma+=Comma typescope+=Typescope)*
		public Group getGroup_1_5() { return cGroup_1_5; }

		//comma+=Comma
		public Assignment getCommaAssignment_1_5_0() { return cCommaAssignment_1_5_0; }

		//Comma
		public RuleCall getCommaCommaParserRuleCall_1_5_0_0() { return cCommaCommaParserRuleCall_1_5_0_0; }

		//typescope+=Typescope
		public Assignment getTypescopeAssignment_1_5_1() { return cTypescopeAssignment_1_5_1; }

		//Typescope
		public RuleCall getTypescopeTypescopeParserRuleCall_1_5_1_0() { return cTypescopeTypescopeParserRuleCall_1_5_1_0; }

		//expect=Expectation?
		public Assignment getExpectAssignment_1_6() { return cExpectAssignment_1_6; }

		//Expectation
		public RuleCall getExpectExpectationParserRuleCall_1_6_0() { return cExpectExpectationParserRuleCall_1_6_0; }

		//{Scope} for="for" typescope+=Typescope (comma+=Comma typescope+=Typescope)* expect=Expectation?
		public Group getGroup_2() { return cGroup_2; }

		//{Scope}
		public Action getScopeAction_2_0() { return cScopeAction_2_0; }

		//for="for"
		public Assignment getForAssignment_2_1() { return cForAssignment_2_1; }

		//"for"
		public Keyword getForForKeyword_2_1_0() { return cForForKeyword_2_1_0; }

		//typescope+=Typescope
		public Assignment getTypescopeAssignment_2_2() { return cTypescopeAssignment_2_2; }

		//Typescope
		public RuleCall getTypescopeTypescopeParserRuleCall_2_2_0() { return cTypescopeTypescopeParserRuleCall_2_2_0; }

		//(comma+=Comma typescope+=Typescope)*
		public Group getGroup_2_3() { return cGroup_2_3; }

		//comma+=Comma
		public Assignment getCommaAssignment_2_3_0() { return cCommaAssignment_2_3_0; }

		//Comma
		public RuleCall getCommaCommaParserRuleCall_2_3_0_0() { return cCommaCommaParserRuleCall_2_3_0_0; }

		//typescope+=Typescope
		public Assignment getTypescopeAssignment_2_3_1() { return cTypescopeAssignment_2_3_1; }

		//Typescope
		public RuleCall getTypescopeTypescopeParserRuleCall_2_3_1_0() { return cTypescopeTypescopeParserRuleCall_2_3_1_0; }

		//expect=Expectation?
		public Assignment getExpectAssignment_2_4() { return cExpectAssignment_2_4; }

		//Expectation
		public RuleCall getExpectExpectationParserRuleCall_2_4_0() { return cExpectExpectationParserRuleCall_2_4_0; }

		//{Scope} expect=Expectation?
		public Group getGroup_3() { return cGroup_3; }

		//{Scope}
		public Action getScopeAction_3_0() { return cScopeAction_3_0; }

		//expect=Expectation?
		public Assignment getExpectAssignment_3_1() { return cExpectAssignment_3_1; }

		//Expectation
		public RuleCall getExpectExpectationParserRuleCall_3_1_0() { return cExpectExpectationParserRuleCall_3_1_0; }
	}

	public class ExpectationElements extends AbstractParserRuleElementFinder {
		private final ParserRule rule = (ParserRule) GrammarUtil.findRuleForName(getGrammar(), "Expectation");
		private final Group cGroup = (Group)rule.eContents().get(1);
		private final Assignment cExpectAssignment_0 = (Assignment)cGroup.eContents().get(0);
		private final Keyword cExpectExpectKeyword_0_0 = (Keyword)cExpectAssignment_0.eContents().get(0);
		private final Assignment cValueAssignment_1 = (Assignment)cGroup.eContents().get(1);
		private final RuleCall cValueINTTerminalRuleCall_1_0 = (RuleCall)cValueAssignment_1.eContents().get(0);
		
		//Expectation:
		//	expect="expect" value=INT;
		public ParserRule getRule() { return rule; }

		//expect="expect" value=INT
		public Group getGroup() { return cGroup; }

		//expect="expect"
		public Assignment getExpectAssignment_0() { return cExpectAssignment_0; }

		//"expect"
		public Keyword getExpectExpectKeyword_0_0() { return cExpectExpectKeyword_0_0; }

		//value=INT
		public Assignment getValueAssignment_1() { return cValueAssignment_1; }

		//INT
		public RuleCall getValueINTTerminalRuleCall_1_0() { return cValueINTTerminalRuleCall_1_0; }
	}

	public class TypescopeElements extends AbstractParserRuleElementFinder {
		private final ParserRule rule = (ParserRule) GrammarUtil.findRuleForName(getGrammar(), "Typescope");
		private final Group cGroup = (Group)rule.eContents().get(1);
		private final Action cTypescopeAction_0 = (Action)cGroup.eContents().get(0);
		private final Assignment cExactlyAssignment_1 = (Assignment)cGroup.eContents().get(1);
		private final Keyword cExactlyExactlyKeyword_1_0 = (Keyword)cExactlyAssignment_1.eContents().get(0);
		private final Assignment cValueAssignment_2 = (Assignment)cGroup.eContents().get(2);
		private final RuleCall cValueINTTerminalRuleCall_2_0 = (RuleCall)cValueAssignment_2.eContents().get(0);
		private final Group cGroup_3 = (Group)cGroup.eContents().get(3);
		private final Alternatives cAlternatives_3_0 = (Alternatives)cGroup_3.eContents().get(0);
		private final Assignment cAsnameAssignment_3_0_0 = (Assignment)cAlternatives_3_0.eContents().get(0);
		private final CrossReference cAsnameAsNameCrossReference_3_0_0_0 = (CrossReference)cAsnameAssignment_3_0_0.eContents().get(0);
		private final RuleCall cAsnameAsNameIDTerminalRuleCall_3_0_0_0_1 = (RuleCall)cAsnameAsNameCrossReference_3_0_0_0.eContents().get(1);
		private final Assignment cPrevAssignment_3_0_1 = (Assignment)cAlternatives_3_0.eContents().get(1);
		private final Keyword cPrevThisKeyword_3_0_1_0 = (Keyword)cPrevAssignment_3_0_1.eContents().get(0);
		private final Assignment cSlAssignment_3_1 = (Assignment)cGroup_3.eContents().get(1);
		private final Keyword cSlSolidusKeyword_3_1_0 = (Keyword)cSlAssignment_3_1.eContents().get(0);
		private final Alternatives cAlternatives_4 = (Alternatives)cGroup.eContents().get(4);
		private final Assignment cNameAssignment_4_0 = (Assignment)cAlternatives_4.eContents().get(0);
		private final CrossReference cNameReferencesNameCrossReference_4_0_0 = (CrossReference)cNameAssignment_4_0.eContents().get(0);
		private final RuleCall cNameReferencesNameIDTerminalRuleCall_4_0_0_1 = (RuleCall)cNameReferencesNameCrossReference_4_0_0.eContents().get(1);
		private final Alternatives cAlternatives_4_1 = (Alternatives)cAlternatives_4.eContents().get(1);
		private final Assignment cPostAssignment_4_1_0 = (Assignment)cAlternatives_4_1.eContents().get(0);
		private final Keyword cPostIntKeyword_4_1_0_0 = (Keyword)cPostAssignment_4_1_0.eContents().get(0);
		private final Assignment cPostAssignment_4_1_1 = (Assignment)cAlternatives_4_1.eContents().get(1);
		private final Keyword cPostSeqKeyword_4_1_1_0 = (Keyword)cPostAssignment_4_1_1.eContents().get(0);
		
		/// *
		//	typescope ::= ["exactly"] number [name|"int"|"seq"]
		// * / Typescope:
		//	{Typescope} exactly="exactly"? value=INT ((asname=[AsName] | prev="this") sl="/")? (name=[ReferencesName] |
		//	(post="int" | post="seq"));
		public ParserRule getRule() { return rule; }

		//{Typescope} exactly="exactly"? value=INT ((asname=[AsName] | prev="this") sl="/")? (name=[ReferencesName] | (post="int"
		//| post="seq"))
		public Group getGroup() { return cGroup; }

		//{Typescope}
		public Action getTypescopeAction_0() { return cTypescopeAction_0; }

		//exactly="exactly"?
		public Assignment getExactlyAssignment_1() { return cExactlyAssignment_1; }

		//"exactly"
		public Keyword getExactlyExactlyKeyword_1_0() { return cExactlyExactlyKeyword_1_0; }

		//value=INT
		public Assignment getValueAssignment_2() { return cValueAssignment_2; }

		//INT
		public RuleCall getValueINTTerminalRuleCall_2_0() { return cValueINTTerminalRuleCall_2_0; }

		//((asname=[AsName] | prev="this") sl="/")?
		public Group getGroup_3() { return cGroup_3; }

		//asname=[AsName] | prev="this"
		public Alternatives getAlternatives_3_0() { return cAlternatives_3_0; }

		//asname=[AsName]
		public Assignment getAsnameAssignment_3_0_0() { return cAsnameAssignment_3_0_0; }

		//[AsName]
		public CrossReference getAsnameAsNameCrossReference_3_0_0_0() { return cAsnameAsNameCrossReference_3_0_0_0; }

		//ID
		public RuleCall getAsnameAsNameIDTerminalRuleCall_3_0_0_0_1() { return cAsnameAsNameIDTerminalRuleCall_3_0_0_0_1; }

		//prev="this"
		public Assignment getPrevAssignment_3_0_1() { return cPrevAssignment_3_0_1; }

		//"this"
		public Keyword getPrevThisKeyword_3_0_1_0() { return cPrevThisKeyword_3_0_1_0; }

		//sl="/"
		public Assignment getSlAssignment_3_1() { return cSlAssignment_3_1; }

		//"/"
		public Keyword getSlSolidusKeyword_3_1_0() { return cSlSolidusKeyword_3_1_0; }

		//name=[ReferencesName] | (post="int" | post="seq")
		public Alternatives getAlternatives_4() { return cAlternatives_4; }

		//name=[ReferencesName]
		public Assignment getNameAssignment_4_0() { return cNameAssignment_4_0; }

		//[ReferencesName]
		public CrossReference getNameReferencesNameCrossReference_4_0_0() { return cNameReferencesNameCrossReference_4_0_0; }

		//ID
		public RuleCall getNameReferencesNameIDTerminalRuleCall_4_0_0_1() { return cNameReferencesNameIDTerminalRuleCall_4_0_0_1; }

		//post="int" | post="seq"
		public Alternatives getAlternatives_4_1() { return cAlternatives_4_1; }

		//post="int"
		public Assignment getPostAssignment_4_1_0() { return cPostAssignment_4_1_0; }

		//"int"
		public Keyword getPostIntKeyword_4_1_0_0() { return cPostIntKeyword_4_1_0_0; }

		//post="seq"
		public Assignment getPostAssignment_4_1_1() { return cPostAssignment_4_1_1; }

		//"seq"
		public Keyword getPostSeqKeyword_4_1_1_0() { return cPostSeqKeyword_4_1_1_0; }
	}

	public class SigQualElements extends AbstractParserRuleElementFinder {
		private final ParserRule rule = (ParserRule) GrammarUtil.findRuleForName(getGrammar(), "SigQual");
		private final Alternatives cAlternatives = (Alternatives)rule.eContents().get(1);
		private final Keyword cAbstractKeyword_0 = (Keyword)cAlternatives.eContents().get(0);
		private final Keyword cLoneKeyword_1 = (Keyword)cAlternatives.eContents().get(1);
		private final Keyword cOneKeyword_2 = (Keyword)cAlternatives.eContents().get(2);
		private final Keyword cSomeKeyword_3 = (Keyword)cAlternatives.eContents().get(3);
		private final Keyword cPrivateKeyword_4 = (Keyword)cAlternatives.eContents().get(4);
		
		/// *
		//	sigQual ::= "abstract" | "lone" | "one" | "some" | "private"	
		// * / SigQual:
		//	"abstract" | "lone" | "one" | "some" | "private";
		public ParserRule getRule() { return rule; }

		//"abstract" | "lone" | "one" | "some" | "private"
		public Alternatives getAlternatives() { return cAlternatives; }

		//"abstract"
		public Keyword getAbstractKeyword_0() { return cAbstractKeyword_0; }

		//"lone"
		public Keyword getLoneKeyword_1() { return cLoneKeyword_1; }

		//"one"
		public Keyword getOneKeyword_2() { return cOneKeyword_2; }

		//"some"
		public Keyword getSomeKeyword_3() { return cSomeKeyword_3; }

		//"private"
		public Keyword getPrivateKeyword_4() { return cPrivateKeyword_4; }
	}

	public class SigExtElements extends AbstractParserRuleElementFinder {
		private final ParserRule rule = (ParserRule) GrammarUtil.findRuleForName(getGrammar(), "SigExt");
		private final Alternatives cAlternatives = (Alternatives)rule.eContents().get(1);
		private final Group cGroup_0 = (Group)cAlternatives.eContents().get(0);
		private final Keyword cExtendsKeyword_0_0 = (Keyword)cGroup_0.eContents().get(0);
		private final Assignment cRefAssignment_0_1 = (Assignment)cGroup_0.eContents().get(1);
		private final RuleCall cRefReferencesSigParserRuleCall_0_1_0 = (RuleCall)cRefAssignment_0_1.eContents().get(0);
		private final Group cGroup_1 = (Group)cAlternatives.eContents().get(1);
		private final Keyword cInKeyword_1_0 = (Keyword)cGroup_1.eContents().get(0);
		private final Assignment cRefAssignment_1_1 = (Assignment)cGroup_1.eContents().get(1);
		private final RuleCall cRefReferencesSigParserRuleCall_1_1_0 = (RuleCall)cRefAssignment_1_1.eContents().get(0);
		private final Group cGroup_1_2 = (Group)cGroup_1.eContents().get(2);
		private final Keyword cPlusSignKeyword_1_2_0 = (Keyword)cGroup_1_2.eContents().get(0);
		private final Assignment cRef2Assignment_1_2_1 = (Assignment)cGroup_1_2.eContents().get(1);
		private final RuleCall cRef2ReferencesSigParserRuleCall_1_2_1_0 = (RuleCall)cRef2Assignment_1_2_1.eContents().get(0);
		
		/// *
		//	sigExt ::= "extends" ref
		//	sigExt ::= "in" ref ["+" ref]*
		// * / SigExt:
		//	"extends" ref=ReferencesSig | "in" ref=ReferencesSig ("+" ref2+=ReferencesSig)*;
		public ParserRule getRule() { return rule; }

		//"extends" ref=ReferencesSig | "in" ref=ReferencesSig ("+" ref2+=ReferencesSig)*
		public Alternatives getAlternatives() { return cAlternatives; }

		//"extends" ref=ReferencesSig
		public Group getGroup_0() { return cGroup_0; }

		//"extends"
		public Keyword getExtendsKeyword_0_0() { return cExtendsKeyword_0_0; }

		//ref=ReferencesSig
		public Assignment getRefAssignment_0_1() { return cRefAssignment_0_1; }

		//ReferencesSig
		public RuleCall getRefReferencesSigParserRuleCall_0_1_0() { return cRefReferencesSigParserRuleCall_0_1_0; }

		//"in" ref=ReferencesSig ("+" ref2+=ReferencesSig)*
		public Group getGroup_1() { return cGroup_1; }

		//"in"
		public Keyword getInKeyword_1_0() { return cInKeyword_1_0; }

		//ref=ReferencesSig
		public Assignment getRefAssignment_1_1() { return cRefAssignment_1_1; }

		//ReferencesSig
		public RuleCall getRefReferencesSigParserRuleCall_1_1_0() { return cRefReferencesSigParserRuleCall_1_1_0; }

		//("+" ref2+=ReferencesSig)*
		public Group getGroup_1_2() { return cGroup_1_2; }

		//"+"
		public Keyword getPlusSignKeyword_1_2_0() { return cPlusSignKeyword_1_2_0; }

		//ref2+=ReferencesSig
		public Assignment getRef2Assignment_1_2_1() { return cRef2Assignment_1_2_1; }

		//ReferencesSig
		public RuleCall getRef2ReferencesSigParserRuleCall_1_2_1_0() { return cRef2ReferencesSigParserRuleCall_1_2_1_0; }
	}

	public class ReferencesSigElements extends AbstractParserRuleElementFinder {
		private final ParserRule rule = (ParserRule) GrammarUtil.findRuleForName(getGrammar(), "ReferencesSig");
		private final Group cGroup = (Group)rule.eContents().get(1);
		private final Action cReferencesSigAction_0 = (Action)cGroup.eContents().get(0);
		private final Alternatives cAlternatives_1 = (Alternatives)cGroup.eContents().get(1);
		private final Group cGroup_1_0 = (Group)cAlternatives_1.eContents().get(0);
		private final Group cGroup_1_0_0 = (Group)cGroup_1_0.eContents().get(0);
		private final Alternatives cAlternatives_1_0_0_0 = (Alternatives)cGroup_1_0_0.eContents().get(0);
		private final Assignment cAsnameAssignment_1_0_0_0_0 = (Assignment)cAlternatives_1_0_0_0.eContents().get(0);
		private final CrossReference cAsnameAsNameCrossReference_1_0_0_0_0_0 = (CrossReference)cAsnameAssignment_1_0_0_0_0.eContents().get(0);
		private final RuleCall cAsnameAsNameIDTerminalRuleCall_1_0_0_0_0_0_1 = (RuleCall)cAsnameAsNameCrossReference_1_0_0_0_0_0.eContents().get(1);
		private final Keyword cThisKeyword_1_0_0_0_1 = (Keyword)cAlternatives_1_0_0_0.eContents().get(1);
		private final Keyword cSolidusKeyword_1_0_0_1 = (Keyword)cGroup_1_0_0.eContents().get(1);
		private final Assignment cNameRefAssignment_1_0_1 = (Assignment)cGroup_1_0.eContents().get(1);
		private final CrossReference cNameRefSignatureNameCrossReference_1_0_1_0 = (CrossReference)cNameRefAssignment_1_0_1.eContents().get(0);
		private final RuleCall cNameRefSignatureNameIDTerminalRuleCall_1_0_1_0_1 = (RuleCall)cNameRefSignatureNameCrossReference_1_0_1_0.eContents().get(1);
		private final Keyword cUnivKeyword_1_1 = (Keyword)cAlternatives_1.eContents().get(1);
		private final Keyword cIntKeyword_1_2 = (Keyword)cAlternatives_1.eContents().get(2);
		private final Keyword cSeqIntKeyword_1_3 = (Keyword)cAlternatives_1.eContents().get(3);
		
		//ReferencesSig:
		//	{ReferencesSig} (((asname=[AsName] | "this") "/")? nameRef=[SignatureName] | "univ" | "Int" | "seq/Int");
		public ParserRule getRule() { return rule; }

		//{ReferencesSig} (((asname=[AsName] | "this") "/")? nameRef=[SignatureName] | "univ" | "Int" | "seq/Int")
		public Group getGroup() { return cGroup; }

		//{ReferencesSig}
		public Action getReferencesSigAction_0() { return cReferencesSigAction_0; }

		//((asname=[AsName] | "this") "/")? nameRef=[SignatureName] | "univ" | "Int" | "seq/Int"
		public Alternatives getAlternatives_1() { return cAlternatives_1; }

		//((asname=[AsName] | "this") "/")? nameRef=[SignatureName]
		public Group getGroup_1_0() { return cGroup_1_0; }

		//((asname=[AsName] | "this") "/")?
		public Group getGroup_1_0_0() { return cGroup_1_0_0; }

		//asname=[AsName] | "this"
		public Alternatives getAlternatives_1_0_0_0() { return cAlternatives_1_0_0_0; }

		//asname=[AsName]
		public Assignment getAsnameAssignment_1_0_0_0_0() { return cAsnameAssignment_1_0_0_0_0; }

		//[AsName]
		public CrossReference getAsnameAsNameCrossReference_1_0_0_0_0_0() { return cAsnameAsNameCrossReference_1_0_0_0_0_0; }

		//ID
		public RuleCall getAsnameAsNameIDTerminalRuleCall_1_0_0_0_0_0_1() { return cAsnameAsNameIDTerminalRuleCall_1_0_0_0_0_0_1; }

		//"this"
		public Keyword getThisKeyword_1_0_0_0_1() { return cThisKeyword_1_0_0_0_1; }

		//"/"
		public Keyword getSolidusKeyword_1_0_0_1() { return cSolidusKeyword_1_0_0_1; }

		//nameRef=[SignatureName]
		public Assignment getNameRefAssignment_1_0_1() { return cNameRefAssignment_1_0_1; }

		//[SignatureName]
		public CrossReference getNameRefSignatureNameCrossReference_1_0_1_0() { return cNameRefSignatureNameCrossReference_1_0_1_0; }

		//ID
		public RuleCall getNameRefSignatureNameIDTerminalRuleCall_1_0_1_0_1() { return cNameRefSignatureNameIDTerminalRuleCall_1_0_1_0_1; }

		//"univ"
		public Keyword getUnivKeyword_1_1() { return cUnivKeyword_1_1; }

		//"Int"
		public Keyword getIntKeyword_1_2() { return cIntKeyword_1_2; }

		//"seq/Int"
		public Keyword getSeqIntKeyword_1_3() { return cSeqIntKeyword_1_3; }
	}

	public class ExpressionElements extends AbstractParserRuleElementFinder {
		private final ParserRule rule = (ParserRule) GrammarUtil.findRuleForName(getGrammar(), "Expression");
		private final Group cGroup = (Group)rule.eContents().get(1);
		private final RuleCall cTerminalExpressionParserRuleCall_0 = (RuleCall)cGroup.eContents().get(0);
		private final Alternatives cAlternatives_1 = (Alternatives)cGroup.eContents().get(1);
		private final Group cGroup_1_0 = (Group)cAlternatives_1.eContents().get(0);
		private final Assignment cBinOpAssignment_1_0_0 = (Assignment)cGroup_1_0.eContents().get(0);
		private final RuleCall cBinOpBinOpParserRuleCall_1_0_0_0 = (RuleCall)cBinOpAssignment_1_0_0.eContents().get(0);
		private final Assignment cExprAssignment_1_0_1 = (Assignment)cGroup_1_0.eContents().get(1);
		private final RuleCall cExprExpressionParserRuleCall_1_0_1_0 = (RuleCall)cExprAssignment_1_0_1.eContents().get(0);
		private final Group cGroup_1_1 = (Group)cAlternatives_1.eContents().get(1);
		private final Alternatives cAlternatives_1_1_0 = (Alternatives)cGroup_1_1.eContents().get(0);
		private final Keyword cExclamationMarkKeyword_1_1_0_0 = (Keyword)cAlternatives_1_1_0.eContents().get(0);
		private final Keyword cNotKeyword_1_1_0_1 = (Keyword)cAlternatives_1_1_0.eContents().get(1);
		private final Assignment cCmpAssignment_1_1_1 = (Assignment)cGroup_1_1.eContents().get(1);
		private final RuleCall cCmpCompareOpParserRuleCall_1_1_1_0 = (RuleCall)cCmpAssignment_1_1_1.eContents().get(0);
		private final Assignment cExprAssignment_1_1_2 = (Assignment)cGroup_1_1.eContents().get(2);
		private final RuleCall cExprExpressionParserRuleCall_1_1_2_0 = (RuleCall)cExprAssignment_1_1_2.eContents().get(0);
		private final Group cGroup_1_2 = (Group)cAlternatives_1.eContents().get(2);
		private final Assignment cArrowOpAssignment_1_2_0 = (Assignment)cGroup_1_2.eContents().get(0);
		private final RuleCall cArrowOpArrowOpParserRuleCall_1_2_0_0 = (RuleCall)cArrowOpAssignment_1_2_0.eContents().get(0);
		private final Assignment cExprAssignment_1_2_1 = (Assignment)cGroup_1_2.eContents().get(1);
		private final RuleCall cExprExpressionParserRuleCall_1_2_1_0 = (RuleCall)cExprAssignment_1_2_1.eContents().get(0);
		private final Group cGroup_1_3 = (Group)cAlternatives_1.eContents().get(3);
		private final Alternatives cAlternatives_1_3_0 = (Alternatives)cGroup_1_3.eContents().get(0);
		private final Keyword cEqualsSignGreaterThanSignKeyword_1_3_0_0 = (Keyword)cAlternatives_1_3_0.eContents().get(0);
		private final Keyword cImpliesKeyword_1_3_0_1 = (Keyword)cAlternatives_1_3_0.eContents().get(1);
		private final Alternatives cAlternatives_1_3_1 = (Alternatives)cGroup_1_3.eContents().get(1);
		private final Assignment cParAssignment_1_3_1_0 = (Assignment)cAlternatives_1_3_1.eContents().get(0);
		private final RuleCall cParParanthesisandExpressionParserRuleCall_1_3_1_0_0 = (RuleCall)cParAssignment_1_3_1_0.eContents().get(0);
		private final Assignment cExprAssignment_1_3_1_1 = (Assignment)cAlternatives_1_3_1.eContents().get(1);
		private final RuleCall cExprExpressionParserRuleCall_1_3_1_1_0 = (RuleCall)cExprAssignment_1_3_1_1.eContents().get(0);
		private final Group cGroup_1_3_2 = (Group)cGroup_1_3.eContents().get(2);
		private final Keyword cElseKeyword_1_3_2_0 = (Keyword)cGroup_1_3_2.eContents().get(0);
		private final Assignment cExprAssignment_1_3_2_1 = (Assignment)cGroup_1_3_2.eContents().get(1);
		private final RuleCall cExprExpressionParserRuleCall_1_3_2_1_0 = (RuleCall)cExprAssignment_1_3_2_1.eContents().get(0);
		private final Group cGroup_1_4 = (Group)cAlternatives_1.eContents().get(4);
		private final Keyword cLeftSquareBracketKeyword_1_4_0 = (Keyword)cGroup_1_4.eContents().get(0);
		private final Group cGroup_1_4_1 = (Group)cGroup_1_4.eContents().get(1);
		private final Assignment cExprAssignment_1_4_1_0 = (Assignment)cGroup_1_4_1.eContents().get(0);
		private final RuleCall cExprExpressionParserRuleCall_1_4_1_0_0 = (RuleCall)cExprAssignment_1_4_1_0.eContents().get(0);
		private final Group cGroup_1_4_1_1 = (Group)cGroup_1_4_1.eContents().get(1);
		private final Assignment cCommaAssignment_1_4_1_1_0 = (Assignment)cGroup_1_4_1_1.eContents().get(0);
		private final RuleCall cCommaCommaParserRuleCall_1_4_1_1_0_0 = (RuleCall)cCommaAssignment_1_4_1_1_0.eContents().get(0);
		private final Assignment cExprAssignment_1_4_1_1_1 = (Assignment)cGroup_1_4_1_1.eContents().get(1);
		private final RuleCall cExprExpressionParserRuleCall_1_4_1_1_1_0 = (RuleCall)cExprAssignment_1_4_1_1_1.eContents().get(0);
		private final Keyword cRightSquareBracketKeyword_1_4_2 = (Keyword)cGroup_1_4.eContents().get(2);
		
		/// *
		//	expr ::= "let" letDecl,+ blockOrBar						1./	
		//       | quant decl,+    blockOrBar							2./
		//       | unOp expr											3./
		//       | expr binOp   expr									4./
		//       | expr arrowOp expr									5./
		//       | expr ["!"|"not"]? compareOp expr					6./
		//       | expr ["=>"|"implies"] expr "else" expr 			7./
		//       | expr "[" expr,* "]"								8./
		//       |     number											9./
		//       | "-" number											10./
		//       | "none"												11./
		//       | "iden"												12./
		//       | "univ"												13./
		//       | "Int"												14./
		//       | "seq/Int"											15./
		//       | "(" expr ")"										16./
		//       | ["@"] Name											17./
		//       | block												18./
		//       | "{" decl,+ blockOrBar "}"							19./
		//	
		// * / Expression:
		//	TerminalExpression (binOp+=BinOp expr+=Expression //4./
		//	//6./
		//	//5./						
		//	//7./
		//	| ("!" | "not")? cmp+=CompareOp expr+=Expression | arrowOp+=ArrowOp expr+=Expression | ("=>" | "implies")
		//	(par+=ParanthesisandExpression | expr+=Expression)? ("else" expr+=Expression)? | "[" (expr+=Expression (comma+=Comma
		//	expr+=Expression)*)? //8./						
		//	"]")*;
		public ParserRule getRule() { return rule; }

		//TerminalExpression (binOp+=BinOp expr+=Expression //4./
		////6./
		////5./						
		////7./
		//| ("!" | "not")? cmp+=CompareOp expr+=Expression | arrowOp+=ArrowOp expr+=Expression | ("=>" | "implies")
		//(par+=ParanthesisandExpression | expr+=Expression)? ("else" expr+=Expression)? | "[" (expr+=Expression (comma+=Comma
		//expr+=Expression)*)? //8./						
		//"]")*
		public Group getGroup() { return cGroup; }

		//TerminalExpression
		public RuleCall getTerminalExpressionParserRuleCall_0() { return cTerminalExpressionParserRuleCall_0; }

		//(binOp+=BinOp expr+=Expression //4./
		////6./
		////5./						
		////7./
		//| ("!" | "not")? cmp+=CompareOp expr+=Expression | arrowOp+=ArrowOp expr+=Expression | ("=>" | "implies")
		//(par+=ParanthesisandExpression | expr+=Expression)? ("else" expr+=Expression)? | "[" (expr+=Expression (comma+=Comma
		//expr+=Expression)*)? //8./						
		//"]")*
		public Alternatives getAlternatives_1() { return cAlternatives_1; }

		//binOp+=BinOp expr+=Expression
		public Group getGroup_1_0() { return cGroup_1_0; }

		//binOp+=BinOp
		public Assignment getBinOpAssignment_1_0_0() { return cBinOpAssignment_1_0_0; }

		//BinOp
		public RuleCall getBinOpBinOpParserRuleCall_1_0_0_0() { return cBinOpBinOpParserRuleCall_1_0_0_0; }

		//expr+=Expression
		public Assignment getExprAssignment_1_0_1() { return cExprAssignment_1_0_1; }

		//Expression
		public RuleCall getExprExpressionParserRuleCall_1_0_1_0() { return cExprExpressionParserRuleCall_1_0_1_0; }

		//("!" | "not")? cmp+=CompareOp expr+=Expression
		public Group getGroup_1_1() { return cGroup_1_1; }

		//("!" | "not")?
		public Alternatives getAlternatives_1_1_0() { return cAlternatives_1_1_0; }

		//"!"
		public Keyword getExclamationMarkKeyword_1_1_0_0() { return cExclamationMarkKeyword_1_1_0_0; }

		//"not"
		public Keyword getNotKeyword_1_1_0_1() { return cNotKeyword_1_1_0_1; }

		//cmp+=CompareOp
		public Assignment getCmpAssignment_1_1_1() { return cCmpAssignment_1_1_1; }

		//CompareOp
		public RuleCall getCmpCompareOpParserRuleCall_1_1_1_0() { return cCmpCompareOpParserRuleCall_1_1_1_0; }

		//expr+=Expression
		public Assignment getExprAssignment_1_1_2() { return cExprAssignment_1_1_2; }

		//Expression
		public RuleCall getExprExpressionParserRuleCall_1_1_2_0() { return cExprExpressionParserRuleCall_1_1_2_0; }

		//arrowOp+=ArrowOp expr+=Expression
		public Group getGroup_1_2() { return cGroup_1_2; }

		//arrowOp+=ArrowOp
		public Assignment getArrowOpAssignment_1_2_0() { return cArrowOpAssignment_1_2_0; }

		//ArrowOp
		public RuleCall getArrowOpArrowOpParserRuleCall_1_2_0_0() { return cArrowOpArrowOpParserRuleCall_1_2_0_0; }

		//expr+=Expression
		public Assignment getExprAssignment_1_2_1() { return cExprAssignment_1_2_1; }

		//Expression
		public RuleCall getExprExpressionParserRuleCall_1_2_1_0() { return cExprExpressionParserRuleCall_1_2_1_0; }

		//("=>" | "implies") (par+=ParanthesisandExpression | expr+=Expression)? ("else" expr+=Expression)?
		public Group getGroup_1_3() { return cGroup_1_3; }

		//"=>" | "implies"
		public Alternatives getAlternatives_1_3_0() { return cAlternatives_1_3_0; }

		//"=>"
		public Keyword getEqualsSignGreaterThanSignKeyword_1_3_0_0() { return cEqualsSignGreaterThanSignKeyword_1_3_0_0; }

		//"implies"
		public Keyword getImpliesKeyword_1_3_0_1() { return cImpliesKeyword_1_3_0_1; }

		//(par+=ParanthesisandExpression | expr+=Expression)?
		public Alternatives getAlternatives_1_3_1() { return cAlternatives_1_3_1; }

		//par+=ParanthesisandExpression
		public Assignment getParAssignment_1_3_1_0() { return cParAssignment_1_3_1_0; }

		//ParanthesisandExpression
		public RuleCall getParParanthesisandExpressionParserRuleCall_1_3_1_0_0() { return cParParanthesisandExpressionParserRuleCall_1_3_1_0_0; }

		//expr+=Expression
		public Assignment getExprAssignment_1_3_1_1() { return cExprAssignment_1_3_1_1; }

		//Expression
		public RuleCall getExprExpressionParserRuleCall_1_3_1_1_0() { return cExprExpressionParserRuleCall_1_3_1_1_0; }

		//("else" expr+=Expression)?
		public Group getGroup_1_3_2() { return cGroup_1_3_2; }

		//"else"
		public Keyword getElseKeyword_1_3_2_0() { return cElseKeyword_1_3_2_0; }

		//expr+=Expression
		public Assignment getExprAssignment_1_3_2_1() { return cExprAssignment_1_3_2_1; }

		//Expression
		public RuleCall getExprExpressionParserRuleCall_1_3_2_1_0() { return cExprExpressionParserRuleCall_1_3_2_1_0; }

		//"[" (expr+=Expression (comma+=Comma expr+=Expression)*)? //8./						
		//"]"
		public Group getGroup_1_4() { return cGroup_1_4; }

		//"["
		public Keyword getLeftSquareBracketKeyword_1_4_0() { return cLeftSquareBracketKeyword_1_4_0; }

		//(expr+=Expression (comma+=Comma expr+=Expression)*)?
		public Group getGroup_1_4_1() { return cGroup_1_4_1; }

		//expr+=Expression
		public Assignment getExprAssignment_1_4_1_0() { return cExprAssignment_1_4_1_0; }

		//Expression
		public RuleCall getExprExpressionParserRuleCall_1_4_1_0_0() { return cExprExpressionParserRuleCall_1_4_1_0_0; }

		//(comma+=Comma expr+=Expression)*
		public Group getGroup_1_4_1_1() { return cGroup_1_4_1_1; }

		//comma+=Comma
		public Assignment getCommaAssignment_1_4_1_1_0() { return cCommaAssignment_1_4_1_1_0; }

		//Comma
		public RuleCall getCommaCommaParserRuleCall_1_4_1_1_0_0() { return cCommaCommaParserRuleCall_1_4_1_1_0_0; }

		//expr+=Expression
		public Assignment getExprAssignment_1_4_1_1_1() { return cExprAssignment_1_4_1_1_1; }

		//Expression
		public RuleCall getExprExpressionParserRuleCall_1_4_1_1_1_0() { return cExprExpressionParserRuleCall_1_4_1_1_1_0; }

		////8./						
		//"]"
		public Keyword getRightSquareBracketKeyword_1_4_2() { return cRightSquareBracketKeyword_1_4_2; }
	}

	public class TerminalExpressionElements extends AbstractParserRuleElementFinder {
		private final ParserRule rule = (ParserRule) GrammarUtil.findRuleForName(getGrammar(), "TerminalExpression");
		private final Alternatives cAlternatives = (Alternatives)rule.eContents().get(1);
		private final Group cGroup_0 = (Group)cAlternatives.eContents().get(0);
		private final Action cExpressionAction_0_0 = (Action)cGroup_0.eContents().get(0);
		private final Assignment cParOAssignment_0_1 = (Assignment)cGroup_0.eContents().get(1);
		private final Keyword cParOLeftParenthesisKeyword_0_1_0 = (Keyword)cParOAssignment_0_1.eContents().get(0);
		private final Assignment cExprAssignment_0_2 = (Assignment)cGroup_0.eContents().get(2);
		private final RuleCall cExprExpressionParserRuleCall_0_2_0 = (RuleCall)cExprAssignment_0_2.eContents().get(0);
		private final Assignment cParFAssignment_0_3 = (Assignment)cGroup_0.eContents().get(3);
		private final Keyword cParFRightParenthesisKeyword_0_3_0 = (Keyword)cParFAssignment_0_3.eContents().get(0);
		private final Group cGroup_1 = (Group)cAlternatives.eContents().get(1);
		private final Action cExpressionAction_1_0 = (Action)cGroup_1.eContents().get(0);
		private final Assignment cLetAssignment_1_1 = (Assignment)cGroup_1.eContents().get(1);
		private final Keyword cLetLetKeyword_1_1_0 = (Keyword)cLetAssignment_1_1.eContents().get(0);
		private final Assignment cLetdeclAssignment_1_2 = (Assignment)cGroup_1.eContents().get(2);
		private final RuleCall cLetdeclLetDeclParserRuleCall_1_2_0 = (RuleCall)cLetdeclAssignment_1_2.eContents().get(0);
		private final Group cGroup_1_3 = (Group)cGroup_1.eContents().get(3);
		private final Assignment cCommaAssignment_1_3_0 = (Assignment)cGroup_1_3.eContents().get(0);
		private final RuleCall cCommaCommaParserRuleCall_1_3_0_0 = (RuleCall)cCommaAssignment_1_3_0.eContents().get(0);
		private final Assignment cLetdeclAssignment_1_3_1 = (Assignment)cGroup_1_3.eContents().get(1);
		private final RuleCall cLetdeclLetDeclParserRuleCall_1_3_1_0 = (RuleCall)cLetdeclAssignment_1_3_1.eContents().get(0);
		private final Assignment cBlockOrBarAssignment_1_4 = (Assignment)cGroup_1.eContents().get(4);
		private final RuleCall cBlockOrBarBlockOrBarParserRuleCall_1_4_0 = (RuleCall)cBlockOrBarAssignment_1_4.eContents().get(0);
		private final Group cGroup_2 = (Group)cAlternatives.eContents().get(2);
		private final Action cExpressionAction_2_0 = (Action)cGroup_2.eContents().get(0);
		private final Assignment cQuantAssignment_2_1 = (Assignment)cGroup_2.eContents().get(1);
		private final RuleCall cQuantQuantParserRuleCall_2_1_0 = (RuleCall)cQuantAssignment_2_1.eContents().get(0);
		private final Group cGroup_2_2 = (Group)cGroup_2.eContents().get(2);
		private final Assignment cDeclAssignment_2_2_0 = (Assignment)cGroup_2_2.eContents().get(0);
		private final RuleCall cDeclDeclParserRuleCall_2_2_0_0 = (RuleCall)cDeclAssignment_2_2_0.eContents().get(0);
		private final Group cGroup_2_2_1 = (Group)cGroup_2_2.eContents().get(1);
		private final Assignment cCommaAssignment_2_2_1_0 = (Assignment)cGroup_2_2_1.eContents().get(0);
		private final RuleCall cCommaCommaParserRuleCall_2_2_1_0_0 = (RuleCall)cCommaAssignment_2_2_1_0.eContents().get(0);
		private final Assignment cDeclAssignment_2_2_1_1 = (Assignment)cGroup_2_2_1.eContents().get(1);
		private final RuleCall cDeclDeclParserRuleCall_2_2_1_1_0 = (RuleCall)cDeclAssignment_2_2_1_1.eContents().get(0);
		private final Alternatives cAlternatives_2_3 = (Alternatives)cGroup_2.eContents().get(3);
		private final Assignment cBlockOrBarAssignment_2_3_0 = (Assignment)cAlternatives_2_3.eContents().get(0);
		private final RuleCall cBlockOrBarBlockOrBarParserRuleCall_2_3_0_0 = (RuleCall)cBlockOrBarAssignment_2_3_0.eContents().get(0);
		private final Assignment cExprAssignment_2_3_1 = (Assignment)cAlternatives_2_3.eContents().get(1);
		private final RuleCall cExprExpressionParserRuleCall_2_3_1_0 = (RuleCall)cExprAssignment_2_3_1.eContents().get(0);
		private final Group cGroup_3 = (Group)cAlternatives.eContents().get(3);
		private final Action cExpressionAction_3_0 = (Action)cGroup_3.eContents().get(0);
		private final Assignment cUnOpAssignment_3_1 = (Assignment)cGroup_3.eContents().get(1);
		private final RuleCall cUnOpUnOpParserRuleCall_3_1_0 = (RuleCall)cUnOpAssignment_3_1.eContents().get(0);
		private final Assignment cExprAssignment_3_2 = (Assignment)cGroup_3.eContents().get(2);
		private final RuleCall cExprExpressionParserRuleCall_3_2_0 = (RuleCall)cExprAssignment_3_2.eContents().get(0);
		private final Group cGroup_4 = (Group)cAlternatives.eContents().get(4);
		private final Action cExpressionAction_4_0 = (Action)cGroup_4.eContents().get(0);
		private final Assignment cCommonAssignment_4_1 = (Assignment)cGroup_4.eContents().get(1);
		private final RuleCall cCommonCommonQuantUnOpParserRuleCall_4_1_0 = (RuleCall)cCommonAssignment_4_1.eContents().get(0);
		private final Group cGroup_4_2 = (Group)cGroup_4.eContents().get(2);
		private final Group cGroup_4_2_0 = (Group)cGroup_4_2.eContents().get(0);
		private final Assignment cDeclAssignment_4_2_0_0 = (Assignment)cGroup_4_2_0.eContents().get(0);
		private final RuleCall cDeclDeclParserRuleCall_4_2_0_0_0 = (RuleCall)cDeclAssignment_4_2_0_0.eContents().get(0);
		private final Group cGroup_4_2_0_1 = (Group)cGroup_4_2_0.eContents().get(1);
		private final Assignment cCommaAssignment_4_2_0_1_0 = (Assignment)cGroup_4_2_0_1.eContents().get(0);
		private final RuleCall cCommaCommaParserRuleCall_4_2_0_1_0_0 = (RuleCall)cCommaAssignment_4_2_0_1_0.eContents().get(0);
		private final Assignment cDeclAssignment_4_2_0_1_1 = (Assignment)cGroup_4_2_0_1.eContents().get(1);
		private final RuleCall cDeclDeclParserRuleCall_4_2_0_1_1_0 = (RuleCall)cDeclAssignment_4_2_0_1_1.eContents().get(0);
		private final Alternatives cAlternatives_4_2_1 = (Alternatives)cGroup_4_2.eContents().get(1);
		private final Assignment cBlockOrBarAssignment_4_2_1_0 = (Assignment)cAlternatives_4_2_1.eContents().get(0);
		private final RuleCall cBlockOrBarBlockOrBarParserRuleCall_4_2_1_0_0 = (RuleCall)cBlockOrBarAssignment_4_2_1_0.eContents().get(0);
		private final Assignment cExprAssignment_4_2_1_1 = (Assignment)cAlternatives_4_2_1.eContents().get(1);
		private final RuleCall cExprExpressionParserRuleCall_4_2_1_1_0 = (RuleCall)cExprAssignment_4_2_1_1.eContents().get(0);
		private final Group cGroup_5 = (Group)cAlternatives.eContents().get(5);
		private final Action cExpressionAction_5_0 = (Action)cGroup_5.eContents().get(0);
		private final RuleCall cINTTerminalRuleCall_5_1 = (RuleCall)cGroup_5.eContents().get(1);
		private final Group cGroup_6 = (Group)cAlternatives.eContents().get(6);
		private final Action cExpressionAction_6_0 = (Action)cGroup_6.eContents().get(0);
		private final RuleCall cNEGATIVE_INTEGERTerminalRuleCall_6_1 = (RuleCall)cGroup_6.eContents().get(1);
		private final Group cGroup_7 = (Group)cAlternatives.eContents().get(7);
		private final Action cExpressionAction_7_0 = (Action)cGroup_7.eContents().get(0);
		private final Assignment cNoneAssignment_7_1 = (Assignment)cGroup_7.eContents().get(1);
		private final Keyword cNoneNoneKeyword_7_1_0 = (Keyword)cNoneAssignment_7_1.eContents().get(0);
		private final Group cGroup_8 = (Group)cAlternatives.eContents().get(8);
		private final Action cExpressionAction_8_0 = (Action)cGroup_8.eContents().get(0);
		private final Assignment cIdenAssignment_8_1 = (Assignment)cGroup_8.eContents().get(1);
		private final Keyword cIdenIdenKeyword_8_1_0 = (Keyword)cIdenAssignment_8_1.eContents().get(0);
		private final Group cGroup_9 = (Group)cAlternatives.eContents().get(9);
		private final Action cExpressionAction_9_0 = (Action)cGroup_9.eContents().get(0);
		private final Assignment cUnivAssignment_9_1 = (Assignment)cGroup_9.eContents().get(1);
		private final Keyword cUnivUnivKeyword_9_1_0 = (Keyword)cUnivAssignment_9_1.eContents().get(0);
		private final Group cGroup_10 = (Group)cAlternatives.eContents().get(10);
		private final Action cExpressionAction_10_0 = (Action)cGroup_10.eContents().get(0);
		private final Group cGroup_10_1 = (Group)cGroup_10.eContents().get(1);
		private final Assignment cIntAssignment_10_1_0 = (Assignment)cGroup_10_1.eContents().get(0);
		private final Keyword cIntIntKeyword_10_1_0_0 = (Keyword)cIntAssignment_10_1_0.eContents().get(0);
		private final Assignment cNameRefAssignment_10_1_1 = (Assignment)cGroup_10_1.eContents().get(1);
		private final CrossReference cNameRefReferencesNameCrossReference_10_1_1_0 = (CrossReference)cNameRefAssignment_10_1_1.eContents().get(0);
		private final RuleCall cNameRefReferencesNameIDTerminalRuleCall_10_1_1_0_1 = (RuleCall)cNameRefReferencesNameCrossReference_10_1_1_0.eContents().get(1);
		private final Assignment cIntAssignment_11 = (Assignment)cAlternatives.eContents().get(11);
		private final Keyword cIntIntKeyword_11_0 = (Keyword)cIntAssignment_11.eContents().get(0);
		private final Group cGroup_12 = (Group)cAlternatives.eContents().get(12);
		private final Action cExpressionAction_12_0 = (Action)cGroup_12.eContents().get(0);
		private final Assignment cSeqAssignment_12_1 = (Assignment)cGroup_12.eContents().get(1);
		private final Keyword cSeqSeqIntKeyword_12_1_0 = (Keyword)cSeqAssignment_12_1.eContents().get(0);
		private final Group cGroup_13 = (Group)cAlternatives.eContents().get(13);
		private final Action cExpressionAction_13_0 = (Action)cGroup_13.eContents().get(0);
		private final Keyword cCommercialAtKeyword_13_1 = (Keyword)cGroup_13.eContents().get(1);
		private final Keyword cIntKeyword_13_2 = (Keyword)cGroup_13.eContents().get(2);
		private final Group cGroup_13_3 = (Group)cGroup_13.eContents().get(3);
		private final Alternatives cAlternatives_13_3_0 = (Alternatives)cGroup_13_3.eContents().get(0);
		private final Assignment cAsnameAssignment_13_3_0_0 = (Assignment)cAlternatives_13_3_0.eContents().get(0);
		private final CrossReference cAsnameAsNameCrossReference_13_3_0_0_0 = (CrossReference)cAsnameAssignment_13_3_0_0.eContents().get(0);
		private final RuleCall cAsnameAsNameIDTerminalRuleCall_13_3_0_0_0_1 = (RuleCall)cAsnameAsNameCrossReference_13_3_0_0_0.eContents().get(1);
		private final Keyword cThisKeyword_13_3_0_1 = (Keyword)cAlternatives_13_3_0.eContents().get(1);
		private final Keyword cSolidusKeyword_13_3_1 = (Keyword)cGroup_13_3.eContents().get(1);
		private final Alternatives cAlternatives_13_4 = (Alternatives)cGroup_13.eContents().get(4);
		private final Assignment cNameRefAssignment_13_4_0 = (Assignment)cAlternatives_13_4.eContents().get(0);
		private final CrossReference cNameRefReferencesNameCrossReference_13_4_0_0 = (CrossReference)cNameRefAssignment_13_4_0.eContents().get(0);
		private final RuleCall cNameRefReferencesNameIDTerminalRuleCall_13_4_0_0_1 = (RuleCall)cNameRefReferencesNameCrossReference_13_4_0_0.eContents().get(1);
		private final Keyword cThisKeyword_13_4_1 = (Keyword)cAlternatives_13_4.eContents().get(1);
		private final Assignment cNameAssignment_13_4_2 = (Assignment)cAlternatives_13_4.eContents().get(2);
		private final Keyword cNamePredTotalOrderKeyword_13_4_2_0 = (Keyword)cNameAssignment_13_4_2.eContents().get(0);
		private final Assignment cNameAssignment_13_4_3 = (Assignment)cAlternatives_13_4.eContents().get(3);
		private final Alternatives cNameAlternatives_13_4_3_0 = (Alternatives)cNameAssignment_13_4_3.eContents().get(0);
		private final Keyword cNameFunAddKeyword_13_4_3_0_0 = (Keyword)cNameAlternatives_13_4_3_0.eContents().get(0);
		private final Keyword cNameFunSubKeyword_13_4_3_0_1 = (Keyword)cNameAlternatives_13_4_3_0.eContents().get(1);
		private final Keyword cNameFunMulKeyword_13_4_3_0_2 = (Keyword)cNameAlternatives_13_4_3_0.eContents().get(2);
		private final Keyword cNameFunDivKeyword_13_4_3_0_3 = (Keyword)cNameAlternatives_13_4_3_0.eContents().get(3);
		private final Keyword cNameFunRemKeyword_13_4_3_0_4 = (Keyword)cNameAlternatives_13_4_3_0.eContents().get(4);
		private final Keyword cNameFunMinKeyword_13_4_3_0_5 = (Keyword)cNameAlternatives_13_4_3_0.eContents().get(5);
		private final Keyword cNameFunMaxKeyword_13_4_3_0_6 = (Keyword)cNameAlternatives_13_4_3_0.eContents().get(6);
		private final Keyword cNameFunNextKeyword_13_4_3_0_7 = (Keyword)cNameAlternatives_13_4_3_0.eContents().get(7);
		private final Group cGroup_14 = (Group)cAlternatives.eContents().get(14);
		private final Action cExpressionAction_14_0 = (Action)cGroup_14.eContents().get(0);
		private final Assignment cBlockAssignment_14_1 = (Assignment)cGroup_14.eContents().get(1);
		private final RuleCall cBlockBlockParserRuleCall_14_1_0 = (RuleCall)cBlockAssignment_14_1.eContents().get(0);
		private final Group cGroup_15 = (Group)cAlternatives.eContents().get(15);
		private final Action cExpressionAction_15_0 = (Action)cGroup_15.eContents().get(0);
		private final Assignment cLeftCurlyBracketAssignment_15_1 = (Assignment)cGroup_15.eContents().get(1);
		private final RuleCall cLeftCurlyBracketLeftCurlyBracketParserRuleCall_15_1_0 = (RuleCall)cLeftCurlyBracketAssignment_15_1.eContents().get(0);
		private final Assignment cDeclAssignment_15_2 = (Assignment)cGroup_15.eContents().get(2);
		private final RuleCall cDeclDeclParserRuleCall_15_2_0 = (RuleCall)cDeclAssignment_15_2.eContents().get(0);
		private final Group cGroup_15_3 = (Group)cGroup_15.eContents().get(3);
		private final Assignment cCommaAssignment_15_3_0 = (Assignment)cGroup_15_3.eContents().get(0);
		private final RuleCall cCommaCommaParserRuleCall_15_3_0_0 = (RuleCall)cCommaAssignment_15_3_0.eContents().get(0);
		private final Assignment cDeclAssignment_15_3_1 = (Assignment)cGroup_15_3.eContents().get(1);
		private final RuleCall cDeclDeclParserRuleCall_15_3_1_0 = (RuleCall)cDeclAssignment_15_3_1.eContents().get(0);
		private final Assignment cBlockOrBarAssignment_15_4 = (Assignment)cGroup_15.eContents().get(4);
		private final RuleCall cBlockOrBarBlockOrBarParserRuleCall_15_4_0 = (RuleCall)cBlockOrBarAssignment_15_4.eContents().get(0);
		private final Assignment cRightCurlyBracketAssignment_15_5 = (Assignment)cGroup_15.eContents().get(5);
		private final RuleCall cRightCurlyBracketRightCurlyBracketParserRuleCall_15_5_0 = (RuleCall)cRightCurlyBracketAssignment_15_5.eContents().get(0);
		
		////19./
		//TerminalExpression returns Expression:
		//	{Expression} parO="(" expr+=Expression+ parF=")" //1./
		//	//2./
		//	//2./ and 3./	
		//	//9./
		//	//10./
		//	//11./
		//	//12./ 
		//	//13./
		//	//14./
		//	//17./
		//	//18./
		//	| {Expression} let="let" letdecl+=LetDecl (comma+=Comma letdecl+=LetDecl)* blockOrBar+=BlockOrBar | {Expression}
		//	quant=Quant (decl+=Decl (comma+=Comma decl+=Decl)*)? (blockOrBar+=BlockOrBar | expr+=Expression)? | {Expression}
		//	unOp=UnOp expr+=Expression | {Expression} common+=CommonQuantUnOp ((decl+=Decl (comma+=Comma decl+=Decl)*)?
		//	(blockOrBar+=BlockOrBar | expr+=Expression)?) | {Expression} INT | {Expression} NEGATIVE_INTEGER | {Expression}
		//	none="none" | {Expression} iden="iden" | {Expression} univ="univ" | {Expression} (int="int" nameRef=[ReferencesName]?)
		//	| int="Int" | {Expression} seq="seq/Int" | {Expression} "@"? "int"? ((asname=[AsName] | "this") "/")?
		//	(nameRef=[ReferencesName] | "this" | name="pred/totalOrder" | name=("fun/add" | "fun/sub" | "fun/mul" | "fun/div" |
		//	"fun/rem" | "fun/min" | "fun/max" | "fun/next")) | {Expression} block+=Block | {Expression}
		//	leftCurlyBracket=LeftCurlyBracket decl+=Decl (comma+=Comma decl+=Decl)* blockOrBar+=BlockOrBar
		//	rightCurlyBracket=RightCurlyBracket;
		public ParserRule getRule() { return rule; }

		//{Expression} parO="(" expr+=Expression+ parF=")" //1./
		////2./
		////2./ and 3./	
		////9./
		////10./
		////11./
		////12./ 
		////13./
		////14./
		////17./
		////18./
		//| {Expression} let="let" letdecl+=LetDecl (comma+=Comma letdecl+=LetDecl)* blockOrBar+=BlockOrBar | {Expression}
		//quant=Quant (decl+=Decl (comma+=Comma decl+=Decl)*)? (blockOrBar+=BlockOrBar | expr+=Expression)? | {Expression}
		//unOp=UnOp expr+=Expression | {Expression} common+=CommonQuantUnOp ((decl+=Decl (comma+=Comma decl+=Decl)*)?
		//(blockOrBar+=BlockOrBar | expr+=Expression)?) | {Expression} INT | {Expression} NEGATIVE_INTEGER | {Expression}
		//none="none" | {Expression} iden="iden" | {Expression} univ="univ" | {Expression} (int="int" nameRef=[ReferencesName]?)
		//| int="Int" | {Expression} seq="seq/Int" | {Expression} "@"? "int"? ((asname=[AsName] | "this") "/")?
		//(nameRef=[ReferencesName] | "this" | name="pred/totalOrder" | name=("fun/add" | "fun/sub" | "fun/mul" | "fun/div" |
		//"fun/rem" | "fun/min" | "fun/max" | "fun/next")) | {Expression} block+=Block | {Expression}
		//leftCurlyBracket=LeftCurlyBracket decl+=Decl (comma+=Comma decl+=Decl)* blockOrBar+=BlockOrBar
		//rightCurlyBracket=RightCurlyBracket
		public Alternatives getAlternatives() { return cAlternatives; }

		//{Expression} parO="(" expr+=Expression+ parF=")"
		public Group getGroup_0() { return cGroup_0; }

		//{Expression}
		public Action getExpressionAction_0_0() { return cExpressionAction_0_0; }

		//parO="("
		public Assignment getParOAssignment_0_1() { return cParOAssignment_0_1; }

		//"("
		public Keyword getParOLeftParenthesisKeyword_0_1_0() { return cParOLeftParenthesisKeyword_0_1_0; }

		//expr+=Expression+
		public Assignment getExprAssignment_0_2() { return cExprAssignment_0_2; }

		//Expression
		public RuleCall getExprExpressionParserRuleCall_0_2_0() { return cExprExpressionParserRuleCall_0_2_0; }

		//parF=")"
		public Assignment getParFAssignment_0_3() { return cParFAssignment_0_3; }

		//")"
		public Keyword getParFRightParenthesisKeyword_0_3_0() { return cParFRightParenthesisKeyword_0_3_0; }

		//{Expression} let="let" letdecl+=LetDecl (comma+=Comma letdecl+=LetDecl)* blockOrBar+=BlockOrBar
		public Group getGroup_1() { return cGroup_1; }

		//{Expression}
		public Action getExpressionAction_1_0() { return cExpressionAction_1_0; }

		//let="let"
		public Assignment getLetAssignment_1_1() { return cLetAssignment_1_1; }

		//"let"
		public Keyword getLetLetKeyword_1_1_0() { return cLetLetKeyword_1_1_0; }

		//letdecl+=LetDecl
		public Assignment getLetdeclAssignment_1_2() { return cLetdeclAssignment_1_2; }

		//LetDecl
		public RuleCall getLetdeclLetDeclParserRuleCall_1_2_0() { return cLetdeclLetDeclParserRuleCall_1_2_0; }

		//(comma+=Comma letdecl+=LetDecl)*
		public Group getGroup_1_3() { return cGroup_1_3; }

		//comma+=Comma
		public Assignment getCommaAssignment_1_3_0() { return cCommaAssignment_1_3_0; }

		//Comma
		public RuleCall getCommaCommaParserRuleCall_1_3_0_0() { return cCommaCommaParserRuleCall_1_3_0_0; }

		//letdecl+=LetDecl
		public Assignment getLetdeclAssignment_1_3_1() { return cLetdeclAssignment_1_3_1; }

		//LetDecl
		public RuleCall getLetdeclLetDeclParserRuleCall_1_3_1_0() { return cLetdeclLetDeclParserRuleCall_1_3_1_0; }

		//blockOrBar+=BlockOrBar
		public Assignment getBlockOrBarAssignment_1_4() { return cBlockOrBarAssignment_1_4; }

		//BlockOrBar
		public RuleCall getBlockOrBarBlockOrBarParserRuleCall_1_4_0() { return cBlockOrBarBlockOrBarParserRuleCall_1_4_0; }

		//{Expression} quant=Quant (decl+=Decl (comma+=Comma decl+=Decl)*)? (blockOrBar+=BlockOrBar | expr+=Expression)?
		public Group getGroup_2() { return cGroup_2; }

		//{Expression}
		public Action getExpressionAction_2_0() { return cExpressionAction_2_0; }

		//quant=Quant
		public Assignment getQuantAssignment_2_1() { return cQuantAssignment_2_1; }

		//Quant
		public RuleCall getQuantQuantParserRuleCall_2_1_0() { return cQuantQuantParserRuleCall_2_1_0; }

		//(decl+=Decl (comma+=Comma decl+=Decl)*)?
		public Group getGroup_2_2() { return cGroup_2_2; }

		//decl+=Decl
		public Assignment getDeclAssignment_2_2_0() { return cDeclAssignment_2_2_0; }

		//Decl
		public RuleCall getDeclDeclParserRuleCall_2_2_0_0() { return cDeclDeclParserRuleCall_2_2_0_0; }

		//(comma+=Comma decl+=Decl)*
		public Group getGroup_2_2_1() { return cGroup_2_2_1; }

		//comma+=Comma
		public Assignment getCommaAssignment_2_2_1_0() { return cCommaAssignment_2_2_1_0; }

		//Comma
		public RuleCall getCommaCommaParserRuleCall_2_2_1_0_0() { return cCommaCommaParserRuleCall_2_2_1_0_0; }

		//decl+=Decl
		public Assignment getDeclAssignment_2_2_1_1() { return cDeclAssignment_2_2_1_1; }

		//Decl
		public RuleCall getDeclDeclParserRuleCall_2_2_1_1_0() { return cDeclDeclParserRuleCall_2_2_1_1_0; }

		//(blockOrBar+=BlockOrBar | expr+=Expression)?
		public Alternatives getAlternatives_2_3() { return cAlternatives_2_3; }

		//blockOrBar+=BlockOrBar
		public Assignment getBlockOrBarAssignment_2_3_0() { return cBlockOrBarAssignment_2_3_0; }

		//BlockOrBar
		public RuleCall getBlockOrBarBlockOrBarParserRuleCall_2_3_0_0() { return cBlockOrBarBlockOrBarParserRuleCall_2_3_0_0; }

		//expr+=Expression
		public Assignment getExprAssignment_2_3_1() { return cExprAssignment_2_3_1; }

		//Expression
		public RuleCall getExprExpressionParserRuleCall_2_3_1_0() { return cExprExpressionParserRuleCall_2_3_1_0; }

		//{Expression} unOp=UnOp expr+=Expression
		public Group getGroup_3() { return cGroup_3; }

		//{Expression}
		public Action getExpressionAction_3_0() { return cExpressionAction_3_0; }

		//unOp=UnOp
		public Assignment getUnOpAssignment_3_1() { return cUnOpAssignment_3_1; }

		//UnOp
		public RuleCall getUnOpUnOpParserRuleCall_3_1_0() { return cUnOpUnOpParserRuleCall_3_1_0; }

		//expr+=Expression
		public Assignment getExprAssignment_3_2() { return cExprAssignment_3_2; }

		//Expression
		public RuleCall getExprExpressionParserRuleCall_3_2_0() { return cExprExpressionParserRuleCall_3_2_0; }

		//{Expression} common+=CommonQuantUnOp ((decl+=Decl (comma+=Comma decl+=Decl)*)? (blockOrBar+=BlockOrBar |
		//expr+=Expression)?)
		public Group getGroup_4() { return cGroup_4; }

		//{Expression}
		public Action getExpressionAction_4_0() { return cExpressionAction_4_0; }

		//common+=CommonQuantUnOp
		public Assignment getCommonAssignment_4_1() { return cCommonAssignment_4_1; }

		//CommonQuantUnOp
		public RuleCall getCommonCommonQuantUnOpParserRuleCall_4_1_0() { return cCommonCommonQuantUnOpParserRuleCall_4_1_0; }

		//(decl+=Decl (comma+=Comma decl+=Decl)*)? (blockOrBar+=BlockOrBar | expr+=Expression)?
		public Group getGroup_4_2() { return cGroup_4_2; }

		//(decl+=Decl (comma+=Comma decl+=Decl)*)?
		public Group getGroup_4_2_0() { return cGroup_4_2_0; }

		//decl+=Decl
		public Assignment getDeclAssignment_4_2_0_0() { return cDeclAssignment_4_2_0_0; }

		//Decl
		public RuleCall getDeclDeclParserRuleCall_4_2_0_0_0() { return cDeclDeclParserRuleCall_4_2_0_0_0; }

		//(comma+=Comma decl+=Decl)*
		public Group getGroup_4_2_0_1() { return cGroup_4_2_0_1; }

		//comma+=Comma
		public Assignment getCommaAssignment_4_2_0_1_0() { return cCommaAssignment_4_2_0_1_0; }

		//Comma
		public RuleCall getCommaCommaParserRuleCall_4_2_0_1_0_0() { return cCommaCommaParserRuleCall_4_2_0_1_0_0; }

		//decl+=Decl
		public Assignment getDeclAssignment_4_2_0_1_1() { return cDeclAssignment_4_2_0_1_1; }

		//Decl
		public RuleCall getDeclDeclParserRuleCall_4_2_0_1_1_0() { return cDeclDeclParserRuleCall_4_2_0_1_1_0; }

		//(blockOrBar+=BlockOrBar | expr+=Expression)?
		public Alternatives getAlternatives_4_2_1() { return cAlternatives_4_2_1; }

		//blockOrBar+=BlockOrBar
		public Assignment getBlockOrBarAssignment_4_2_1_0() { return cBlockOrBarAssignment_4_2_1_0; }

		//BlockOrBar
		public RuleCall getBlockOrBarBlockOrBarParserRuleCall_4_2_1_0_0() { return cBlockOrBarBlockOrBarParserRuleCall_4_2_1_0_0; }

		//expr+=Expression
		public Assignment getExprAssignment_4_2_1_1() { return cExprAssignment_4_2_1_1; }

		//Expression
		public RuleCall getExprExpressionParserRuleCall_4_2_1_1_0() { return cExprExpressionParserRuleCall_4_2_1_1_0; }

		//{Expression} INT
		public Group getGroup_5() { return cGroup_5; }

		//{Expression}
		public Action getExpressionAction_5_0() { return cExpressionAction_5_0; }

		//INT
		public RuleCall getINTTerminalRuleCall_5_1() { return cINTTerminalRuleCall_5_1; }

		//{Expression} NEGATIVE_INTEGER
		public Group getGroup_6() { return cGroup_6; }

		//{Expression}
		public Action getExpressionAction_6_0() { return cExpressionAction_6_0; }

		//NEGATIVE_INTEGER
		public RuleCall getNEGATIVE_INTEGERTerminalRuleCall_6_1() { return cNEGATIVE_INTEGERTerminalRuleCall_6_1; }

		//{Expression} none="none"
		public Group getGroup_7() { return cGroup_7; }

		//{Expression}
		public Action getExpressionAction_7_0() { return cExpressionAction_7_0; }

		//none="none"
		public Assignment getNoneAssignment_7_1() { return cNoneAssignment_7_1; }

		//"none"
		public Keyword getNoneNoneKeyword_7_1_0() { return cNoneNoneKeyword_7_1_0; }

		//{Expression} iden="iden"
		public Group getGroup_8() { return cGroup_8; }

		//{Expression}
		public Action getExpressionAction_8_0() { return cExpressionAction_8_0; }

		//iden="iden"
		public Assignment getIdenAssignment_8_1() { return cIdenAssignment_8_1; }

		//"iden"
		public Keyword getIdenIdenKeyword_8_1_0() { return cIdenIdenKeyword_8_1_0; }

		//{Expression} univ="univ"
		public Group getGroup_9() { return cGroup_9; }

		//{Expression}
		public Action getExpressionAction_9_0() { return cExpressionAction_9_0; }

		//univ="univ"
		public Assignment getUnivAssignment_9_1() { return cUnivAssignment_9_1; }

		//"univ"
		public Keyword getUnivUnivKeyword_9_1_0() { return cUnivUnivKeyword_9_1_0; }

		//{Expression} (int="int" nameRef=[ReferencesName]?)
		public Group getGroup_10() { return cGroup_10; }

		//{Expression}
		public Action getExpressionAction_10_0() { return cExpressionAction_10_0; }

		//int="int" nameRef=[ReferencesName]?
		public Group getGroup_10_1() { return cGroup_10_1; }

		//int="int"
		public Assignment getIntAssignment_10_1_0() { return cIntAssignment_10_1_0; }

		//"int"
		public Keyword getIntIntKeyword_10_1_0_0() { return cIntIntKeyword_10_1_0_0; }

		//nameRef=[ReferencesName]?
		public Assignment getNameRefAssignment_10_1_1() { return cNameRefAssignment_10_1_1; }

		//[ReferencesName]
		public CrossReference getNameRefReferencesNameCrossReference_10_1_1_0() { return cNameRefReferencesNameCrossReference_10_1_1_0; }

		//ID
		public RuleCall getNameRefReferencesNameIDTerminalRuleCall_10_1_1_0_1() { return cNameRefReferencesNameIDTerminalRuleCall_10_1_1_0_1; }

		//int="Int"
		public Assignment getIntAssignment_11() { return cIntAssignment_11; }

		//"Int"
		public Keyword getIntIntKeyword_11_0() { return cIntIntKeyword_11_0; }

		//{Expression} seq="seq/Int"
		public Group getGroup_12() { return cGroup_12; }

		//{Expression}
		public Action getExpressionAction_12_0() { return cExpressionAction_12_0; }

		//seq="seq/Int"
		public Assignment getSeqAssignment_12_1() { return cSeqAssignment_12_1; }

		//"seq/Int"
		public Keyword getSeqSeqIntKeyword_12_1_0() { return cSeqSeqIntKeyword_12_1_0; }

		//{Expression} "@"? "int"? ((asname=[AsName] | "this") "/")? (nameRef=[ReferencesName] | "this" | name="pred/totalOrder" |
		//name=("fun/add" | "fun/sub" | "fun/mul" | "fun/div" | "fun/rem" | "fun/min" | "fun/max" | "fun/next"))
		public Group getGroup_13() { return cGroup_13; }

		//{Expression}
		public Action getExpressionAction_13_0() { return cExpressionAction_13_0; }

		//"@"?
		public Keyword getCommercialAtKeyword_13_1() { return cCommercialAtKeyword_13_1; }

		//"int"?
		public Keyword getIntKeyword_13_2() { return cIntKeyword_13_2; }

		//((asname=[AsName] | "this") "/")?
		public Group getGroup_13_3() { return cGroup_13_3; }

		//asname=[AsName] | "this"
		public Alternatives getAlternatives_13_3_0() { return cAlternatives_13_3_0; }

		//asname=[AsName]
		public Assignment getAsnameAssignment_13_3_0_0() { return cAsnameAssignment_13_3_0_0; }

		//[AsName]
		public CrossReference getAsnameAsNameCrossReference_13_3_0_0_0() { return cAsnameAsNameCrossReference_13_3_0_0_0; }

		//ID
		public RuleCall getAsnameAsNameIDTerminalRuleCall_13_3_0_0_0_1() { return cAsnameAsNameIDTerminalRuleCall_13_3_0_0_0_1; }

		//"this"
		public Keyword getThisKeyword_13_3_0_1() { return cThisKeyword_13_3_0_1; }

		//"/"
		public Keyword getSolidusKeyword_13_3_1() { return cSolidusKeyword_13_3_1; }

		//nameRef=[ReferencesName] | "this" | name="pred/totalOrder" | name=("fun/add" | "fun/sub" | "fun/mul" | "fun/div" |
		//"fun/rem" | "fun/min" | "fun/max" | "fun/next")
		public Alternatives getAlternatives_13_4() { return cAlternatives_13_4; }

		//nameRef=[ReferencesName]
		public Assignment getNameRefAssignment_13_4_0() { return cNameRefAssignment_13_4_0; }

		//[ReferencesName]
		public CrossReference getNameRefReferencesNameCrossReference_13_4_0_0() { return cNameRefReferencesNameCrossReference_13_4_0_0; }

		//ID
		public RuleCall getNameRefReferencesNameIDTerminalRuleCall_13_4_0_0_1() { return cNameRefReferencesNameIDTerminalRuleCall_13_4_0_0_1; }

		//"this"
		public Keyword getThisKeyword_13_4_1() { return cThisKeyword_13_4_1; }

		//name="pred/totalOrder"
		public Assignment getNameAssignment_13_4_2() { return cNameAssignment_13_4_2; }

		//"pred/totalOrder"
		public Keyword getNamePredTotalOrderKeyword_13_4_2_0() { return cNamePredTotalOrderKeyword_13_4_2_0; }

		//name=("fun/add" | "fun/sub" | "fun/mul" | "fun/div" | "fun/rem" | "fun/min" | "fun/max" | "fun/next")
		public Assignment getNameAssignment_13_4_3() { return cNameAssignment_13_4_3; }

		//"fun/add" | "fun/sub" | "fun/mul" | "fun/div" | "fun/rem" | "fun/min" | "fun/max" | "fun/next"
		public Alternatives getNameAlternatives_13_4_3_0() { return cNameAlternatives_13_4_3_0; }

		//"fun/add"
		public Keyword getNameFunAddKeyword_13_4_3_0_0() { return cNameFunAddKeyword_13_4_3_0_0; }

		//"fun/sub"
		public Keyword getNameFunSubKeyword_13_4_3_0_1() { return cNameFunSubKeyword_13_4_3_0_1; }

		//"fun/mul"
		public Keyword getNameFunMulKeyword_13_4_3_0_2() { return cNameFunMulKeyword_13_4_3_0_2; }

		//"fun/div"
		public Keyword getNameFunDivKeyword_13_4_3_0_3() { return cNameFunDivKeyword_13_4_3_0_3; }

		//"fun/rem"
		public Keyword getNameFunRemKeyword_13_4_3_0_4() { return cNameFunRemKeyword_13_4_3_0_4; }

		//"fun/min"
		public Keyword getNameFunMinKeyword_13_4_3_0_5() { return cNameFunMinKeyword_13_4_3_0_5; }

		//"fun/max"
		public Keyword getNameFunMaxKeyword_13_4_3_0_6() { return cNameFunMaxKeyword_13_4_3_0_6; }

		//"fun/next"
		public Keyword getNameFunNextKeyword_13_4_3_0_7() { return cNameFunNextKeyword_13_4_3_0_7; }

		//{Expression} block+=Block
		public Group getGroup_14() { return cGroup_14; }

		//{Expression}
		public Action getExpressionAction_14_0() { return cExpressionAction_14_0; }

		//block+=Block
		public Assignment getBlockAssignment_14_1() { return cBlockAssignment_14_1; }

		//Block
		public RuleCall getBlockBlockParserRuleCall_14_1_0() { return cBlockBlockParserRuleCall_14_1_0; }

		//{Expression} leftCurlyBracket=LeftCurlyBracket decl+=Decl (comma+=Comma decl+=Decl)* blockOrBar+=BlockOrBar
		//rightCurlyBracket=RightCurlyBracket
		public Group getGroup_15() { return cGroup_15; }

		//{Expression}
		public Action getExpressionAction_15_0() { return cExpressionAction_15_0; }

		//leftCurlyBracket=LeftCurlyBracket
		public Assignment getLeftCurlyBracketAssignment_15_1() { return cLeftCurlyBracketAssignment_15_1; }

		//LeftCurlyBracket
		public RuleCall getLeftCurlyBracketLeftCurlyBracketParserRuleCall_15_1_0() { return cLeftCurlyBracketLeftCurlyBracketParserRuleCall_15_1_0; }

		//decl+=Decl
		public Assignment getDeclAssignment_15_2() { return cDeclAssignment_15_2; }

		//Decl
		public RuleCall getDeclDeclParserRuleCall_15_2_0() { return cDeclDeclParserRuleCall_15_2_0; }

		//(comma+=Comma decl+=Decl)*
		public Group getGroup_15_3() { return cGroup_15_3; }

		//comma+=Comma
		public Assignment getCommaAssignment_15_3_0() { return cCommaAssignment_15_3_0; }

		//Comma
		public RuleCall getCommaCommaParserRuleCall_15_3_0_0() { return cCommaCommaParserRuleCall_15_3_0_0; }

		//decl+=Decl
		public Assignment getDeclAssignment_15_3_1() { return cDeclAssignment_15_3_1; }

		//Decl
		public RuleCall getDeclDeclParserRuleCall_15_3_1_0() { return cDeclDeclParserRuleCall_15_3_1_0; }

		//blockOrBar+=BlockOrBar
		public Assignment getBlockOrBarAssignment_15_4() { return cBlockOrBarAssignment_15_4; }

		//BlockOrBar
		public RuleCall getBlockOrBarBlockOrBarParserRuleCall_15_4_0() { return cBlockOrBarBlockOrBarParserRuleCall_15_4_0; }

		//rightCurlyBracket=RightCurlyBracket
		public Assignment getRightCurlyBracketAssignment_15_5() { return cRightCurlyBracketAssignment_15_5; }

		//RightCurlyBracket
		public RuleCall getRightCurlyBracketRightCurlyBracketParserRuleCall_15_5_0() { return cRightCurlyBracketRightCurlyBracketParserRuleCall_15_5_0; }
	}

	public class BlockElements extends AbstractParserRuleElementFinder {
		private final ParserRule rule = (ParserRule) GrammarUtil.findRuleForName(getGrammar(), "Block");
		private final Group cGroup = (Group)rule.eContents().get(1);
		private final Assignment cLeftCAssignment_0 = (Assignment)cGroup.eContents().get(0);
		private final RuleCall cLeftCLeftCurlyBracketParserRuleCall_0_0 = (RuleCall)cLeftCAssignment_0.eContents().get(0);
		private final Assignment cExprAssignment_1 = (Assignment)cGroup.eContents().get(1);
		private final RuleCall cExprExpressionParserRuleCall_1_0 = (RuleCall)cExprAssignment_1.eContents().get(0);
		private final Assignment cRightCAssignment_2 = (Assignment)cGroup.eContents().get(2);
		private final RuleCall cRightCRightCurlyBracketParserRuleCall_2_0 = (RuleCall)cRightCAssignment_2.eContents().get(0);
		
		/// *
		//	block ::= "{" expr* "}"
		// * / Block:
		//	leftC=LeftCurlyBracket expr+=Expression* rightC=RightCurlyBracket;
		public ParserRule getRule() { return rule; }

		//leftC=LeftCurlyBracket expr+=Expression* rightC=RightCurlyBracket
		public Group getGroup() { return cGroup; }

		//leftC=LeftCurlyBracket
		public Assignment getLeftCAssignment_0() { return cLeftCAssignment_0; }

		//LeftCurlyBracket
		public RuleCall getLeftCLeftCurlyBracketParserRuleCall_0_0() { return cLeftCLeftCurlyBracketParserRuleCall_0_0; }

		//expr+=Expression*
		public Assignment getExprAssignment_1() { return cExprAssignment_1; }

		//Expression
		public RuleCall getExprExpressionParserRuleCall_1_0() { return cExprExpressionParserRuleCall_1_0; }

		//rightC=RightCurlyBracket
		public Assignment getRightCAssignment_2() { return cRightCAssignment_2; }

		//RightCurlyBracket
		public RuleCall getRightCRightCurlyBracketParserRuleCall_2_0() { return cRightCRightCurlyBracketParserRuleCall_2_0; }
	}

	public class DeclElements extends AbstractParserRuleElementFinder {
		private final ParserRule rule = (ParserRule) GrammarUtil.findRuleForName(getGrammar(), "Decl");
		private final Group cGroup = (Group)rule.eContents().get(1);
		private final Keyword cPrivateKeyword_0 = (Keyword)cGroup.eContents().get(0);
		private final Keyword cDisjKeyword_1 = (Keyword)cGroup.eContents().get(1);
		private final Assignment cPropertyNameAssignment_2 = (Assignment)cGroup.eContents().get(2);
		private final RuleCall cPropertyNamePropertyNameParserRuleCall_2_0 = (RuleCall)cPropertyNameAssignment_2.eContents().get(0);
		private final Group cGroup_3 = (Group)cGroup.eContents().get(3);
		private final Assignment cCommaAssignment_3_0 = (Assignment)cGroup_3.eContents().get(0);
		private final RuleCall cCommaCommaParserRuleCall_3_0_0 = (RuleCall)cCommaAssignment_3_0.eContents().get(0);
		private final Assignment cPropertyNameAssignment_3_1 = (Assignment)cGroup_3.eContents().get(1);
		private final RuleCall cPropertyNamePropertyNameParserRuleCall_3_1_0 = (RuleCall)cPropertyNameAssignment_3_1.eContents().get(0);
		private final Assignment cColonAssignment_4 = (Assignment)cGroup.eContents().get(4);
		private final RuleCall cColonColonParserRuleCall_4_0 = (RuleCall)cColonAssignment_4.eContents().get(0);
		private final Keyword cDisjKeyword_5 = (Keyword)cGroup.eContents().get(5);
		private final Assignment cExprAssignment_6 = (Assignment)cGroup.eContents().get(6);
		private final RuleCall cExprExpressionParserRuleCall_6_0 = (RuleCall)cExprAssignment_6.eContents().get(0);
		
		/// *
		//	decl ::= ["private"] ["disj"] name,+ ":" ["disj"] expr
		// * / Decl:
		//	"private"? "disj"? propertyName+=PropertyName (comma+=Comma propertyName+=PropertyName)* colon=Colon "disj"?
		//	expr=Expression;
		public ParserRule getRule() { return rule; }

		//"private"? "disj"? propertyName+=PropertyName (comma+=Comma propertyName+=PropertyName)* colon=Colon "disj"?
		//expr=Expression
		public Group getGroup() { return cGroup; }

		//"private"?
		public Keyword getPrivateKeyword_0() { return cPrivateKeyword_0; }

		//"disj"?
		public Keyword getDisjKeyword_1() { return cDisjKeyword_1; }

		//propertyName+=PropertyName
		public Assignment getPropertyNameAssignment_2() { return cPropertyNameAssignment_2; }

		//PropertyName
		public RuleCall getPropertyNamePropertyNameParserRuleCall_2_0() { return cPropertyNamePropertyNameParserRuleCall_2_0; }

		//(comma+=Comma propertyName+=PropertyName)*
		public Group getGroup_3() { return cGroup_3; }

		//comma+=Comma
		public Assignment getCommaAssignment_3_0() { return cCommaAssignment_3_0; }

		//Comma
		public RuleCall getCommaCommaParserRuleCall_3_0_0() { return cCommaCommaParserRuleCall_3_0_0; }

		//propertyName+=PropertyName
		public Assignment getPropertyNameAssignment_3_1() { return cPropertyNameAssignment_3_1; }

		//PropertyName
		public RuleCall getPropertyNamePropertyNameParserRuleCall_3_1_0() { return cPropertyNamePropertyNameParserRuleCall_3_1_0; }

		//colon=Colon
		public Assignment getColonAssignment_4() { return cColonAssignment_4; }

		//Colon
		public RuleCall getColonColonParserRuleCall_4_0() { return cColonColonParserRuleCall_4_0; }

		//"disj"?
		public Keyword getDisjKeyword_5() { return cDisjKeyword_5; }

		//expr=Expression
		public Assignment getExprAssignment_6() { return cExprAssignment_6; }

		//Expression
		public RuleCall getExprExpressionParserRuleCall_6_0() { return cExprExpressionParserRuleCall_6_0; }
	}

	public class ParamElements extends AbstractParserRuleElementFinder {
		private final ParserRule rule = (ParserRule) GrammarUtil.findRuleForName(getGrammar(), "Param");
		private final Group cGroup = (Group)rule.eContents().get(1);
		private final Keyword cPrivateKeyword_0 = (Keyword)cGroup.eContents().get(0);
		private final Keyword cDisjKeyword_1 = (Keyword)cGroup.eContents().get(1);
		private final Assignment cPropertyNameAssignment_2 = (Assignment)cGroup.eContents().get(2);
		private final RuleCall cPropertyNamePropertyNameParserRuleCall_2_0 = (RuleCall)cPropertyNameAssignment_2.eContents().get(0);
		private final Group cGroup_3 = (Group)cGroup.eContents().get(3);
		private final Assignment cCommaAssignment_3_0 = (Assignment)cGroup_3.eContents().get(0);
		private final RuleCall cCommaCommaParserRuleCall_3_0_0 = (RuleCall)cCommaAssignment_3_0.eContents().get(0);
		private final Assignment cPropertyNameAssignment_3_1 = (Assignment)cGroup_3.eContents().get(1);
		private final RuleCall cPropertyNamePropertyNameParserRuleCall_3_1_0 = (RuleCall)cPropertyNameAssignment_3_1.eContents().get(0);
		private final Assignment cColonAssignment_4 = (Assignment)cGroup.eContents().get(4);
		private final RuleCall cColonColonParserRuleCall_4_0 = (RuleCall)cColonAssignment_4.eContents().get(0);
		private final Keyword cDisjKeyword_5 = (Keyword)cGroup.eContents().get(5);
		private final Assignment cExprAssignment_6 = (Assignment)cGroup.eContents().get(6);
		private final RuleCall cExprExpressionParserRuleCall_6_0 = (RuleCall)cExprAssignment_6.eContents().get(0);
		
		/// *
		//	param ::= ["private"] ["disj"] name,+ ":" ["disj"] expr
		// * / Param:
		//	"private"? "disj"? propertyName+=PropertyName (comma+=Comma propertyName+=PropertyName)* colon=Colon "disj"?
		//	expr=Expression;
		public ParserRule getRule() { return rule; }

		//"private"? "disj"? propertyName+=PropertyName (comma+=Comma propertyName+=PropertyName)* colon=Colon "disj"?
		//expr=Expression
		public Group getGroup() { return cGroup; }

		//"private"?
		public Keyword getPrivateKeyword_0() { return cPrivateKeyword_0; }

		//"disj"?
		public Keyword getDisjKeyword_1() { return cDisjKeyword_1; }

		//propertyName+=PropertyName
		public Assignment getPropertyNameAssignment_2() { return cPropertyNameAssignment_2; }

		//PropertyName
		public RuleCall getPropertyNamePropertyNameParserRuleCall_2_0() { return cPropertyNamePropertyNameParserRuleCall_2_0; }

		//(comma+=Comma propertyName+=PropertyName)*
		public Group getGroup_3() { return cGroup_3; }

		//comma+=Comma
		public Assignment getCommaAssignment_3_0() { return cCommaAssignment_3_0; }

		//Comma
		public RuleCall getCommaCommaParserRuleCall_3_0_0() { return cCommaCommaParserRuleCall_3_0_0; }

		//propertyName+=PropertyName
		public Assignment getPropertyNameAssignment_3_1() { return cPropertyNameAssignment_3_1; }

		//PropertyName
		public RuleCall getPropertyNamePropertyNameParserRuleCall_3_1_0() { return cPropertyNamePropertyNameParserRuleCall_3_1_0; }

		//colon=Colon
		public Assignment getColonAssignment_4() { return cColonAssignment_4; }

		//Colon
		public RuleCall getColonColonParserRuleCall_4_0() { return cColonColonParserRuleCall_4_0; }

		//"disj"?
		public Keyword getDisjKeyword_5() { return cDisjKeyword_5; }

		//expr=Expression
		public Assignment getExprAssignment_6() { return cExprAssignment_6; }

		//Expression
		public RuleCall getExprExpressionParserRuleCall_6_0() { return cExprExpressionParserRuleCall_6_0; }
	}

	public class ParanthesisandExpressionElements extends AbstractParserRuleElementFinder {
		private final ParserRule rule = (ParserRule) GrammarUtil.findRuleForName(getGrammar(), "ParanthesisandExpression");
		private final Group cGroup = (Group)rule.eContents().get(1);
		private final Keyword cLeftParenthesisKeyword_0 = (Keyword)cGroup.eContents().get(0);
		private final Assignment cExprAssignment_1 = (Assignment)cGroup.eContents().get(1);
		private final RuleCall cExprExpressionParserRuleCall_1_0 = (RuleCall)cExprAssignment_1.eContents().get(0);
		private final Keyword cRightParenthesisKeyword_2 = (Keyword)cGroup.eContents().get(2);
		
		//ParanthesisandExpression:
		//	"(" expr+=Expression ")";
		public ParserRule getRule() { return rule; }

		//"(" expr+=Expression ")"
		public Group getGroup() { return cGroup; }

		//"("
		public Keyword getLeftParenthesisKeyword_0() { return cLeftParenthesisKeyword_0; }

		//expr+=Expression
		public Assignment getExprAssignment_1() { return cExprAssignment_1; }

		//Expression
		public RuleCall getExprExpressionParserRuleCall_1_0() { return cExprExpressionParserRuleCall_1_0; }

		//")"
		public Keyword getRightParenthesisKeyword_2() { return cRightParenthesisKeyword_2; }
	}

	public class QuantElements extends AbstractParserRuleElementFinder {
		private final ParserRule rule = (ParserRule) GrammarUtil.findRuleForName(getGrammar(), "Quant");
		private final Alternatives cAlternatives = (Alternatives)rule.eContents().get(1);
		private final Keyword cAllKeyword_0 = (Keyword)cAlternatives.eContents().get(0);
		private final Keyword cSumKeyword_1 = (Keyword)cAlternatives.eContents().get(1);
		
		/// *
		//	quant ::= "all" | "sum"
		// * / Quant:
		//	"all" | "sum";
		public ParserRule getRule() { return rule; }

		//"all" | "sum"
		public Alternatives getAlternatives() { return cAlternatives; }

		//"all"
		public Keyword getAllKeyword_0() { return cAllKeyword_0; }

		//"sum"
		public Keyword getSumKeyword_1() { return cSumKeyword_1; }
	}

	public class BinOpElements extends AbstractParserRuleElementFinder {
		private final ParserRule rule = (ParserRule) GrammarUtil.findRuleForName(getGrammar(), "BinOp");
		private final Group cGroup = (Group)rule.eContents().get(1);
		private final Action cBinOpAction_0 = (Action)cGroup.eContents().get(0);
		private final Alternatives cAlternatives_1 = (Alternatives)cGroup.eContents().get(1);
		private final Keyword cVerticalLineVerticalLineKeyword_1_0 = (Keyword)cAlternatives_1.eContents().get(0);
		private final Keyword cOrKeyword_1_1 = (Keyword)cAlternatives_1.eContents().get(1);
		private final Keyword cAmpersandAmpersandKeyword_1_2 = (Keyword)cAlternatives_1.eContents().get(2);
		private final Keyword cAndKeyword_1_3 = (Keyword)cAlternatives_1.eContents().get(3);
		private final Keyword cAmpersandKeyword_1_4 = (Keyword)cAlternatives_1.eContents().get(4);
		private final Keyword cLessThanSignEqualsSignGreaterThanSignKeyword_1_5 = (Keyword)cAlternatives_1.eContents().get(5);
		private final Keyword cIffKeyword_1_6 = (Keyword)cAlternatives_1.eContents().get(6);
		private final Keyword cPlusSignKeyword_1_7 = (Keyword)cAlternatives_1.eContents().get(7);
		private final Keyword cHyphenMinusKeyword_1_8 = (Keyword)cAlternatives_1.eContents().get(8);
		private final Keyword cPlusSignPlusSignKeyword_1_9 = (Keyword)cAlternatives_1.eContents().get(9);
		private final Keyword cLessThanSignColonKeyword_1_10 = (Keyword)cAlternatives_1.eContents().get(10);
		private final Keyword cColonGreaterThanSignKeyword_1_11 = (Keyword)cAlternatives_1.eContents().get(11);
		private final Assignment cDotAssignment_1_12 = (Assignment)cAlternatives_1.eContents().get(12);
		private final RuleCall cDotDotParserRuleCall_1_12_0 = (RuleCall)cDotAssignment_1_12.eContents().get(0);
		private final Keyword cLessThanSignLessThanSignKeyword_1_13 = (Keyword)cAlternatives_1.eContents().get(13);
		private final Keyword cGreaterThanSignGreaterThanSignKeyword_1_14 = (Keyword)cAlternatives_1.eContents().get(14);
		private final Keyword cGreaterThanSignGreaterThanSignGreaterThanSignKeyword_1_15 = (Keyword)cAlternatives_1.eContents().get(15);
		
		/// *	
		//	binOp ::= "||" | "or" | "&&" | "and" | "&" | "<=>" | "iff"| "=>" | "implies" | "+" | "-" | "++" | "<:" | ":>" | "." | "<<" | ">>" | ">>>"
		// * / BinOp:
		//	{BinOp} ("||" | "or" | "&&" | "and" | "&" | "<=>" | "iff" | "+" | "-" | "++" | "<:" | ":>" | dot=Dot | "<<" | ">>" |
		//	">>>");
		public ParserRule getRule() { return rule; }

		//{BinOp} ("||" | "or" | "&&" | "and" | "&" | "<=>" | "iff" | "+" | "-" | "++" | "<:" | ":>" | dot=Dot | "<<" | ">>" |
		//">>>")
		public Group getGroup() { return cGroup; }

		//{BinOp}
		public Action getBinOpAction_0() { return cBinOpAction_0; }

		//"||" | "or" | "&&" | "and" | "&" | "<=>" | "iff" | "+" | "-" | "++" | "<:" | ":>" | dot=Dot | "<<" | ">>" | ">>>"
		public Alternatives getAlternatives_1() { return cAlternatives_1; }

		//"||"
		public Keyword getVerticalLineVerticalLineKeyword_1_0() { return cVerticalLineVerticalLineKeyword_1_0; }

		//"or"
		public Keyword getOrKeyword_1_1() { return cOrKeyword_1_1; }

		//"&&"
		public Keyword getAmpersandAmpersandKeyword_1_2() { return cAmpersandAmpersandKeyword_1_2; }

		//"and"
		public Keyword getAndKeyword_1_3() { return cAndKeyword_1_3; }

		//"&"
		public Keyword getAmpersandKeyword_1_4() { return cAmpersandKeyword_1_4; }

		//"<=>"
		public Keyword getLessThanSignEqualsSignGreaterThanSignKeyword_1_5() { return cLessThanSignEqualsSignGreaterThanSignKeyword_1_5; }

		//"iff"
		public Keyword getIffKeyword_1_6() { return cIffKeyword_1_6; }

		//"+"
		public Keyword getPlusSignKeyword_1_7() { return cPlusSignKeyword_1_7; }

		//"-"
		public Keyword getHyphenMinusKeyword_1_8() { return cHyphenMinusKeyword_1_8; }

		//"++"
		public Keyword getPlusSignPlusSignKeyword_1_9() { return cPlusSignPlusSignKeyword_1_9; }

		//"<:"
		public Keyword getLessThanSignColonKeyword_1_10() { return cLessThanSignColonKeyword_1_10; }

		//":>"
		public Keyword getColonGreaterThanSignKeyword_1_11() { return cColonGreaterThanSignKeyword_1_11; }

		//dot=Dot
		public Assignment getDotAssignment_1_12() { return cDotAssignment_1_12; }

		//Dot
		public RuleCall getDotDotParserRuleCall_1_12_0() { return cDotDotParserRuleCall_1_12_0; }

		//"<<"
		public Keyword getLessThanSignLessThanSignKeyword_1_13() { return cLessThanSignLessThanSignKeyword_1_13; }

		//">>"
		public Keyword getGreaterThanSignGreaterThanSignKeyword_1_14() { return cGreaterThanSignGreaterThanSignKeyword_1_14; }

		//">>>"
		public Keyword getGreaterThanSignGreaterThanSignGreaterThanSignKeyword_1_15() { return cGreaterThanSignGreaterThanSignGreaterThanSignKeyword_1_15; }
	}

	public class UnOpElements extends AbstractParserRuleElementFinder {
		private final ParserRule rule = (ParserRule) GrammarUtil.findRuleForName(getGrammar(), "UnOp");
		private final Group cGroup = (Group)rule.eContents().get(1);
		private final Action cUnOpAction_0 = (Action)cGroup.eContents().get(0);
		private final Alternatives cAlternatives_1 = (Alternatives)cGroup.eContents().get(1);
		private final Keyword cNotKeyword_1_0 = (Keyword)cAlternatives_1.eContents().get(0);
		private final Keyword cSetKeyword_1_1 = (Keyword)cAlternatives_1.eContents().get(1);
		private final Keyword cSeqKeyword_1_2 = (Keyword)cAlternatives_1.eContents().get(2);
		private final Assignment cOpAssignment_1_3 = (Assignment)cAlternatives_1.eContents().get(3);
		private final Alternatives cOpAlternatives_1_3_0 = (Alternatives)cOpAssignment_1_3.eContents().get(0);
		private final Keyword cOpExclamationMarkKeyword_1_3_0_0 = (Keyword)cOpAlternatives_1_3_0.eContents().get(0);
		private final Keyword cOpNumberSignKeyword_1_3_0_1 = (Keyword)cOpAlternatives_1_3_0.eContents().get(1);
		private final Keyword cOpTildeKeyword_1_3_0_2 = (Keyword)cOpAlternatives_1_3_0.eContents().get(2);
		private final Keyword cOpAsteriskKeyword_1_3_0_3 = (Keyword)cOpAlternatives_1_3_0.eContents().get(3);
		private final Keyword cOpCircumflexAccentKeyword_1_3_0_4 = (Keyword)cOpAlternatives_1_3_0.eContents().get(4);
		
		/// *
		//	unOp ::= "!" | "not" | "set" | "seq" | "#" | "~" | "*" | "^"
		// * / UnOp:
		//	{UnOp} ("not" | "set" | "seq" | op=("!" | "#" | "~" | "*" | "^"));
		public ParserRule getRule() { return rule; }

		//{UnOp} ("not" | "set" | "seq" | op=("!" | "#" | "~" | "*" | "^"))
		public Group getGroup() { return cGroup; }

		//{UnOp}
		public Action getUnOpAction_0() { return cUnOpAction_0; }

		//"not" | "set" | "seq" | op=("!" | "#" | "~" | "*" | "^")
		public Alternatives getAlternatives_1() { return cAlternatives_1; }

		//"not"
		public Keyword getNotKeyword_1_0() { return cNotKeyword_1_0; }

		//"set"
		public Keyword getSetKeyword_1_1() { return cSetKeyword_1_1; }

		//"seq"
		public Keyword getSeqKeyword_1_2() { return cSeqKeyword_1_2; }

		//op=("!" | "#" | "~" | "*" | "^")
		public Assignment getOpAssignment_1_3() { return cOpAssignment_1_3; }

		//"!" | "#" | "~" | "*" | "^"
		public Alternatives getOpAlternatives_1_3_0() { return cOpAlternatives_1_3_0; }

		//"!"
		public Keyword getOpExclamationMarkKeyword_1_3_0_0() { return cOpExclamationMarkKeyword_1_3_0_0; }

		//"#"
		public Keyword getOpNumberSignKeyword_1_3_0_1() { return cOpNumberSignKeyword_1_3_0_1; }

		//"~"
		public Keyword getOpTildeKeyword_1_3_0_2() { return cOpTildeKeyword_1_3_0_2; }

		//"*"
		public Keyword getOpAsteriskKeyword_1_3_0_3() { return cOpAsteriskKeyword_1_3_0_3; }

		//"^"
		public Keyword getOpCircumflexAccentKeyword_1_3_0_4() { return cOpCircumflexAccentKeyword_1_3_0_4; }
	}

	public class CommonQuantUnOpElements extends AbstractParserRuleElementFinder {
		private final ParserRule rule = (ParserRule) GrammarUtil.findRuleForName(getGrammar(), "CommonQuantUnOp");
		private final Group cGroup = (Group)rule.eContents().get(1);
		private final Action cCommonQuantUnOpAction_0 = (Action)cGroup.eContents().get(0);
		private final Alternatives cAlternatives_1 = (Alternatives)cGroup.eContents().get(1);
		private final Keyword cNoKeyword_1_0 = (Keyword)cAlternatives_1.eContents().get(0);
		private final Keyword cSomeKeyword_1_1 = (Keyword)cAlternatives_1.eContents().get(1);
		private final Keyword cLoneKeyword_1_2 = (Keyword)cAlternatives_1.eContents().get(2);
		private final Keyword cOneKeyword_1_3 = (Keyword)cAlternatives_1.eContents().get(3);
		
		/// *
		//	CommonQuantUnOp ::= "no" | "some" | "lone" | "one"
		// * / CommonQuantUnOp:
		//	{CommonQuantUnOp} ("no" | "some" | "lone" | "one");
		public ParserRule getRule() { return rule; }

		//{CommonQuantUnOp} ("no" | "some" | "lone" | "one")
		public Group getGroup() { return cGroup; }

		//{CommonQuantUnOp}
		public Action getCommonQuantUnOpAction_0() { return cCommonQuantUnOpAction_0; }

		//"no" | "some" | "lone" | "one"
		public Alternatives getAlternatives_1() { return cAlternatives_1; }

		//"no"
		public Keyword getNoKeyword_1_0() { return cNoKeyword_1_0; }

		//"some"
		public Keyword getSomeKeyword_1_1() { return cSomeKeyword_1_1; }

		//"lone"
		public Keyword getLoneKeyword_1_2() { return cLoneKeyword_1_2; }

		//"one"
		public Keyword getOneKeyword_1_3() { return cOneKeyword_1_3; }
	}

	public class CompareOpElements extends AbstractParserRuleElementFinder {
		private final ParserRule rule = (ParserRule) GrammarUtil.findRuleForName(getGrammar(), "CompareOp");
		private final Alternatives cAlternatives = (Alternatives)rule.eContents().get(1);
		private final Keyword cEqualsSignKeyword_0 = (Keyword)cAlternatives.eContents().get(0);
		private final Keyword cInKeyword_1 = (Keyword)cAlternatives.eContents().get(1);
		private final Keyword cLessThanSignKeyword_2 = (Keyword)cAlternatives.eContents().get(2);
		private final Keyword cGreaterThanSignKeyword_3 = (Keyword)cAlternatives.eContents().get(3);
		private final Keyword cEqualsSignLessThanSignKeyword_4 = (Keyword)cAlternatives.eContents().get(4);
		private final Keyword cLessThanSignEqualsSignKeyword_5 = (Keyword)cAlternatives.eContents().get(5);
		private final Keyword cGreaterThanSignEqualsSignKeyword_6 = (Keyword)cAlternatives.eContents().get(6);
		
		/// *
		//	compareOp ::= "=" | "in" | "<" | ">" | "=<" | ">="
		// * / CompareOp:
		//	"=" / * UNDOCUMENTED * / | "in" | "<" | ">" | "=<" | "<=" | ">=";
		public ParserRule getRule() { return rule; }

		//"=" / * UNDOCUMENTED * / | "in" | "<" | ">" | "=<" | "<=" | ">="
		public Alternatives getAlternatives() { return cAlternatives; }

		//"="
		public Keyword getEqualsSignKeyword_0() { return cEqualsSignKeyword_0; }

		//"in"
		public Keyword getInKeyword_1() { return cInKeyword_1; }

		//"<"
		public Keyword getLessThanSignKeyword_2() { return cLessThanSignKeyword_2; }

		//">"
		public Keyword getGreaterThanSignKeyword_3() { return cGreaterThanSignKeyword_3; }

		//"=<"
		public Keyword getEqualsSignLessThanSignKeyword_4() { return cEqualsSignLessThanSignKeyword_4; }

		//"<="
		public Keyword getLessThanSignEqualsSignKeyword_5() { return cLessThanSignEqualsSignKeyword_5; }

		//">="
		public Keyword getGreaterThanSignEqualsSignKeyword_6() { return cGreaterThanSignEqualsSignKeyword_6; }
	}

	public class ArrowOpElements extends AbstractParserRuleElementFinder {
		private final ParserRule rule = (ParserRule) GrammarUtil.findRuleForName(getGrammar(), "ArrowOp");
		private final Group cGroup = (Group)rule.eContents().get(1);
		private final Alternatives cAlternatives_0 = (Alternatives)cGroup.eContents().get(0);
		private final Keyword cSomeKeyword_0_0 = (Keyword)cAlternatives_0.eContents().get(0);
		private final Keyword cOneKeyword_0_1 = (Keyword)cAlternatives_0.eContents().get(1);
		private final Keyword cLoneKeyword_0_2 = (Keyword)cAlternatives_0.eContents().get(2);
		private final Keyword cSetKeyword_0_3 = (Keyword)cAlternatives_0.eContents().get(3);
		private final Assignment cArrowAssignment_1 = (Assignment)cGroup.eContents().get(1);
		private final Keyword cArrowHyphenMinusGreaterThanSignKeyword_1_0 = (Keyword)cArrowAssignment_1.eContents().get(0);
		
		/// *
		//	arrowOp ::= ["some"|"one"|"lone"|"set"]? "->" ["some"|"one"|"lone"|"set"]? 
		// * / ArrowOp:
		//	("some" | "one" | "lone" | "set")? arrow="->";
		public ParserRule getRule() { return rule; }

		//("some" | "one" | "lone" | "set")? arrow="->"
		public Group getGroup() { return cGroup; }

		//("some" | "one" | "lone" | "set")?
		public Alternatives getAlternatives_0() { return cAlternatives_0; }

		//"some"
		public Keyword getSomeKeyword_0_0() { return cSomeKeyword_0_0; }

		//"one"
		public Keyword getOneKeyword_0_1() { return cOneKeyword_0_1; }

		//"lone"
		public Keyword getLoneKeyword_0_2() { return cLoneKeyword_0_2; }

		//"set"
		public Keyword getSetKeyword_0_3() { return cSetKeyword_0_3; }

		//arrow="->"
		public Assignment getArrowAssignment_1() { return cArrowAssignment_1; }

		//"->"
		public Keyword getArrowHyphenMinusGreaterThanSignKeyword_1_0() { return cArrowHyphenMinusGreaterThanSignKeyword_1_0; }
	}

	public class LetDeclElements extends AbstractParserRuleElementFinder {
		private final ParserRule rule = (ParserRule) GrammarUtil.findRuleForName(getGrammar(), "LetDecl");
		private final Group cGroup = (Group)rule.eContents().get(1);
		private final Assignment cNameExpressionAssignment_0 = (Assignment)cGroup.eContents().get(0);
		private final RuleCall cNameExpressionPropertyNameParserRuleCall_0_0 = (RuleCall)cNameExpressionAssignment_0.eContents().get(0);
		private final Keyword cEqualsSignKeyword_1 = (Keyword)cGroup.eContents().get(1);
		private final Assignment cExprAssignment_2 = (Assignment)cGroup.eContents().get(2);
		private final RuleCall cExprExpressionParserRuleCall_2_0 = (RuleCall)cExprAssignment_2.eContents().get(0);
		
		/// *
		//	letDecl ::= name "=" expr
		// * / LetDecl:
		//	nameExpression=PropertyName "=" expr=Expression;
		public ParserRule getRule() { return rule; }

		//nameExpression=PropertyName "=" expr=Expression
		public Group getGroup() { return cGroup; }

		//nameExpression=PropertyName
		public Assignment getNameExpressionAssignment_0() { return cNameExpressionAssignment_0; }

		//PropertyName
		public RuleCall getNameExpressionPropertyNameParserRuleCall_0_0() { return cNameExpressionPropertyNameParserRuleCall_0_0; }

		//"="
		public Keyword getEqualsSignKeyword_1() { return cEqualsSignKeyword_1; }

		//expr=Expression
		public Assignment getExprAssignment_2() { return cExprAssignment_2; }

		//Expression
		public RuleCall getExprExpressionParserRuleCall_2_0() { return cExprExpressionParserRuleCall_2_0; }
	}

	public class BlockOrBarElements extends AbstractParserRuleElementFinder {
		private final ParserRule rule = (ParserRule) GrammarUtil.findRuleForName(getGrammar(), "BlockOrBar");
		private final Alternatives cAlternatives = (Alternatives)rule.eContents().get(1);
		private final Assignment cBlockAssignment_0 = (Assignment)cAlternatives.eContents().get(0);
		private final RuleCall cBlockBlockParserRuleCall_0_0 = (RuleCall)cBlockAssignment_0.eContents().get(0);
		private final Group cGroup_1 = (Group)cAlternatives.eContents().get(1);
		private final Keyword cVerticalLineKeyword_1_0 = (Keyword)cGroup_1.eContents().get(0);
		private final Assignment cExprAssignment_1_1 = (Assignment)cGroup_1.eContents().get(1);
		private final RuleCall cExprExpressionParserRuleCall_1_1_0 = (RuleCall)cExprAssignment_1_1.eContents().get(0);
		
		/// *
		//	blockOrBar ::= block
		//	blockOrBar ::= "|" expr
		// * / BlockOrBar:
		//	block=Block | "|" expr=Expression;
		public ParserRule getRule() { return rule; }

		//block=Block | "|" expr=Expression
		public Alternatives getAlternatives() { return cAlternatives; }

		//block=Block
		public Assignment getBlockAssignment_0() { return cBlockAssignment_0; }

		//Block
		public RuleCall getBlockBlockParserRuleCall_0_0() { return cBlockBlockParserRuleCall_0_0; }

		//"|" expr=Expression
		public Group getGroup_1() { return cGroup_1; }

		//"|"
		public Keyword getVerticalLineKeyword_1_0() { return cVerticalLineKeyword_1_0; }

		//expr=Expression
		public Assignment getExprAssignment_1_1() { return cExprAssignment_1_1; }

		//Expression
		public RuleCall getExprExpressionParserRuleCall_1_1_0() { return cExprExpressionParserRuleCall_1_1_0; }
	}

	public class BlockOrPossibleBarElements extends AbstractParserRuleElementFinder {
		private final ParserRule rule = (ParserRule) GrammarUtil.findRuleForName(getGrammar(), "BlockOrPossibleBar");
		private final Alternatives cAlternatives = (Alternatives)rule.eContents().get(1);
		private final Assignment cBlockAssignment_0 = (Assignment)cAlternatives.eContents().get(0);
		private final RuleCall cBlockBlockParserRuleCall_0_0 = (RuleCall)cBlockAssignment_0.eContents().get(0);
		private final Group cGroup_1 = (Group)cAlternatives.eContents().get(1);
		private final Keyword cVerticalLineKeyword_1_0 = (Keyword)cGroup_1.eContents().get(0);
		private final Assignment cExprAssignment_1_1 = (Assignment)cGroup_1.eContents().get(1);
		private final RuleCall cExprExpressionParserRuleCall_1_1_0 = (RuleCall)cExprAssignment_1_1.eContents().get(0);
		
		//BlockOrPossibleBar:
		//	block=Block | "|"? expr=Expression;
		public ParserRule getRule() { return rule; }

		//block=Block | "|"? expr=Expression
		public Alternatives getAlternatives() { return cAlternatives; }

		//block=Block
		public Assignment getBlockAssignment_0() { return cBlockAssignment_0; }

		//Block
		public RuleCall getBlockBlockParserRuleCall_0_0() { return cBlockBlockParserRuleCall_0_0; }

		//"|"? expr=Expression
		public Group getGroup_1() { return cGroup_1; }

		//"|"?
		public Keyword getVerticalLineKeyword_1_0() { return cVerticalLineKeyword_1_0; }

		//expr=Expression
		public Assignment getExprAssignment_1_1() { return cExprAssignment_1_1; }

		//Expression
		public RuleCall getExprExpressionParserRuleCall_1_1_0() { return cExprExpressionParserRuleCall_1_1_0; }
	}

	public class OpenNameElements extends AbstractParserRuleElementFinder {
		private final ParserRule rule = (ParserRule) GrammarUtil.findRuleForName(getGrammar(), "OpenName");
		private final Group cGroup = (Group)rule.eContents().get(1);
		private final Keyword cOpenKeyword_0 = (Keyword)cGroup.eContents().get(0);
		private final Assignment cImportURIAssignment_1 = (Assignment)cGroup.eContents().get(1);
		private final RuleCall cImportURINameParserRuleCall_1_0 = (RuleCall)cImportURIAssignment_1.eContents().get(0);
		
		/// *
		//	name ::= ["this" | ID] ["/" ID]*
		// * / OpenName:
		//	"open" importURI=Name;
		public ParserRule getRule() { return rule; }

		//"open" importURI=Name
		public Group getGroup() { return cGroup; }

		//"open"
		public Keyword getOpenKeyword_0() { return cOpenKeyword_0; }

		//importURI=Name
		public Assignment getImportURIAssignment_1() { return cImportURIAssignment_1; }

		//Name
		public RuleCall getImportURINameParserRuleCall_1_0() { return cImportURINameParserRuleCall_1_0; }
	}

	public class FactNameElements extends AbstractParserRuleElementFinder {
		private final ParserRule rule = (ParserRule) GrammarUtil.findRuleForName(getGrammar(), "FactName");
		private final Group cGroup = (Group)rule.eContents().get(1);
		private final Action cFactNameAction_0 = (Action)cGroup.eContents().get(0);
		private final Keyword cFactKeyword_1 = (Keyword)cGroup.eContents().get(1);
		private final Assignment cNameAssignment_2 = (Assignment)cGroup.eContents().get(2);
		private final RuleCall cNameNameParserRuleCall_2_0 = (RuleCall)cNameAssignment_2.eContents().get(0);
		
		//FactName:
		//	{FactName} "fact" name=Name?;
		public ParserRule getRule() { return rule; }

		//{FactName} "fact" name=Name?
		public Group getGroup() { return cGroup; }

		//{FactName}
		public Action getFactNameAction_0() { return cFactNameAction_0; }

		//"fact"
		public Keyword getFactKeyword_1() { return cFactKeyword_1; }

		//name=Name?
		public Assignment getNameAssignment_2() { return cNameAssignment_2; }

		//Name
		public RuleCall getNameNameParserRuleCall_2_0() { return cNameNameParserRuleCall_2_0; }
	}

	public class AssertionNameElements extends AbstractParserRuleElementFinder {
		private final ParserRule rule = (ParserRule) GrammarUtil.findRuleForName(getGrammar(), "AssertionName");
		private final Group cGroup = (Group)rule.eContents().get(1);
		private final Action cAssertionNameAction_0 = (Action)cGroup.eContents().get(0);
		private final Keyword cAssertKeyword_1 = (Keyword)cGroup.eContents().get(1);
		private final Assignment cNameAssignment_2 = (Assignment)cGroup.eContents().get(2);
		private final RuleCall cNameNameParserRuleCall_2_0 = (RuleCall)cNameAssignment_2.eContents().get(0);
		
		//AssertionName:
		//	{AssertionName} "assert" name=Name?;
		public ParserRule getRule() { return rule; }

		//{AssertionName} "assert" name=Name?
		public Group getGroup() { return cGroup; }

		//{AssertionName}
		public Action getAssertionNameAction_0() { return cAssertionNameAction_0; }

		//"assert"
		public Keyword getAssertKeyword_1() { return cAssertKeyword_1; }

		//name=Name?
		public Assignment getNameAssignment_2() { return cNameAssignment_2; }

		//Name
		public RuleCall getNameNameParserRuleCall_2_0() { return cNameNameParserRuleCall_2_0; }
	}

	public class FunctionNameElements extends AbstractParserRuleElementFinder {
		private final ParserRule rule = (ParserRule) GrammarUtil.findRuleForName(getGrammar(), "FunctionName");
		private final Assignment cNameAssignment = (Assignment)rule.eContents().get(1);
		private final RuleCall cNameNameParserRuleCall_0 = (RuleCall)cNameAssignment.eContents().get(0);
		
		//FunctionName:
		//	name=Name;
		public ParserRule getRule() { return rule; }

		//name=Name
		public Assignment getNameAssignment() { return cNameAssignment; }

		//Name
		public RuleCall getNameNameParserRuleCall_0() { return cNameNameParserRuleCall_0; }
	}

	public class FunctionNamewParamElements extends AbstractParserRuleElementFinder {
		private final ParserRule rule = (ParserRule) GrammarUtil.findRuleForName(getGrammar(), "FunctionNamewParam");
		private final Assignment cNameAssignment = (Assignment)rule.eContents().get(1);
		private final RuleCall cNameNameParserRuleCall_0 = (RuleCall)cNameAssignment.eContents().get(0);
		
		//FunctionNamewParam:
		//	name=Name;
		public ParserRule getRule() { return rule; }

		//name=Name
		public Assignment getNameAssignment() { return cNameAssignment; }

		//Name
		public RuleCall getNameNameParserRuleCall_0() { return cNameNameParserRuleCall_0; }
	}

	public class PredicateNameElements extends AbstractParserRuleElementFinder {
		private final ParserRule rule = (ParserRule) GrammarUtil.findRuleForName(getGrammar(), "PredicateName");
		private final Assignment cNameAssignment = (Assignment)rule.eContents().get(1);
		private final RuleCall cNameNameParserRuleCall_0 = (RuleCall)cNameAssignment.eContents().get(0);
		
		//PredicateName:
		//	name=Name;
		public ParserRule getRule() { return rule; }

		//name=Name
		public Assignment getNameAssignment() { return cNameAssignment; }

		//Name
		public RuleCall getNameNameParserRuleCall_0() { return cNameNameParserRuleCall_0; }
	}

	public class AliasElements extends AbstractParserRuleElementFinder {
		private final ParserRule rule = (ParserRule) GrammarUtil.findRuleForName(getGrammar(), "Alias");
		private final Assignment cNameAssignment = (Assignment)rule.eContents().get(1);
		private final RuleCall cNameNameAliasParserRuleCall_0 = (RuleCall)cNameAssignment.eContents().get(0);
		
		//Alias:
		//	name=NameAlias;
		public ParserRule getRule() { return rule; }

		//name=NameAlias
		public Assignment getNameAssignment() { return cNameAssignment; }

		//NameAlias
		public RuleCall getNameNameAliasParserRuleCall_0() { return cNameNameAliasParserRuleCall_0; }
	}

	public class EnumNameElements extends AbstractParserRuleElementFinder {
		private final ParserRule rule = (ParserRule) GrammarUtil.findRuleForName(getGrammar(), "EnumName");
		private final Group cGroup = (Group)rule.eContents().get(1);
		private final Keyword cEnumKeyword_0 = (Keyword)cGroup.eContents().get(0);
		private final Assignment cNameAssignment_1 = (Assignment)cGroup.eContents().get(1);
		private final RuleCall cNameNameParserRuleCall_1_0 = (RuleCall)cNameAssignment_1.eContents().get(0);
		
		//EnumName:
		//	"enum" name=Name;
		public ParserRule getRule() { return rule; }

		//"enum" name=Name
		public Group getGroup() { return cGroup; }

		//"enum"
		public Keyword getEnumKeyword_0() { return cEnumKeyword_0; }

		//name=Name
		public Assignment getNameAssignment_1() { return cNameAssignment_1; }

		//Name
		public RuleCall getNameNameParserRuleCall_1_0() { return cNameNameParserRuleCall_1_0; }
	}

	public class EnumPropertyNameElements extends AbstractParserRuleElementFinder {
		private final ParserRule rule = (ParserRule) GrammarUtil.findRuleForName(getGrammar(), "EnumPropertyName");
		private final Assignment cNameAssignment = (Assignment)rule.eContents().get(1);
		private final RuleCall cNameNameParserRuleCall_0 = (RuleCall)cNameAssignment.eContents().get(0);
		
		//EnumPropertyName:
		//	name=Name;
		public ParserRule getRule() { return rule; }

		//name=Name
		public Assignment getNameAssignment() { return cNameAssignment; }

		//Name
		public RuleCall getNameNameParserRuleCall_0() { return cNameNameParserRuleCall_0; }
	}

	public class LetNameElements extends AbstractParserRuleElementFinder {
		private final ParserRule rule = (ParserRule) GrammarUtil.findRuleForName(getGrammar(), "LetName");
		private final Group cGroup = (Group)rule.eContents().get(1);
		private final Keyword cLetKeyword_0 = (Keyword)cGroup.eContents().get(0);
		private final Assignment cNameAssignment_1 = (Assignment)cGroup.eContents().get(1);
		private final RuleCall cNameNameParserRuleCall_1_0 = (RuleCall)cNameAssignment_1.eContents().get(0);
		
		//LetName:
		//	"let" name=Name;
		public ParserRule getRule() { return rule; }

		//"let" name=Name
		public Group getGroup() { return cGroup; }

		//"let"
		public Keyword getLetKeyword_0() { return cLetKeyword_0; }

		//name=Name
		public Assignment getNameAssignment_1() { return cNameAssignment_1; }

		//Name
		public RuleCall getNameNameParserRuleCall_1_0() { return cNameNameParserRuleCall_1_0; }
	}

	public class SignatureNameElements extends AbstractParserRuleElementFinder {
		private final ParserRule rule = (ParserRule) GrammarUtil.findRuleForName(getGrammar(), "SignatureName");
		private final Assignment cNameAssignment = (Assignment)rule.eContents().get(1);
		private final RuleCall cNameNameParserRuleCall_0 = (RuleCall)cNameAssignment.eContents().get(0);
		
		//SignatureName:
		//	name=Name;
		public ParserRule getRule() { return rule; }

		//name=Name
		public Assignment getNameAssignment() { return cNameAssignment; }

		//Name
		public RuleCall getNameNameParserRuleCall_0() { return cNameNameParserRuleCall_0; }
	}

	public class PropertyNameElements extends AbstractParserRuleElementFinder {
		private final ParserRule rule = (ParserRule) GrammarUtil.findRuleForName(getGrammar(), "PropertyName");
		private final Assignment cNameAssignment = (Assignment)rule.eContents().get(1);
		private final RuleCall cNameNameParserRuleCall_0 = (RuleCall)cNameAssignment.eContents().get(0);
		
		//PropertyName:
		//	name=Name;
		public ParserRule getRule() { return rule; }

		//name=Name
		public Assignment getNameAssignment() { return cNameAssignment; }

		//Name
		public RuleCall getNameNameParserRuleCall_0() { return cNameNameParserRuleCall_0; }
	}

	public class ExactlyNameElements extends AbstractParserRuleElementFinder {
		private final ParserRule rule = (ParserRule) GrammarUtil.findRuleForName(getGrammar(), "ExactlyName");
		private final Assignment cNameAssignment = (Assignment)rule.eContents().get(1);
		private final RuleCall cNameNameParserRuleCall_0 = (RuleCall)cNameAssignment.eContents().get(0);
		
		//ExactlyName: //QualifiedName=Name;
		//	name=Name;
		public ParserRule getRule() { return rule; }

		////QualifiedName=Name;
		//name=Name
		public Assignment getNameAssignment() { return cNameAssignment; }

		//Name
		public RuleCall getNameNameParserRuleCall_0() { return cNameNameParserRuleCall_0; }
	}

	public class AsNameElements extends AbstractParserRuleElementFinder {
		private final ParserRule rule = (ParserRule) GrammarUtil.findRuleForName(getGrammar(), "AsName");
		private final Assignment cNameAssignment = (Assignment)rule.eContents().get(1);
		private final RuleCall cNameIDTerminalRuleCall_0 = (RuleCall)cNameAssignment.eContents().get(0);
		
		//AsName:
		//	name=ID;
		public ParserRule getRule() { return rule; }

		//name=ID
		public Assignment getNameAssignment() { return cNameAssignment; }

		//ID
		public RuleCall getNameIDTerminalRuleCall_0() { return cNameIDTerminalRuleCall_0; }
	}

	public class NameAliasElements extends AbstractParserRuleElementFinder {
		private final ParserRule rule = (ParserRule) GrammarUtil.findRuleForName(getGrammar(), "NameAlias");
		private final Group cGroup = (Group)rule.eContents().get(1);
		private final RuleCall cIDTerminalRuleCall_0 = (RuleCall)cGroup.eContents().get(0);
		private final Group cGroup_1 = (Group)cGroup.eContents().get(1);
		private final Keyword cSolidusKeyword_1_0 = (Keyword)cGroup_1.eContents().get(0);
		private final RuleCall cIDTerminalRuleCall_1_1 = (RuleCall)cGroup_1.eContents().get(1);
		
		//NameAlias:
		//	ID ("/" ID)*;
		public ParserRule getRule() { return rule; }

		//ID ("/" ID)*
		public Group getGroup() { return cGroup; }

		//ID
		public RuleCall getIDTerminalRuleCall_0() { return cIDTerminalRuleCall_0; }

		//("/" ID)*
		public Group getGroup_1() { return cGroup_1; }

		//"/"
		public Keyword getSolidusKeyword_1_0() { return cSolidusKeyword_1_0; }

		//ID
		public RuleCall getIDTerminalRuleCall_1_1() { return cIDTerminalRuleCall_1_1; }
	}

	public class NameElements extends AbstractParserRuleElementFinder {
		private final ParserRule rule = (ParserRule) GrammarUtil.findRuleForName(getGrammar(), "Name");
		private final Group cGroup = (Group)rule.eContents().get(1);
		private final Alternatives cAlternatives_0 = (Alternatives)cGroup.eContents().get(0);
		private final Keyword cThisKeyword_0_0 = (Keyword)cAlternatives_0.eContents().get(0);
		private final RuleCall cIDTerminalRuleCall_0_1 = (RuleCall)cAlternatives_0.eContents().get(1);
		private final Group cGroup_1 = (Group)cGroup.eContents().get(1);
		private final Keyword cSolidusKeyword_1_0 = (Keyword)cGroup_1.eContents().get(0);
		private final RuleCall cIDTerminalRuleCall_1_1 = (RuleCall)cGroup_1.eContents().get(1);
		
		//Name:
		//	("this" | ID) ("/" ID)*;
		public ParserRule getRule() { return rule; }

		//("this" | ID) ("/" ID)*
		public Group getGroup() { return cGroup; }

		//"this" | ID
		public Alternatives getAlternatives_0() { return cAlternatives_0; }

		//"this"
		public Keyword getThisKeyword_0_0() { return cThisKeyword_0_0; }

		//ID
		public RuleCall getIDTerminalRuleCall_0_1() { return cIDTerminalRuleCall_0_1; }

		//("/" ID)*
		public Group getGroup_1() { return cGroup_1; }

		//"/"
		public Keyword getSolidusKeyword_1_0() { return cSolidusKeyword_1_0; }

		//ID
		public RuleCall getIDTerminalRuleCall_1_1() { return cIDTerminalRuleCall_1_1; }
	}

	public class ReferencesNameElements extends AbstractParserRuleElementFinder {
		private final ParserRule rule = (ParserRule) GrammarUtil.findRuleForName(getGrammar(), "ReferencesName");
		private final Alternatives cAlternatives = (Alternatives)rule.eContents().get(1);
		private final RuleCall cFactNameParserRuleCall_0 = (RuleCall)cAlternatives.eContents().get(0);
		private final RuleCall cFunctionNameParserRuleCall_1 = (RuleCall)cAlternatives.eContents().get(1);
		private final RuleCall cFunctionNamewParamParserRuleCall_2 = (RuleCall)cAlternatives.eContents().get(2);
		private final RuleCall cEnumNameParserRuleCall_3 = (RuleCall)cAlternatives.eContents().get(3);
		private final RuleCall cEnumPropertyNameParserRuleCall_4 = (RuleCall)cAlternatives.eContents().get(4);
		private final RuleCall cSignatureNameParserRuleCall_5 = (RuleCall)cAlternatives.eContents().get(5);
		private final RuleCall cPropertyNameParserRuleCall_6 = (RuleCall)cAlternatives.eContents().get(6);
		private final RuleCall cExactlyNameParserRuleCall_7 = (RuleCall)cAlternatives.eContents().get(7);
		private final RuleCall cLetNameParserRuleCall_8 = (RuleCall)cAlternatives.eContents().get(8);
		private final RuleCall cPredicateNameParserRuleCall_9 = (RuleCall)cAlternatives.eContents().get(9);
		
		/// *
		//	ref ::= name | "univ" | "Int" | "seq/Int"
		// * / ReferencesName:
		//	FactName | FunctionName | FunctionNamewParam | EnumName | EnumPropertyName | SignatureName | PropertyName |
		//	ExactlyName | LetName | PredicateName;
		public ParserRule getRule() { return rule; }

		//FactName | FunctionName | FunctionNamewParam | EnumName | EnumPropertyName | SignatureName | PropertyName | ExactlyName
		//| LetName | PredicateName
		public Alternatives getAlternatives() { return cAlternatives; }

		//FactName
		public RuleCall getFactNameParserRuleCall_0() { return cFactNameParserRuleCall_0; }

		//FunctionName
		public RuleCall getFunctionNameParserRuleCall_1() { return cFunctionNameParserRuleCall_1; }

		//FunctionNamewParam
		public RuleCall getFunctionNamewParamParserRuleCall_2() { return cFunctionNamewParamParserRuleCall_2; }

		//EnumName
		public RuleCall getEnumNameParserRuleCall_3() { return cEnumNameParserRuleCall_3; }

		//EnumPropertyName
		public RuleCall getEnumPropertyNameParserRuleCall_4() { return cEnumPropertyNameParserRuleCall_4; }

		//SignatureName
		public RuleCall getSignatureNameParserRuleCall_5() { return cSignatureNameParserRuleCall_5; }

		//PropertyName
		public RuleCall getPropertyNameParserRuleCall_6() { return cPropertyNameParserRuleCall_6; }

		//ExactlyName
		public RuleCall getExactlyNameParserRuleCall_7() { return cExactlyNameParserRuleCall_7; }

		//LetName
		public RuleCall getLetNameParserRuleCall_8() { return cLetNameParserRuleCall_8; }

		//PredicateName
		public RuleCall getPredicateNameParserRuleCall_9() { return cPredicateNameParserRuleCall_9; }
	}

	public class RefElements extends AbstractParserRuleElementFinder {
		private final ParserRule rule = (ParserRule) GrammarUtil.findRuleForName(getGrammar(), "Ref");
		private final Group cGroup = (Group)rule.eContents().get(1);
		private final Action cRefAction_0 = (Action)cGroup.eContents().get(0);
		private final Alternatives cAlternatives_1 = (Alternatives)cGroup.eContents().get(1);
		private final Assignment cNameRefAssignment_1_0 = (Assignment)cAlternatives_1.eContents().get(0);
		private final CrossReference cNameRefReferencesNameCrossReference_1_0_0 = (CrossReference)cNameRefAssignment_1_0.eContents().get(0);
		private final RuleCall cNameRefReferencesNameIDTerminalRuleCall_1_0_0_1 = (RuleCall)cNameRefReferencesNameCrossReference_1_0_0.eContents().get(1);
		private final Keyword cUnivKeyword_1_1 = (Keyword)cAlternatives_1.eContents().get(1);
		private final Keyword cIntKeyword_1_2 = (Keyword)cAlternatives_1.eContents().get(2);
		private final Keyword cSeqIntKeyword_1_3 = (Keyword)cAlternatives_1.eContents().get(3);
		
		////A VOIR
		//Ref:
		//	{Ref} (nameRef=[ReferencesName] | "univ" | "Int" | "seq/Int");
		public ParserRule getRule() { return rule; }

		//{Ref} (nameRef=[ReferencesName] | "univ" | "Int" | "seq/Int")
		public Group getGroup() { return cGroup; }

		//{Ref}
		public Action getRefAction_0() { return cRefAction_0; }

		//nameRef=[ReferencesName] | "univ" | "Int" | "seq/Int"
		public Alternatives getAlternatives_1() { return cAlternatives_1; }

		//nameRef=[ReferencesName]
		public Assignment getNameRefAssignment_1_0() { return cNameRefAssignment_1_0; }

		//[ReferencesName]
		public CrossReference getNameRefReferencesNameCrossReference_1_0_0() { return cNameRefReferencesNameCrossReference_1_0_0; }

		//ID
		public RuleCall getNameRefReferencesNameIDTerminalRuleCall_1_0_0_1() { return cNameRefReferencesNameIDTerminalRuleCall_1_0_0_1; }

		//"univ"
		public Keyword getUnivKeyword_1_1() { return cUnivKeyword_1_1; }

		//"Int"
		public Keyword getIntKeyword_1_2() { return cIntKeyword_1_2; }

		//"seq/Int"
		public Keyword getSeqIntKeyword_1_3() { return cSeqIntKeyword_1_3; }
	}

	public class DotElements extends AbstractParserRuleElementFinder {
		private final ParserRule rule = (ParserRule) GrammarUtil.findRuleForName(getGrammar(), "Dot");
		private final Assignment cDotAssignment = (Assignment)rule.eContents().get(1);
		private final Keyword cDotFullStopKeyword_0 = (Keyword)cDotAssignment.eContents().get(0);
		
		//Dot:
		//	dot=".";
		public ParserRule getRule() { return rule; }

		//dot="."
		public Assignment getDotAssignment() { return cDotAssignment; }

		//"."
		public Keyword getDotFullStopKeyword_0() { return cDotFullStopKeyword_0; }
	}

	public class CommaElements extends AbstractParserRuleElementFinder {
		private final ParserRule rule = (ParserRule) GrammarUtil.findRuleForName(getGrammar(), "Comma");
		private final Assignment cCommaAssignment = (Assignment)rule.eContents().get(1);
		private final Keyword cCommaCommaKeyword_0 = (Keyword)cCommaAssignment.eContents().get(0);
		
		//Comma:
		//	comma=",";
		public ParserRule getRule() { return rule; }

		//comma=","
		public Assignment getCommaAssignment() { return cCommaAssignment; }

		//","
		public Keyword getCommaCommaKeyword_0() { return cCommaCommaKeyword_0; }
	}

	public class ColonElements extends AbstractParserRuleElementFinder {
		private final ParserRule rule = (ParserRule) GrammarUtil.findRuleForName(getGrammar(), "Colon");
		private final Assignment cColonAssignment = (Assignment)rule.eContents().get(1);
		private final Keyword cColonColonKeyword_0 = (Keyword)cColonAssignment.eContents().get(0);
		
		//Colon:
		//	colon=":";
		public ParserRule getRule() { return rule; }

		//colon=":"
		public Assignment getColonAssignment() { return cColonAssignment; }

		//":"
		public Keyword getColonColonKeyword_0() { return cColonColonKeyword_0; }
	}

	public class LeftCurlyBracketElements extends AbstractParserRuleElementFinder {
		private final ParserRule rule = (ParserRule) GrammarUtil.findRuleForName(getGrammar(), "LeftCurlyBracket");
		private final Assignment cLeftCurlyBracketAssignment = (Assignment)rule.eContents().get(1);
		private final Keyword cLeftCurlyBracketLeftCurlyBracketKeyword_0 = (Keyword)cLeftCurlyBracketAssignment.eContents().get(0);
		
		//LeftCurlyBracket:
		//	leftCurlyBracket="{";
		public ParserRule getRule() { return rule; }

		//leftCurlyBracket="{"
		public Assignment getLeftCurlyBracketAssignment() { return cLeftCurlyBracketAssignment; }

		//"{"
		public Keyword getLeftCurlyBracketLeftCurlyBracketKeyword_0() { return cLeftCurlyBracketLeftCurlyBracketKeyword_0; }
	}

	public class RightCurlyBracketElements extends AbstractParserRuleElementFinder {
		private final ParserRule rule = (ParserRule) GrammarUtil.findRuleForName(getGrammar(), "RightCurlyBracket");
		private final Assignment cRightCurlyBracketAssignment = (Assignment)rule.eContents().get(1);
		private final Keyword cRightCurlyBracketRightCurlyBracketKeyword_0 = (Keyword)cRightCurlyBracketAssignment.eContents().get(0);
		
		//RightCurlyBracket:
		//	rightCurlyBracket="}";
		public ParserRule getRule() { return rule; }

		//rightCurlyBracket="}"
		public Assignment getRightCurlyBracketAssignment() { return cRightCurlyBracketAssignment; }

		//"}"
		public Keyword getRightCurlyBracketRightCurlyBracketKeyword_0() { return cRightCurlyBracketRightCurlyBracketKeyword_0; }
	}

	public class LeftParenthesisElements extends AbstractParserRuleElementFinder {
		private final ParserRule rule = (ParserRule) GrammarUtil.findRuleForName(getGrammar(), "LeftParenthesis");
		private final Assignment cLeftParenthesisAssignment = (Assignment)rule.eContents().get(1);
		private final Keyword cLeftParenthesisLeftParenthesisKeyword_0 = (Keyword)cLeftParenthesisAssignment.eContents().get(0);
		
		//LeftParenthesis:
		//	leftParenthesis="(";
		public ParserRule getRule() { return rule; }

		//leftParenthesis="("
		public Assignment getLeftParenthesisAssignment() { return cLeftParenthesisAssignment; }

		//"("
		public Keyword getLeftParenthesisLeftParenthesisKeyword_0() { return cLeftParenthesisLeftParenthesisKeyword_0; }
	}

	public class RightParenthesisElements extends AbstractParserRuleElementFinder {
		private final ParserRule rule = (ParserRule) GrammarUtil.findRuleForName(getGrammar(), "RightParenthesis");
		private final Assignment cRightParenthesisAssignment = (Assignment)rule.eContents().get(1);
		private final Keyword cRightParenthesisRightParenthesisKeyword_0 = (Keyword)cRightParenthesisAssignment.eContents().get(0);
		
		//RightParenthesis:
		//	rightParenthesis=")";
		public ParserRule getRule() { return rule; }

		//rightParenthesis=")"
		public Assignment getRightParenthesisAssignment() { return cRightParenthesisAssignment; }

		//")"
		public Keyword getRightParenthesisRightParenthesisKeyword_0() { return cRightParenthesisRightParenthesisKeyword_0; }
	}

	public class LeftSquareBracketKeywordElements extends AbstractParserRuleElementFinder {
		private final ParserRule rule = (ParserRule) GrammarUtil.findRuleForName(getGrammar(), "LeftSquareBracketKeyword");
		private final Assignment cLeftSquareBracketKeywordAssignment = (Assignment)rule.eContents().get(1);
		private final Keyword cLeftSquareBracketKeywordLeftSquareBracketKeyword_0 = (Keyword)cLeftSquareBracketKeywordAssignment.eContents().get(0);
		
		//LeftSquareBracketKeyword:
		//	leftSquareBracketKeyword="[";
		public ParserRule getRule() { return rule; }

		//leftSquareBracketKeyword="["
		public Assignment getLeftSquareBracketKeywordAssignment() { return cLeftSquareBracketKeywordAssignment; }

		//"["
		public Keyword getLeftSquareBracketKeywordLeftSquareBracketKeyword_0() { return cLeftSquareBracketKeywordLeftSquareBracketKeyword_0; }
	}

	public class RightSquareBracketKeywordElements extends AbstractParserRuleElementFinder {
		private final ParserRule rule = (ParserRule) GrammarUtil.findRuleForName(getGrammar(), "RightSquareBracketKeyword");
		private final Assignment cRightSquareBracketKeywordAssignment = (Assignment)rule.eContents().get(1);
		private final Keyword cRightSquareBracketKeywordRightSquareBracketKeyword_0 = (Keyword)cRightSquareBracketKeywordAssignment.eContents().get(0);
		
		//RightSquareBracketKeyword:
		//	rightSquareBracketKeyword="]";
		public ParserRule getRule() { return rule; }

		//rightSquareBracketKeyword="]"
		public Assignment getRightSquareBracketKeywordAssignment() { return cRightSquareBracketKeywordAssignment; }

		//"]"
		public Keyword getRightSquareBracketKeywordRightSquareBracketKeyword_0() { return cRightSquareBracketKeywordRightSquareBracketKeyword_0; }
	}
	
	
	private SpecificationElements pSpecification;
	private ModuleElements pModule;
	private OpenElements pOpen;
	private ParagraphElements pParagraph;
	private EnumDeclElements pEnumDecl;
	private FactDeclElements pFactDecl;
	private FunDeclElements pFunDecl;
	private FunDeclWParamElements pFunDeclWParam;
	private LetOutDeclElements pLetOutDecl;
	private PredDeclElements pPredDecl;
	private SigDeclElements pSigDecl;
	private AssertDeclElements pAssertDecl;
	private RunDeclElements pRunDecl;
	private CheckDeclElements pCheckDecl;
	private ScopeElements pScope;
	private ExpectationElements pExpectation;
	private TypescopeElements pTypescope;
	private SigQualElements pSigQual;
	private SigExtElements pSigExt;
	private ReferencesSigElements pReferencesSig;
	private ExpressionElements pExpression;
	private TerminalExpressionElements pTerminalExpression;
	private BlockElements pBlock;
	private DeclElements pDecl;
	private ParamElements pParam;
	private ParanthesisandExpressionElements pParanthesisandExpression;
	private QuantElements pQuant;
	private BinOpElements pBinOp;
	private UnOpElements pUnOp;
	private CommonQuantUnOpElements pCommonQuantUnOp;
	private CompareOpElements pCompareOp;
	private ArrowOpElements pArrowOp;
	private LetDeclElements pLetDecl;
	private BlockOrBarElements pBlockOrBar;
	private BlockOrPossibleBarElements pBlockOrPossibleBar;
	private OpenNameElements pOpenName;
	private FactNameElements pFactName;
	private AssertionNameElements pAssertionName;
	private FunctionNameElements pFunctionName;
	private FunctionNamewParamElements pFunctionNamewParam;
	private PredicateNameElements pPredicateName;
	private AliasElements pAlias;
	private EnumNameElements pEnumName;
	private EnumPropertyNameElements pEnumPropertyName;
	private LetNameElements pLetName;
	private SignatureNameElements pSignatureName;
	private PropertyNameElements pPropertyName;
	private ExactlyNameElements pExactlyName;
	private AsNameElements pAsName;
	private NameAliasElements pNameAlias;
	private NameElements pName;
	private ReferencesNameElements pReferencesName;
	private RefElements pRef;
	private DotElements pDot;
	private CommaElements pComma;
	private ColonElements pColon;
	private LeftCurlyBracketElements pLeftCurlyBracket;
	private RightCurlyBracketElements pRightCurlyBracket;
	private LeftParenthesisElements pLeftParenthesis;
	private RightParenthesisElements pRightParenthesis;
	private LeftSquareBracketKeywordElements pLeftSquareBracketKeyword;
	private RightSquareBracketKeywordElements pRightSquareBracketKeyword;
	private TerminalRule tNEGATIVE_INTEGER;
	private TerminalRule tDOC_COMMENT;
	private TerminalRule tML_COMMENT;
	private TerminalRule tSL_COMMENT;
	private TerminalRule tWS;
	private TerminalRule tID;
	private TerminalRule tINT;
	private TerminalRule tSTRING;
	private TerminalRule tANY_OTHER;
	
	private final GrammarProvider grammarProvider;

	@Inject
	public AlsGrammarAccess(GrammarProvider grammarProvider) {
		this.grammarProvider = grammarProvider;
	}
	
	public Grammar getGrammar() {	
		return grammarProvider.getGrammar(this);
	}
	

	
	/// *
	//	specification ::= [module] open* paragraph*
	// * / Specification:
	//	module=Module? open+=Open* paragraph+=Paragraph*;
	public SpecificationElements getSpecificationAccess() {
		return (pSpecification != null) ? pSpecification : (pSpecification = new SpecificationElements());
	}
	
	public ParserRule getSpecificationRule() {
		return getSpecificationAccess().getRule();
	}

	/// *
	//	module ::= "module" name  [ "["  ["exactly"] name  ("," ["exactly"] num)*    "]" ]
	// * / Module:
	//	"module" moduleName=Name (left=LeftSquareBracketKeyword exactly+="exactly"? name+=ExactlyName (comma+=Comma
	//	(exactly+="exactly"? number+=INT | name+=ExactlyName))* right=RightSquareBracketKeyword)?;
	public ModuleElements getModuleAccess() {
		return (pModule != null) ? pModule : (pModule = new ModuleElements());
	}
	
	public ParserRule getModuleRule() {
		return getModuleAccess().getRule();
	}

	/// *
	//	open ::= ["private"]  "open"  name  [ "[" ref,+ "]" ]  [ "as" name ]
	// * / Open:
	//	"private"? openName=OpenName (left= / *ref+=Ref (comma+=Comma ref+=Ref)** / LeftSquareBracketKeyword
	//	(previousNameAs=AsName "/")? refname=[SignatureName] right=RightSquareBracketKeyword)? ("as" nameAs=AsName)?;
	public OpenElements getOpenAccess() {
		return (pOpen != null) ? pOpen : (pOpen = new OpenElements());
	}
	
	public ParserRule getOpenRule() {
		return getOpenAccess().getRule();
	}

	/// *
	//	paragraph ::= factDecl | assertDecl | funDecl | cmdDecl | enumDecl | sigDecl
	// * / Paragraph:
	//	EnumDecl | FactDecl | FunDecl | FunDeclWParam | LetOutDecl | PredDecl | SigDecl | AssertDecl | RunDecl | CheckDecl;
	public ParagraphElements getParagraphAccess() {
		return (pParagraph != null) ? pParagraph : (pParagraph = new ParagraphElements());
	}
	
	public ParserRule getParagraphRule() {
		return getParagraphAccess().getRule();
	}

	/// *
	//	enumDecl ::= "enum" name "{" name  ("," name)*  "}"
	// * / EnumDecl:
	//	documentation+=DOC_COMMENT? enumName=EnumName leftC=LeftCurlyBracket propertyEnum+=EnumPropertyName (comma+=Comma
	//	propertyEnum+=EnumPropertyName)* rightC=RightCurlyBracket;
	public EnumDeclElements getEnumDeclAccess() {
		return (pEnumDecl != null) ? pEnumDecl : (pEnumDecl = new EnumDeclElements());
	}
	
	public ParserRule getEnumDeclRule() {
		return getEnumDeclAccess().getRule();
	}

	/// *
	//	factDecl ::= "fact" [name] block
	// * / FactDecl returns Fact:
	//	documentation+=DOC_COMMENT? name=FactName block=Block;
	public FactDeclElements getFactDeclAccess() {
		return (pFactDecl != null) ? pFactDecl : (pFactDecl = new FactDeclElements());
	}
	
	public ParserRule getFactDeclRule() {
		return getFactDeclAccess().getRule();
	}

	/// *
	//	funDecl ::= ["private"] "fun" [ref "."] name "(" decl,* ")" ":" expr block
	//	funDecl ::= ["private"] "fun" [ref "."] name "[" decl,* "]" ":" expr block
	//	funDecl ::= ["private"] "fun" [ref "."] name                ":" expr block
	// * / FunDecl returns Function:
	//	documentation+=DOC_COMMENT? "private"? "fun" (ref=Ref dot=Dot)? name=FunctionName (leftS=LeftSquareBracketKeyword
	//	(param+=Param (comma+=Comma param+=Param)*)? rightS=RightSquareBracketKeyword | leftP=LeftParenthesis (decl+=Decl
	//	(comma+=Comma decl+=Decl)*)? rightP=RightParenthesis) colon=Colon expr=Expression block=Block;
	public FunDeclElements getFunDeclAccess() {
		return (pFunDecl != null) ? pFunDecl : (pFunDecl = new FunDeclElements());
	}
	
	public ParserRule getFunDeclRule() {
		return getFunDeclAccess().getRule();
	}

	/// *
	//	funDecl ::= ["private"] "fun" [ref "."] name "(" decl,* ")" ":" expr block
	//	funDecl ::= ["private"] "fun" [ref "."] name "[" decl,* "]" ":" expr block
	//	funDecl ::= ["private"] "fun" [ref "."] name                ":" expr block
	// * / / * without parameters* / FunDeclWParam returns Function:
	//	documentation+=DOC_COMMENT? "private"? "fun" (ref=Ref dot=Dot)? name=FunctionNamewParam colon=Colon expr=Expression
	//	block=Block;
	public FunDeclWParamElements getFunDeclWParamAccess() {
		return (pFunDeclWParam != null) ? pFunDeclWParam : (pFunDeclWParam = new FunDeclWParamElements());
	}
	
	public ParserRule getFunDeclWParamRule() {
		return getFunDeclWParamAccess().getRule();
	}

	//LetOutDecl returns Let:
	//	documentation+=DOC_COMMENT? name=LetName (leftS=LeftSquareBracketKeyword (nameRef+=ReferencesName (comma+=Comma
	//	nameRef+=ReferencesName)*)? rightS=RightSquareBracketKeyword)? (block=Block | "=" exprName=Expression);
	public LetOutDeclElements getLetOutDeclAccess() {
		return (pLetOutDecl != null) ? pLetOutDecl : (pLetOutDecl = new LetOutDeclElements());
	}
	
	public ParserRule getLetOutDeclRule() {
		return getLetOutDeclAccess().getRule();
	}

	/// *
	//	funDecl ::= ["private"] "pred" [ref "."] name "(" decl,* ")" block
	//	funDecl ::= ["private"] "pred" [ref "."] name "[" decl,* "]" block
	//	funDecl ::= ["private"] "pred" [ref "."] name                block
	// * / PredDecl returns Predicate:
	//	documentation+=DOC_COMMENT? "private"? "pred" (ref=Ref dot=Dot)? name=PredicateName (leftS=LeftSquareBracketKeyword
	//	(param+=Param (comma+=Comma param+=Param)*)? rightS=RightSquareBracketKeyword | leftP=LeftParenthesis (param+=Param
	//	(comma+=Comma param+=Param)*)? rightP=RightParenthesis)? block=Block;
	public PredDeclElements getPredDeclAccess() {
		return (pPredDecl != null) ? pPredDecl : (pPredDecl = new PredDeclElements());
	}
	
	public ParserRule getPredDeclRule() {
		return getPredDeclAccess().getRule();
	}

	/// *
	//	sigDecl ::= sigQual* "sig" name,+ [sigExt] "{" decl,* "}" [block]
	// * / SigDecl returns Signature:
	//	documentation+=DOC_COMMENT? SigQual* "sig" signatureName+=SignatureName (comma+=Comma signatureName+=SignatureName)*
	//	sigExt=SigExt? "{" (decl+=Decl (comma2+="," decl+=Decl)*)? "}" block=Block?;
	public SigDeclElements getSigDeclAccess() {
		return (pSigDecl != null) ? pSigDecl : (pSigDecl = new SigDeclElements());
	}
	
	public ParserRule getSigDeclRule() {
		return getSigDeclAccess().getRule();
	}

	/// *
	//	assertDecl ::= "assert" [name] block
	// * / AssertDecl returns Assertion:
	//	name=AssertionName block=Block;
	public AssertDeclElements getAssertDeclAccess() {
		return (pAssertDecl != null) ? pAssertDecl : (pAssertDecl = new AssertDeclElements());
	}
	
	public ParserRule getAssertDeclRule() {
		return getAssertDeclAccess().getRule();
	}

	/// *
	//	cmdDecl ::= [name ":"] ["run"|"check"] [name|block] scope //JUST RUN
	// * / RunDecl returns RunCommand:
	//	(runName=Alias ":")? "run" / *name=[FunctionNamewParam]|name=[FunctionName] |* / (name=[PredicateName] | block=Block)
	//	scope=Scope;
	public RunDeclElements getRunDeclAccess() {
		return (pRunDecl != null) ? pRunDecl : (pRunDecl = new RunDeclElements());
	}
	
	public ParserRule getRunDeclRule() {
		return getRunDeclAccess().getRule();
	}

	/// *
	//	cmdDecl ::= [name ":"] ["run"|"check"] [name|block] scope //JUST CHECK
	// * / CheckDecl returns CheckCommand:
	//	(checkName=Alias ":")? "check" (name=[AssertionName] | block=Block) scope=Scope;
	public CheckDeclElements getCheckDeclAccess() {
		return (pCheckDecl != null) ? pCheckDecl : (pCheckDecl = new CheckDeclElements());
	}
	
	public ParserRule getCheckDeclRule() {
		return getCheckDeclAccess().getRule();
	}

	/// *
	//	scope ::= "for" number                   ["expect" [0|1]]
	//	scope ::= "for" number "but" typescope,+ ["expect" [0|1]]
	//	scope ::= "for"              typescope,+ ["expect" [0|1]]
	//	scope ::=                                ["expect" [0|1]]	
	// * / Scope:
	//	{Scope} for="for" value=INT expect=Expectation? | {Scope} for="for" value=INT but="but" typescope+=Typescope
	//	(comma+=Comma typescope+=Typescope)* expect=Expectation? | {Scope} for="for" typescope+=Typescope (comma+=Comma
	//	typescope+=Typescope)* expect=Expectation? | {Scope} expect=Expectation?;
	public ScopeElements getScopeAccess() {
		return (pScope != null) ? pScope : (pScope = new ScopeElements());
	}
	
	public ParserRule getScopeRule() {
		return getScopeAccess().getRule();
	}

	//Expectation:
	//	expect="expect" value=INT;
	public ExpectationElements getExpectationAccess() {
		return (pExpectation != null) ? pExpectation : (pExpectation = new ExpectationElements());
	}
	
	public ParserRule getExpectationRule() {
		return getExpectationAccess().getRule();
	}

	/// *
	//	typescope ::= ["exactly"] number [name|"int"|"seq"]
	// * / Typescope:
	//	{Typescope} exactly="exactly"? value=INT ((asname=[AsName] | prev="this") sl="/")? (name=[ReferencesName] |
	//	(post="int" | post="seq"));
	public TypescopeElements getTypescopeAccess() {
		return (pTypescope != null) ? pTypescope : (pTypescope = new TypescopeElements());
	}
	
	public ParserRule getTypescopeRule() {
		return getTypescopeAccess().getRule();
	}

	/// *
	//	sigQual ::= "abstract" | "lone" | "one" | "some" | "private"	
	// * / SigQual:
	//	"abstract" | "lone" | "one" | "some" | "private";
	public SigQualElements getSigQualAccess() {
		return (pSigQual != null) ? pSigQual : (pSigQual = new SigQualElements());
	}
	
	public ParserRule getSigQualRule() {
		return getSigQualAccess().getRule();
	}

	/// *
	//	sigExt ::= "extends" ref
	//	sigExt ::= "in" ref ["+" ref]*
	// * / SigExt:
	//	"extends" ref=ReferencesSig | "in" ref=ReferencesSig ("+" ref2+=ReferencesSig)*;
	public SigExtElements getSigExtAccess() {
		return (pSigExt != null) ? pSigExt : (pSigExt = new SigExtElements());
	}
	
	public ParserRule getSigExtRule() {
		return getSigExtAccess().getRule();
	}

	//ReferencesSig:
	//	{ReferencesSig} (((asname=[AsName] | "this") "/")? nameRef=[SignatureName] | "univ" | "Int" | "seq/Int");
	public ReferencesSigElements getReferencesSigAccess() {
		return (pReferencesSig != null) ? pReferencesSig : (pReferencesSig = new ReferencesSigElements());
	}
	
	public ParserRule getReferencesSigRule() {
		return getReferencesSigAccess().getRule();
	}

	/// *
	//	expr ::= "let" letDecl,+ blockOrBar						1./	
	//       | quant decl,+    blockOrBar							2./
	//       | unOp expr											3./
	//       | expr binOp   expr									4./
	//       | expr arrowOp expr									5./
	//       | expr ["!"|"not"]? compareOp expr					6./
	//       | expr ["=>"|"implies"] expr "else" expr 			7./
	//       | expr "[" expr,* "]"								8./
	//       |     number											9./
	//       | "-" number											10./
	//       | "none"												11./
	//       | "iden"												12./
	//       | "univ"												13./
	//       | "Int"												14./
	//       | "seq/Int"											15./
	//       | "(" expr ")"										16./
	//       | ["@"] Name											17./
	//       | block												18./
	//       | "{" decl,+ blockOrBar "}"							19./
	//	
	// * / Expression:
	//	TerminalExpression (binOp+=BinOp expr+=Expression //4./
	//	//6./
	//	//5./						
	//	//7./
	//	| ("!" | "not")? cmp+=CompareOp expr+=Expression | arrowOp+=ArrowOp expr+=Expression | ("=>" | "implies")
	//	(par+=ParanthesisandExpression | expr+=Expression)? ("else" expr+=Expression)? | "[" (expr+=Expression (comma+=Comma
	//	expr+=Expression)*)? //8./						
	//	"]")*;
	public ExpressionElements getExpressionAccess() {
		return (pExpression != null) ? pExpression : (pExpression = new ExpressionElements());
	}
	
	public ParserRule getExpressionRule() {
		return getExpressionAccess().getRule();
	}

	////19./
	//TerminalExpression returns Expression:
	//	{Expression} parO="(" expr+=Expression+ parF=")" //1./
	//	//2./
	//	//2./ and 3./	
	//	//9./
	//	//10./
	//	//11./
	//	//12./ 
	//	//13./
	//	//14./
	//	//17./
	//	//18./
	//	| {Expression} let="let" letdecl+=LetDecl (comma+=Comma letdecl+=LetDecl)* blockOrBar+=BlockOrBar | {Expression}
	//	quant=Quant (decl+=Decl (comma+=Comma decl+=Decl)*)? (blockOrBar+=BlockOrBar | expr+=Expression)? | {Expression}
	//	unOp=UnOp expr+=Expression | {Expression} common+=CommonQuantUnOp ((decl+=Decl (comma+=Comma decl+=Decl)*)?
	//	(blockOrBar+=BlockOrBar | expr+=Expression)?) | {Expression} INT | {Expression} NEGATIVE_INTEGER | {Expression}
	//	none="none" | {Expression} iden="iden" | {Expression} univ="univ" | {Expression} (int="int" nameRef=[ReferencesName]?)
	//	| int="Int" | {Expression} seq="seq/Int" | {Expression} "@"? "int"? ((asname=[AsName] | "this") "/")?
	//	(nameRef=[ReferencesName] | "this" | name="pred/totalOrder" | name=("fun/add" | "fun/sub" | "fun/mul" | "fun/div" |
	//	"fun/rem" | "fun/min" | "fun/max" | "fun/next")) | {Expression} block+=Block | {Expression}
	//	leftCurlyBracket=LeftCurlyBracket decl+=Decl (comma+=Comma decl+=Decl)* blockOrBar+=BlockOrBar
	//	rightCurlyBracket=RightCurlyBracket;
	public TerminalExpressionElements getTerminalExpressionAccess() {
		return (pTerminalExpression != null) ? pTerminalExpression : (pTerminalExpression = new TerminalExpressionElements());
	}
	
	public ParserRule getTerminalExpressionRule() {
		return getTerminalExpressionAccess().getRule();
	}

	/// *
	//	block ::= "{" expr* "}"
	// * / Block:
	//	leftC=LeftCurlyBracket expr+=Expression* rightC=RightCurlyBracket;
	public BlockElements getBlockAccess() {
		return (pBlock != null) ? pBlock : (pBlock = new BlockElements());
	}
	
	public ParserRule getBlockRule() {
		return getBlockAccess().getRule();
	}

	/// *
	//	decl ::= ["private"] ["disj"] name,+ ":" ["disj"] expr
	// * / Decl:
	//	"private"? "disj"? propertyName+=PropertyName (comma+=Comma propertyName+=PropertyName)* colon=Colon "disj"?
	//	expr=Expression;
	public DeclElements getDeclAccess() {
		return (pDecl != null) ? pDecl : (pDecl = new DeclElements());
	}
	
	public ParserRule getDeclRule() {
		return getDeclAccess().getRule();
	}

	/// *
	//	param ::= ["private"] ["disj"] name,+ ":" ["disj"] expr
	// * / Param:
	//	"private"? "disj"? propertyName+=PropertyName (comma+=Comma propertyName+=PropertyName)* colon=Colon "disj"?
	//	expr=Expression;
	public ParamElements getParamAccess() {
		return (pParam != null) ? pParam : (pParam = new ParamElements());
	}
	
	public ParserRule getParamRule() {
		return getParamAccess().getRule();
	}

	//ParanthesisandExpression:
	//	"(" expr+=Expression ")";
	public ParanthesisandExpressionElements getParanthesisandExpressionAccess() {
		return (pParanthesisandExpression != null) ? pParanthesisandExpression : (pParanthesisandExpression = new ParanthesisandExpressionElements());
	}
	
	public ParserRule getParanthesisandExpressionRule() {
		return getParanthesisandExpressionAccess().getRule();
	}

	/// *
	//	quant ::= "all" | "sum"
	// * / Quant:
	//	"all" | "sum";
	public QuantElements getQuantAccess() {
		return (pQuant != null) ? pQuant : (pQuant = new QuantElements());
	}
	
	public ParserRule getQuantRule() {
		return getQuantAccess().getRule();
	}

	/// *	
	//	binOp ::= "||" | "or" | "&&" | "and" | "&" | "<=>" | "iff"| "=>" | "implies" | "+" | "-" | "++" | "<:" | ":>" | "." | "<<" | ">>" | ">>>"
	// * / BinOp:
	//	{BinOp} ("||" | "or" | "&&" | "and" | "&" | "<=>" | "iff" | "+" | "-" | "++" | "<:" | ":>" | dot=Dot | "<<" | ">>" |
	//	">>>");
	public BinOpElements getBinOpAccess() {
		return (pBinOp != null) ? pBinOp : (pBinOp = new BinOpElements());
	}
	
	public ParserRule getBinOpRule() {
		return getBinOpAccess().getRule();
	}

	/// *
	//	unOp ::= "!" | "not" | "set" | "seq" | "#" | "~" | "*" | "^"
	// * / UnOp:
	//	{UnOp} ("not" | "set" | "seq" | op=("!" | "#" | "~" | "*" | "^"));
	public UnOpElements getUnOpAccess() {
		return (pUnOp != null) ? pUnOp : (pUnOp = new UnOpElements());
	}
	
	public ParserRule getUnOpRule() {
		return getUnOpAccess().getRule();
	}

	/// *
	//	CommonQuantUnOp ::= "no" | "some" | "lone" | "one"
	// * / CommonQuantUnOp:
	//	{CommonQuantUnOp} ("no" | "some" | "lone" | "one");
	public CommonQuantUnOpElements getCommonQuantUnOpAccess() {
		return (pCommonQuantUnOp != null) ? pCommonQuantUnOp : (pCommonQuantUnOp = new CommonQuantUnOpElements());
	}
	
	public ParserRule getCommonQuantUnOpRule() {
		return getCommonQuantUnOpAccess().getRule();
	}

	/// *
	//	compareOp ::= "=" | "in" | "<" | ">" | "=<" | ">="
	// * / CompareOp:
	//	"=" / * UNDOCUMENTED * / | "in" | "<" | ">" | "=<" | "<=" | ">=";
	public CompareOpElements getCompareOpAccess() {
		return (pCompareOp != null) ? pCompareOp : (pCompareOp = new CompareOpElements());
	}
	
	public ParserRule getCompareOpRule() {
		return getCompareOpAccess().getRule();
	}

	/// *
	//	arrowOp ::= ["some"|"one"|"lone"|"set"]? "->" ["some"|"one"|"lone"|"set"]? 
	// * / ArrowOp:
	//	("some" | "one" | "lone" | "set")? arrow="->";
	public ArrowOpElements getArrowOpAccess() {
		return (pArrowOp != null) ? pArrowOp : (pArrowOp = new ArrowOpElements());
	}
	
	public ParserRule getArrowOpRule() {
		return getArrowOpAccess().getRule();
	}

	/// *
	//	letDecl ::= name "=" expr
	// * / LetDecl:
	//	nameExpression=PropertyName "=" expr=Expression;
	public LetDeclElements getLetDeclAccess() {
		return (pLetDecl != null) ? pLetDecl : (pLetDecl = new LetDeclElements());
	}
	
	public ParserRule getLetDeclRule() {
		return getLetDeclAccess().getRule();
	}

	/// *
	//	blockOrBar ::= block
	//	blockOrBar ::= "|" expr
	// * / BlockOrBar:
	//	block=Block | "|" expr=Expression;
	public BlockOrBarElements getBlockOrBarAccess() {
		return (pBlockOrBar != null) ? pBlockOrBar : (pBlockOrBar = new BlockOrBarElements());
	}
	
	public ParserRule getBlockOrBarRule() {
		return getBlockOrBarAccess().getRule();
	}

	//BlockOrPossibleBar:
	//	block=Block | "|"? expr=Expression;
	public BlockOrPossibleBarElements getBlockOrPossibleBarAccess() {
		return (pBlockOrPossibleBar != null) ? pBlockOrPossibleBar : (pBlockOrPossibleBar = new BlockOrPossibleBarElements());
	}
	
	public ParserRule getBlockOrPossibleBarRule() {
		return getBlockOrPossibleBarAccess().getRule();
	}

	/// *
	//	name ::= ["this" | ID] ["/" ID]*
	// * / OpenName:
	//	"open" importURI=Name;
	public OpenNameElements getOpenNameAccess() {
		return (pOpenName != null) ? pOpenName : (pOpenName = new OpenNameElements());
	}
	
	public ParserRule getOpenNameRule() {
		return getOpenNameAccess().getRule();
	}

	//FactName:
	//	{FactName} "fact" name=Name?;
	public FactNameElements getFactNameAccess() {
		return (pFactName != null) ? pFactName : (pFactName = new FactNameElements());
	}
	
	public ParserRule getFactNameRule() {
		return getFactNameAccess().getRule();
	}

	//AssertionName:
	//	{AssertionName} "assert" name=Name?;
	public AssertionNameElements getAssertionNameAccess() {
		return (pAssertionName != null) ? pAssertionName : (pAssertionName = new AssertionNameElements());
	}
	
	public ParserRule getAssertionNameRule() {
		return getAssertionNameAccess().getRule();
	}

	//FunctionName:
	//	name=Name;
	public FunctionNameElements getFunctionNameAccess() {
		return (pFunctionName != null) ? pFunctionName : (pFunctionName = new FunctionNameElements());
	}
	
	public ParserRule getFunctionNameRule() {
		return getFunctionNameAccess().getRule();
	}

	//FunctionNamewParam:
	//	name=Name;
	public FunctionNamewParamElements getFunctionNamewParamAccess() {
		return (pFunctionNamewParam != null) ? pFunctionNamewParam : (pFunctionNamewParam = new FunctionNamewParamElements());
	}
	
	public ParserRule getFunctionNamewParamRule() {
		return getFunctionNamewParamAccess().getRule();
	}

	//PredicateName:
	//	name=Name;
	public PredicateNameElements getPredicateNameAccess() {
		return (pPredicateName != null) ? pPredicateName : (pPredicateName = new PredicateNameElements());
	}
	
	public ParserRule getPredicateNameRule() {
		return getPredicateNameAccess().getRule();
	}

	//Alias:
	//	name=NameAlias;
	public AliasElements getAliasAccess() {
		return (pAlias != null) ? pAlias : (pAlias = new AliasElements());
	}
	
	public ParserRule getAliasRule() {
		return getAliasAccess().getRule();
	}

	//EnumName:
	//	"enum" name=Name;
	public EnumNameElements getEnumNameAccess() {
		return (pEnumName != null) ? pEnumName : (pEnumName = new EnumNameElements());
	}
	
	public ParserRule getEnumNameRule() {
		return getEnumNameAccess().getRule();
	}

	//EnumPropertyName:
	//	name=Name;
	public EnumPropertyNameElements getEnumPropertyNameAccess() {
		return (pEnumPropertyName != null) ? pEnumPropertyName : (pEnumPropertyName = new EnumPropertyNameElements());
	}
	
	public ParserRule getEnumPropertyNameRule() {
		return getEnumPropertyNameAccess().getRule();
	}

	//LetName:
	//	"let" name=Name;
	public LetNameElements getLetNameAccess() {
		return (pLetName != null) ? pLetName : (pLetName = new LetNameElements());
	}
	
	public ParserRule getLetNameRule() {
		return getLetNameAccess().getRule();
	}

	//SignatureName:
	//	name=Name;
	public SignatureNameElements getSignatureNameAccess() {
		return (pSignatureName != null) ? pSignatureName : (pSignatureName = new SignatureNameElements());
	}
	
	public ParserRule getSignatureNameRule() {
		return getSignatureNameAccess().getRule();
	}

	//PropertyName:
	//	name=Name;
	public PropertyNameElements getPropertyNameAccess() {
		return (pPropertyName != null) ? pPropertyName : (pPropertyName = new PropertyNameElements());
	}
	
	public ParserRule getPropertyNameRule() {
		return getPropertyNameAccess().getRule();
	}

	//ExactlyName: //QualifiedName=Name;
	//	name=Name;
	public ExactlyNameElements getExactlyNameAccess() {
		return (pExactlyName != null) ? pExactlyName : (pExactlyName = new ExactlyNameElements());
	}
	
	public ParserRule getExactlyNameRule() {
		return getExactlyNameAccess().getRule();
	}

	//AsName:
	//	name=ID;
	public AsNameElements getAsNameAccess() {
		return (pAsName != null) ? pAsName : (pAsName = new AsNameElements());
	}
	
	public ParserRule getAsNameRule() {
		return getAsNameAccess().getRule();
	}

	//NameAlias:
	//	ID ("/" ID)*;
	public NameAliasElements getNameAliasAccess() {
		return (pNameAlias != null) ? pNameAlias : (pNameAlias = new NameAliasElements());
	}
	
	public ParserRule getNameAliasRule() {
		return getNameAliasAccess().getRule();
	}

	//Name:
	//	("this" | ID) ("/" ID)*;
	public NameElements getNameAccess() {
		return (pName != null) ? pName : (pName = new NameElements());
	}
	
	public ParserRule getNameRule() {
		return getNameAccess().getRule();
	}

	/// *
	//	ref ::= name | "univ" | "Int" | "seq/Int"
	// * / ReferencesName:
	//	FactName | FunctionName | FunctionNamewParam | EnumName | EnumPropertyName | SignatureName | PropertyName |
	//	ExactlyName | LetName | PredicateName;
	public ReferencesNameElements getReferencesNameAccess() {
		return (pReferencesName != null) ? pReferencesName : (pReferencesName = new ReferencesNameElements());
	}
	
	public ParserRule getReferencesNameRule() {
		return getReferencesNameAccess().getRule();
	}

	////A VOIR
	//Ref:
	//	{Ref} (nameRef=[ReferencesName] | "univ" | "Int" | "seq/Int");
	public RefElements getRefAccess() {
		return (pRef != null) ? pRef : (pRef = new RefElements());
	}
	
	public ParserRule getRefRule() {
		return getRefAccess().getRule();
	}

	//Dot:
	//	dot=".";
	public DotElements getDotAccess() {
		return (pDot != null) ? pDot : (pDot = new DotElements());
	}
	
	public ParserRule getDotRule() {
		return getDotAccess().getRule();
	}

	//Comma:
	//	comma=",";
	public CommaElements getCommaAccess() {
		return (pComma != null) ? pComma : (pComma = new CommaElements());
	}
	
	public ParserRule getCommaRule() {
		return getCommaAccess().getRule();
	}

	//Colon:
	//	colon=":";
	public ColonElements getColonAccess() {
		return (pColon != null) ? pColon : (pColon = new ColonElements());
	}
	
	public ParserRule getColonRule() {
		return getColonAccess().getRule();
	}

	//LeftCurlyBracket:
	//	leftCurlyBracket="{";
	public LeftCurlyBracketElements getLeftCurlyBracketAccess() {
		return (pLeftCurlyBracket != null) ? pLeftCurlyBracket : (pLeftCurlyBracket = new LeftCurlyBracketElements());
	}
	
	public ParserRule getLeftCurlyBracketRule() {
		return getLeftCurlyBracketAccess().getRule();
	}

	//RightCurlyBracket:
	//	rightCurlyBracket="}";
	public RightCurlyBracketElements getRightCurlyBracketAccess() {
		return (pRightCurlyBracket != null) ? pRightCurlyBracket : (pRightCurlyBracket = new RightCurlyBracketElements());
	}
	
	public ParserRule getRightCurlyBracketRule() {
		return getRightCurlyBracketAccess().getRule();
	}

	//LeftParenthesis:
	//	leftParenthesis="(";
	public LeftParenthesisElements getLeftParenthesisAccess() {
		return (pLeftParenthesis != null) ? pLeftParenthesis : (pLeftParenthesis = new LeftParenthesisElements());
	}
	
	public ParserRule getLeftParenthesisRule() {
		return getLeftParenthesisAccess().getRule();
	}

	//RightParenthesis:
	//	rightParenthesis=")";
	public RightParenthesisElements getRightParenthesisAccess() {
		return (pRightParenthesis != null) ? pRightParenthesis : (pRightParenthesis = new RightParenthesisElements());
	}
	
	public ParserRule getRightParenthesisRule() {
		return getRightParenthesisAccess().getRule();
	}

	//LeftSquareBracketKeyword:
	//	leftSquareBracketKeyword="[";
	public LeftSquareBracketKeywordElements getLeftSquareBracketKeywordAccess() {
		return (pLeftSquareBracketKeyword != null) ? pLeftSquareBracketKeyword : (pLeftSquareBracketKeyword = new LeftSquareBracketKeywordElements());
	}
	
	public ParserRule getLeftSquareBracketKeywordRule() {
		return getLeftSquareBracketKeywordAccess().getRule();
	}

	//RightSquareBracketKeyword:
	//	rightSquareBracketKeyword="]";
	public RightSquareBracketKeywordElements getRightSquareBracketKeywordAccess() {
		return (pRightSquareBracketKeyword != null) ? pRightSquareBracketKeyword : (pRightSquareBracketKeyword = new RightSquareBracketKeywordElements());
	}
	
	public ParserRule getRightSquareBracketKeywordRule() {
		return getRightSquareBracketKeywordAccess().getRule();
	}

	//terminal NEGATIVE_INTEGER:
	//	"-" INT;
	public TerminalRule getNEGATIVE_INTEGERRule() {
		return (tNEGATIVE_INTEGER != null) ? tNEGATIVE_INTEGER : (tNEGATIVE_INTEGER = (TerminalRule) GrammarUtil.findRuleForName(getGrammar(), "NEGATIVE_INTEGER"));
	} 

	//terminal DOC_COMMENT:
	//	"/ **"->"* /";
	public TerminalRule getDOC_COMMENTRule() {
		return (tDOC_COMMENT != null) ? tDOC_COMMENT : (tDOC_COMMENT = (TerminalRule) GrammarUtil.findRuleForName(getGrammar(), "DOC_COMMENT"));
	} 

	//terminal ML_COMMENT:
	//	"/ *" !"*"->"* /";
	public TerminalRule getML_COMMENTRule() {
		return (tML_COMMENT != null) ? tML_COMMENT : (tML_COMMENT = (TerminalRule) GrammarUtil.findRuleForName(getGrammar(), "ML_COMMENT"));
	} 

	//terminal SL_COMMENT:
	//	"//" !("\n" | "\r")* ("\r"? "\n")? | "--"->"\n";
	public TerminalRule getSL_COMMENTRule() {
		return (tSL_COMMENT != null) ? tSL_COMMENT : (tSL_COMMENT = (TerminalRule) GrammarUtil.findRuleForName(getGrammar(), "SL_COMMENT"));
	} 

	//terminal WS:
	//	(" " | "\t" | "\r" | "\n")+;
	public TerminalRule getWSRule() {
		return (tWS != null) ? tWS : (tWS = (TerminalRule) GrammarUtil.findRuleForName(getGrammar(), "WS"));
	} 

	//terminal ID:
	//	("a".."z" | "A".."Z" | "_") ("a".."z" | "A".."Z" | "_" | "0".."9")* ("\'" | "\"")*;
	public TerminalRule getIDRule() {
		return (tID != null) ? tID : (tID = (TerminalRule) GrammarUtil.findRuleForName(getGrammar(), "ID"));
	} 

	//terminal INT returns ecore::EInt:
	//	"0".."9"+;
	public TerminalRule getINTRule() {
		return (tINT != null) ? tINT : (tINT = (TerminalRule) GrammarUtil.findRuleForName(getGrammar(), "INT"));
	} 

	//terminal STRING:
	//	"\"" ("\\" ("b" | "t" | "n" | "f" | "r" | "u" | "\"" | "\'" | "\\") | !("\\" | "\""))* "\"" | "\'" ("\\" ("b" | "t" |
	//	"n" | "f" | "r" | "u" | "\"" | "\'" | "\\") | !("\\" | "\'"))* "\'";
	public TerminalRule getSTRINGRule() {
		return (tSTRING != null) ? tSTRING : (tSTRING = (TerminalRule) GrammarUtil.findRuleForName(getGrammar(), "STRING"));
	} 

	//terminal ANY_OTHER:
	//	.;
	public TerminalRule getANY_OTHERRule() {
		return (tANY_OTHER != null) ? tANY_OTHER : (tANY_OTHER = (TerminalRule) GrammarUtil.findRuleForName(getGrammar(), "ANY_OTHER"));
	} 
}
