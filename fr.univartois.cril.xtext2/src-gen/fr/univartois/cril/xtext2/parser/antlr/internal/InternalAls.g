/*
* generated by Xtext
*/
grammar InternalAls;

options {
	superClass=AbstractInternalAntlrParser;
	backtrack=true;
	
}

@lexer::header {
package fr.univartois.cril.xtext2.parser.antlr.internal;

// Hack: Use our own Lexer superclass by means of import. 
// Currently there is no other way to specify the superclass for the lexer.
import org.eclipse.xtext.parser.antlr.Lexer;
}

@parser::header {
package fr.univartois.cril.xtext2.parser.antlr.internal; 

import org.eclipse.xtext.*;
import org.eclipse.xtext.parser.*;
import org.eclipse.xtext.parser.impl.*;
import org.eclipse.emf.ecore.util.EcoreUtil;
import org.eclipse.emf.ecore.EObject;
import org.eclipse.xtext.parser.antlr.AbstractInternalAntlrParser;
import org.eclipse.xtext.parser.antlr.XtextTokenStream;
import org.eclipse.xtext.parser.antlr.XtextTokenStream.HiddenTokens;
import org.eclipse.xtext.parser.antlr.AntlrDatatypeRuleToken;
import fr.univartois.cril.xtext2.services.AlsGrammarAccess;

}

@parser::members {

/*
  This grammar contains a lot of empty actions to work around a bug in ANTLR.
  Otherwise the ANTLR tool will create synpreds that cannot be compiled in some rare cases.
*/
 
 	private AlsGrammarAccess grammarAccess;
 	
    public InternalAlsParser(TokenStream input, AlsGrammarAccess grammarAccess) {
        this(input);
        this.grammarAccess = grammarAccess;
        registerRules(grammarAccess.getGrammar());
    }
    
    @Override
    protected String getFirstRuleName() {
    	return "Specification";	
   	}
   	
   	@Override
   	protected AlsGrammarAccess getGrammarAccess() {
   		return grammarAccess;
   	}
}

@rulecatch { 
    catch (RecognitionException re) { 
        recover(input,re); 
        appendSkippedTokens();
    } 
}




// Entry rule entryRuleSpecification
entryRuleSpecification returns [EObject current=null] 
	:
	{ newCompositeNode(grammarAccess.getSpecificationRule()); }
	 iv_ruleSpecification=ruleSpecification 
	 { $current=$iv_ruleSpecification.current; } 
	 EOF 
;

// Rule Specification
ruleSpecification returns [EObject current=null] 
    @init { enterRule(); 
    }
    @after { leaveRule(); }:
((
(
		{ 
	        newCompositeNode(grammarAccess.getSpecificationAccess().getModuleModuleParserRuleCall_0_0()); 
	    }
		lv_module_0_0=ruleModule		{
	        if ($current==null) {
	            $current = createModelElementForParent(grammarAccess.getSpecificationRule());
	        }
       		set(
       			$current, 
       			"module",
        		lv_module_0_0, 
        		"Module");
	        afterParserOrEnumRuleCall();
	    }

)
)?(
(
		{ 
	        newCompositeNode(grammarAccess.getSpecificationAccess().getOpenOpenParserRuleCall_1_0()); 
	    }
		lv_open_1_0=ruleOpen		{
	        if ($current==null) {
	            $current = createModelElementForParent(grammarAccess.getSpecificationRule());
	        }
       		add(
       			$current, 
       			"open",
        		lv_open_1_0, 
        		"Open");
	        afterParserOrEnumRuleCall();
	    }

)
)*(
(
		{ 
	        newCompositeNode(grammarAccess.getSpecificationAccess().getParagraphParagraphParserRuleCall_2_0()); 
	    }
		lv_paragraph_2_0=ruleParagraph		{
	        if ($current==null) {
	            $current = createModelElementForParent(grammarAccess.getSpecificationRule());
	        }
       		add(
       			$current, 
       			"paragraph",
        		lv_paragraph_2_0, 
        		"Paragraph");
	        afterParserOrEnumRuleCall();
	    }

)
)*)
;





// Entry rule entryRuleModule
entryRuleModule returns [EObject current=null] 
	:
	{ newCompositeNode(grammarAccess.getModuleRule()); }
	 iv_ruleModule=ruleModule 
	 { $current=$iv_ruleModule.current; } 
	 EOF 
;

// Rule Module
ruleModule returns [EObject current=null] 
    @init { enterRule(); 
    }
    @after { leaveRule(); }:
(	otherlv_0='module' 
    {
    	newLeafNode(otherlv_0, grammarAccess.getModuleAccess().getModuleKeyword_0());
    }
(
(
		{ 
	        newCompositeNode(grammarAccess.getModuleAccess().getModuleNameNameParserRuleCall_1_0()); 
	    }
		lv_moduleName_1_0=ruleName		{
	        if ($current==null) {
	            $current = createModelElementForParent(grammarAccess.getModuleRule());
	        }
       		set(
       			$current, 
       			"moduleName",
        		lv_moduleName_1_0, 
        		"Name");
	        afterParserOrEnumRuleCall();
	    }

)
)((
(
		{ 
	        newCompositeNode(grammarAccess.getModuleAccess().getLeftLeftSquareBracketKeywordParserRuleCall_2_0_0()); 
	    }
		lv_left_2_0=ruleLeftSquareBracketKeyword		{
	        if ($current==null) {
	            $current = createModelElementForParent(grammarAccess.getModuleRule());
	        }
       		set(
       			$current, 
       			"left",
        		lv_left_2_0, 
        		"LeftSquareBracketKeyword");
	        afterParserOrEnumRuleCall();
	    }

)
)(
(
		lv_exactly_3_0=	'exactly' 
    {
        newLeafNode(lv_exactly_3_0, grammarAccess.getModuleAccess().getExactlyExactlyKeyword_2_1_0());
    }
 
	    {
	        if ($current==null) {
	            $current = createModelElement(grammarAccess.getModuleRule());
	        }
       		addWithLastConsumed($current, "exactly", lv_exactly_3_0, "exactly");
	    }

)
)?(
(
		{ 
	        newCompositeNode(grammarAccess.getModuleAccess().getNameExactlyNameParserRuleCall_2_2_0()); 
	    }
		lv_name_4_0=ruleExactlyName		{
	        if ($current==null) {
	            $current = createModelElementForParent(grammarAccess.getModuleRule());
	        }
       		add(
       			$current, 
       			"name",
        		lv_name_4_0, 
        		"ExactlyName");
	        afterParserOrEnumRuleCall();
	    }

)
)((
(
		{ 
	        newCompositeNode(grammarAccess.getModuleAccess().getCommaCommaParserRuleCall_2_3_0_0()); 
	    }
		lv_comma_5_0=ruleComma		{
	        if ($current==null) {
	            $current = createModelElementForParent(grammarAccess.getModuleRule());
	        }
       		add(
       			$current, 
       			"comma",
        		lv_comma_5_0, 
        		"Comma");
	        afterParserOrEnumRuleCall();
	    }

)
)(((
(
		lv_exactly_6_0=	'exactly' 
    {
        newLeafNode(lv_exactly_6_0, grammarAccess.getModuleAccess().getExactlyExactlyKeyword_2_3_1_0_0_0());
    }
 
	    {
	        if ($current==null) {
	            $current = createModelElement(grammarAccess.getModuleRule());
	        }
       		addWithLastConsumed($current, "exactly", lv_exactly_6_0, "exactly");
	    }

)
)?(
(
		lv_number_7_0=RULE_INT
		{
			newLeafNode(lv_number_7_0, grammarAccess.getModuleAccess().getNumberINTTerminalRuleCall_2_3_1_0_1_0()); 
		}
		{
	        if ($current==null) {
	            $current = createModelElement(grammarAccess.getModuleRule());
	        }
       		addWithLastConsumed(
       			$current, 
       			"number",
        		lv_number_7_0, 
        		"INT");
	    }

)
))
    |(
(
		{ 
	        newCompositeNode(grammarAccess.getModuleAccess().getNameExactlyNameParserRuleCall_2_3_1_1_0()); 
	    }
		lv_name_8_0=ruleExactlyName		{
	        if ($current==null) {
	            $current = createModelElementForParent(grammarAccess.getModuleRule());
	        }
       		add(
       			$current, 
       			"name",
        		lv_name_8_0, 
        		"ExactlyName");
	        afterParserOrEnumRuleCall();
	    }

)
)))*(
(
		{ 
	        newCompositeNode(grammarAccess.getModuleAccess().getRightRightSquareBracketKeywordParserRuleCall_2_4_0()); 
	    }
		lv_right_9_0=ruleRightSquareBracketKeyword		{
	        if ($current==null) {
	            $current = createModelElementForParent(grammarAccess.getModuleRule());
	        }
       		set(
       			$current, 
       			"right",
        		lv_right_9_0, 
        		"RightSquareBracketKeyword");
	        afterParserOrEnumRuleCall();
	    }

)
))?)
;





// Entry rule entryRuleOpen
entryRuleOpen returns [EObject current=null] 
	:
	{ newCompositeNode(grammarAccess.getOpenRule()); }
	 iv_ruleOpen=ruleOpen 
	 { $current=$iv_ruleOpen.current; } 
	 EOF 
;

// Rule Open
ruleOpen returns [EObject current=null] 
    @init { enterRule(); 
    }
    @after { leaveRule(); }:
((	otherlv_0='private' 
    {
    	newLeafNode(otherlv_0, grammarAccess.getOpenAccess().getPrivateKeyword_0());
    }
)?(
(
		{ 
	        newCompositeNode(grammarAccess.getOpenAccess().getOpenNameOpenNameParserRuleCall_1_0()); 
	    }
		lv_openName_1_0=ruleOpenName		{
	        if ($current==null) {
	            $current = createModelElementForParent(grammarAccess.getOpenRule());
	        }
       		set(
       			$current, 
       			"openName",
        		lv_openName_1_0, 
        		"OpenName");
	        afterParserOrEnumRuleCall();
	    }

)
)((
(
		{ 
	        newCompositeNode(grammarAccess.getOpenAccess().getLeftLeftSquareBracketKeywordParserRuleCall_2_0_0()); 
	    }
		lv_left_2_0=ruleLeftSquareBracketKeyword		{
	        if ($current==null) {
	            $current = createModelElementForParent(grammarAccess.getOpenRule());
	        }
       		set(
       			$current, 
       			"left",
        		lv_left_2_0, 
        		"LeftSquareBracketKeyword");
	        afterParserOrEnumRuleCall();
	    }

)
)((
(
		{ 
	        newCompositeNode(grammarAccess.getOpenAccess().getPreviousNameAsAsNameParserRuleCall_2_1_0_0()); 
	    }
		lv_previousNameAs_3_0=ruleAsName		{
	        if ($current==null) {
	            $current = createModelElementForParent(grammarAccess.getOpenRule());
	        }
       		set(
       			$current, 
       			"previousNameAs",
        		lv_previousNameAs_3_0, 
        		"AsName");
	        afterParserOrEnumRuleCall();
	    }

)
)	otherlv_4='/' 
    {
    	newLeafNode(otherlv_4, grammarAccess.getOpenAccess().getSolidusKeyword_2_1_1());
    }
)?(
(
		{ 
		  /* */ 
		}
		{
			if ($current==null) {
	            $current = createModelElement(grammarAccess.getOpenRule());
	        }
        }
	otherlv_5=RULE_ID
	{
		newLeafNode(otherlv_5, grammarAccess.getOpenAccess().getRefnameSignatureNameCrossReference_2_2_0()); 
	}

)
)(
(
		{ 
	        newCompositeNode(grammarAccess.getOpenAccess().getRightRightSquareBracketKeywordParserRuleCall_2_3_0()); 
	    }
		lv_right_6_0=ruleRightSquareBracketKeyword		{
	        if ($current==null) {
	            $current = createModelElementForParent(grammarAccess.getOpenRule());
	        }
       		set(
       			$current, 
       			"right",
        		lv_right_6_0, 
        		"RightSquareBracketKeyword");
	        afterParserOrEnumRuleCall();
	    }

)
))?(	otherlv_7='as' 
    {
    	newLeafNode(otherlv_7, grammarAccess.getOpenAccess().getAsKeyword_3_0());
    }
(
(
		{ 
	        newCompositeNode(grammarAccess.getOpenAccess().getNameAsAsNameParserRuleCall_3_1_0()); 
	    }
		lv_nameAs_8_0=ruleAsName		{
	        if ($current==null) {
	            $current = createModelElementForParent(grammarAccess.getOpenRule());
	        }
       		set(
       			$current, 
       			"nameAs",
        		lv_nameAs_8_0, 
        		"AsName");
	        afterParserOrEnumRuleCall();
	    }

)
))?)
;





// Entry rule entryRuleParagraph
entryRuleParagraph returns [EObject current=null] 
	:
	{ newCompositeNode(grammarAccess.getParagraphRule()); }
	 iv_ruleParagraph=ruleParagraph 
	 { $current=$iv_ruleParagraph.current; } 
	 EOF 
;

// Rule Paragraph
ruleParagraph returns [EObject current=null] 
    @init { enterRule(); 
    }
    @after { leaveRule(); }:
(
	{ 
	  /* */ 
	}
    { 
        newCompositeNode(grammarAccess.getParagraphAccess().getFactDeclParserRuleCall_0()); 
    }
    this_FactDecl_0=ruleFactDecl
    { 
        $current = $this_FactDecl_0.current; 
        afterParserOrEnumRuleCall();
    }

    |
	{ 
	  /* */ 
	}
    { 
        newCompositeNode(grammarAccess.getParagraphAccess().getAssertDeclParserRuleCall_1()); 
    }
    this_AssertDecl_1=ruleAssertDecl
    { 
        $current = $this_AssertDecl_1.current; 
        afterParserOrEnumRuleCall();
    }

    |
	{ 
	  /* */ 
	}
    { 
        newCompositeNode(grammarAccess.getParagraphAccess().getFunDeclParserRuleCall_2()); 
    }
    this_FunDecl_2=ruleFunDecl
    { 
        $current = $this_FunDecl_2.current; 
        afterParserOrEnumRuleCall();
    }

    |
	{ 
	  /* */ 
	}
    { 
        newCompositeNode(grammarAccess.getParagraphAccess().getPredDeclParserRuleCall_3()); 
    }
    this_PredDecl_3=rulePredDecl
    { 
        $current = $this_PredDecl_3.current; 
        afterParserOrEnumRuleCall();
    }

    |
	{ 
	  /* */ 
	}
    { 
        newCompositeNode(grammarAccess.getParagraphAccess().getRunDeclParserRuleCall_4()); 
    }
    this_RunDecl_4=ruleRunDecl
    { 
        $current = $this_RunDecl_4.current; 
        afterParserOrEnumRuleCall();
    }

    |
	{ 
	  /* */ 
	}
    { 
        newCompositeNode(grammarAccess.getParagraphAccess().getFunDeclWParamParserRuleCall_5()); 
    }
    this_FunDeclWParam_5=ruleFunDeclWParam
    { 
        $current = $this_FunDeclWParam_5.current; 
        afterParserOrEnumRuleCall();
    }

    |
	{ 
	  /* */ 
	}
    { 
        newCompositeNode(grammarAccess.getParagraphAccess().getCheckDeclParserRuleCall_6()); 
    }
    this_CheckDecl_6=ruleCheckDecl
    { 
        $current = $this_CheckDecl_6.current; 
        afterParserOrEnumRuleCall();
    }

    |
	{ 
	  /* */ 
	}
    { 
        newCompositeNode(grammarAccess.getParagraphAccess().getEnumDeclParserRuleCall_7()); 
    }
    this_EnumDecl_7=ruleEnumDecl
    { 
        $current = $this_EnumDecl_7.current; 
        afterParserOrEnumRuleCall();
    }

    |
	{ 
	  /* */ 
	}
    { 
        newCompositeNode(grammarAccess.getParagraphAccess().getLetOutDeclParserRuleCall_8()); 
    }
    this_LetOutDecl_8=ruleLetOutDecl
    { 
        $current = $this_LetOutDecl_8.current; 
        afterParserOrEnumRuleCall();
    }

    |
	{ 
	  /* */ 
	}
    { 
        newCompositeNode(grammarAccess.getParagraphAccess().getSigDeclParserRuleCall_9()); 
    }
    this_SigDecl_9=ruleSigDecl
    { 
        $current = $this_SigDecl_9.current; 
        afterParserOrEnumRuleCall();
    }
)
;





// Entry rule entryRuleFactDecl
entryRuleFactDecl returns [EObject current=null] 
	:
	{ newCompositeNode(grammarAccess.getFactDeclRule()); }
	 iv_ruleFactDecl=ruleFactDecl 
	 { $current=$iv_ruleFactDecl.current; } 
	 EOF 
;

// Rule FactDecl
ruleFactDecl returns [EObject current=null] 
    @init { enterRule(); 
    }
    @after { leaveRule(); }:
((
(
		{ 
	        newCompositeNode(grammarAccess.getFactDeclAccess().getNameFactNameParserRuleCall_0_0()); 
	    }
		lv_name_0_0=ruleFactName		{
	        if ($current==null) {
	            $current = createModelElementForParent(grammarAccess.getFactDeclRule());
	        }
       		set(
       			$current, 
       			"name",
        		lv_name_0_0, 
        		"FactName");
	        afterParserOrEnumRuleCall();
	    }

)
)(
(
		{ 
	        newCompositeNode(grammarAccess.getFactDeclAccess().getBlockBlockParserRuleCall_1_0()); 
	    }
		lv_block_1_0=ruleBlock		{
	        if ($current==null) {
	            $current = createModelElementForParent(grammarAccess.getFactDeclRule());
	        }
       		set(
       			$current, 
       			"block",
        		lv_block_1_0, 
        		"Block");
	        afterParserOrEnumRuleCall();
	    }

)
))
;





// Entry rule entryRuleAssertDecl
entryRuleAssertDecl returns [EObject current=null] 
	:
	{ newCompositeNode(grammarAccess.getAssertDeclRule()); }
	 iv_ruleAssertDecl=ruleAssertDecl 
	 { $current=$iv_ruleAssertDecl.current; } 
	 EOF 
;

// Rule AssertDecl
ruleAssertDecl returns [EObject current=null] 
    @init { enterRule(); 
    }
    @after { leaveRule(); }:
((
(
		{ 
	        newCompositeNode(grammarAccess.getAssertDeclAccess().getNameAssertionNameParserRuleCall_0_0()); 
	    }
		lv_name_0_0=ruleAssertionName		{
	        if ($current==null) {
	            $current = createModelElementForParent(grammarAccess.getAssertDeclRule());
	        }
       		set(
       			$current, 
       			"name",
        		lv_name_0_0, 
        		"AssertionName");
	        afterParserOrEnumRuleCall();
	    }

)
)(
(
		{ 
	        newCompositeNode(grammarAccess.getAssertDeclAccess().getBlockBlockParserRuleCall_1_0()); 
	    }
		lv_block_1_0=ruleBlock		{
	        if ($current==null) {
	            $current = createModelElementForParent(grammarAccess.getAssertDeclRule());
	        }
       		set(
       			$current, 
       			"block",
        		lv_block_1_0, 
        		"Block");
	        afterParserOrEnumRuleCall();
	    }

)
))
;





// Entry rule entryRuleFunDecl
entryRuleFunDecl returns [EObject current=null] 
	:
	{ newCompositeNode(grammarAccess.getFunDeclRule()); }
	 iv_ruleFunDecl=ruleFunDecl 
	 { $current=$iv_ruleFunDecl.current; } 
	 EOF 
;

// Rule FunDecl
ruleFunDecl returns [EObject current=null] 
    @init { enterRule(); 
    }
    @after { leaveRule(); }:
((	otherlv_0='private' 
    {
    	newLeafNode(otherlv_0, grammarAccess.getFunDeclAccess().getPrivateKeyword_0());
    }
)?	otherlv_1='fun' 
    {
    	newLeafNode(otherlv_1, grammarAccess.getFunDeclAccess().getFunKeyword_1());
    }
((
(
		{ 
	        newCompositeNode(grammarAccess.getFunDeclAccess().getRefRefParserRuleCall_2_0_0()); 
	    }
		lv_ref_2_0=ruleRef		{
	        if ($current==null) {
	            $current = createModelElementForParent(grammarAccess.getFunDeclRule());
	        }
       		set(
       			$current, 
       			"ref",
        		lv_ref_2_0, 
        		"Ref");
	        afterParserOrEnumRuleCall();
	    }

)
)(
(
		{ 
	        newCompositeNode(grammarAccess.getFunDeclAccess().getDotDotParserRuleCall_2_1_0()); 
	    }
		lv_dot_3_0=ruleDot		{
	        if ($current==null) {
	            $current = createModelElementForParent(grammarAccess.getFunDeclRule());
	        }
       		set(
       			$current, 
       			"dot",
        		lv_dot_3_0, 
        		"Dot");
	        afterParserOrEnumRuleCall();
	    }

)
))?(
(
		{ 
	        newCompositeNode(grammarAccess.getFunDeclAccess().getNameFunctionNameParserRuleCall_3_0()); 
	    }
		lv_name_4_0=ruleFunctionName		{
	        if ($current==null) {
	            $current = createModelElementForParent(grammarAccess.getFunDeclRule());
	        }
       		set(
       			$current, 
       			"name",
        		lv_name_4_0, 
        		"FunctionName");
	        afterParserOrEnumRuleCall();
	    }

)
)(((
(
		{ 
	        newCompositeNode(grammarAccess.getFunDeclAccess().getLeftSLeftSquareBracketKeywordParserRuleCall_4_0_0_0()); 
	    }
		lv_leftS_5_0=ruleLeftSquareBracketKeyword		{
	        if ($current==null) {
	            $current = createModelElementForParent(grammarAccess.getFunDeclRule());
	        }
       		set(
       			$current, 
       			"leftS",
        		lv_leftS_5_0, 
        		"LeftSquareBracketKeyword");
	        afterParserOrEnumRuleCall();
	    }

)
)((
(
		{ 
	        newCompositeNode(grammarAccess.getFunDeclAccess().getParamParamParserRuleCall_4_0_1_0_0()); 
	    }
		lv_param_6_0=ruleParam		{
	        if ($current==null) {
	            $current = createModelElementForParent(grammarAccess.getFunDeclRule());
	        }
       		add(
       			$current, 
       			"param",
        		lv_param_6_0, 
        		"Param");
	        afterParserOrEnumRuleCall();
	    }

)
)((
(
		{ 
	        newCompositeNode(grammarAccess.getFunDeclAccess().getCommaCommaParserRuleCall_4_0_1_1_0_0()); 
	    }
		lv_comma_7_0=ruleComma		{
	        if ($current==null) {
	            $current = createModelElementForParent(grammarAccess.getFunDeclRule());
	        }
       		add(
       			$current, 
       			"comma",
        		lv_comma_7_0, 
        		"Comma");
	        afterParserOrEnumRuleCall();
	    }

)
)(
(
		{ 
	        newCompositeNode(grammarAccess.getFunDeclAccess().getParamParamParserRuleCall_4_0_1_1_1_0()); 
	    }
		lv_param_8_0=ruleParam		{
	        if ($current==null) {
	            $current = createModelElementForParent(grammarAccess.getFunDeclRule());
	        }
       		add(
       			$current, 
       			"param",
        		lv_param_8_0, 
        		"Param");
	        afterParserOrEnumRuleCall();
	    }

)
))*)?(
(
		{ 
	        newCompositeNode(grammarAccess.getFunDeclAccess().getRightSRightSquareBracketKeywordParserRuleCall_4_0_2_0()); 
	    }
		lv_rightS_9_0=ruleRightSquareBracketKeyword		{
	        if ($current==null) {
	            $current = createModelElementForParent(grammarAccess.getFunDeclRule());
	        }
       		set(
       			$current, 
       			"rightS",
        		lv_rightS_9_0, 
        		"RightSquareBracketKeyword");
	        afterParserOrEnumRuleCall();
	    }

)
))
    |((
(
		{ 
	        newCompositeNode(grammarAccess.getFunDeclAccess().getLeftPLeftParenthesisParserRuleCall_4_1_0_0()); 
	    }
		lv_leftP_10_0=ruleLeftParenthesis		{
	        if ($current==null) {
	            $current = createModelElementForParent(grammarAccess.getFunDeclRule());
	        }
       		set(
       			$current, 
       			"leftP",
        		lv_leftP_10_0, 
        		"LeftParenthesis");
	        afterParserOrEnumRuleCall();
	    }

)
)((
(
		{ 
	        newCompositeNode(grammarAccess.getFunDeclAccess().getDeclDeclParserRuleCall_4_1_1_0_0()); 
	    }
		lv_decl_11_0=ruleDecl		{
	        if ($current==null) {
	            $current = createModelElementForParent(grammarAccess.getFunDeclRule());
	        }
       		add(
       			$current, 
       			"decl",
        		lv_decl_11_0, 
        		"Decl");
	        afterParserOrEnumRuleCall();
	    }

)
)((
(
		{ 
	        newCompositeNode(grammarAccess.getFunDeclAccess().getCommaCommaParserRuleCall_4_1_1_1_0_0()); 
	    }
		lv_comma_12_0=ruleComma		{
	        if ($current==null) {
	            $current = createModelElementForParent(grammarAccess.getFunDeclRule());
	        }
       		add(
       			$current, 
       			"comma",
        		lv_comma_12_0, 
        		"Comma");
	        afterParserOrEnumRuleCall();
	    }

)
)(
(
		{ 
	        newCompositeNode(grammarAccess.getFunDeclAccess().getDeclDeclParserRuleCall_4_1_1_1_1_0()); 
	    }
		lv_decl_13_0=ruleDecl		{
	        if ($current==null) {
	            $current = createModelElementForParent(grammarAccess.getFunDeclRule());
	        }
       		add(
       			$current, 
       			"decl",
        		lv_decl_13_0, 
        		"Decl");
	        afterParserOrEnumRuleCall();
	    }

)
))*)?(
(
		{ 
	        newCompositeNode(grammarAccess.getFunDeclAccess().getRightPRightParenthesisParserRuleCall_4_1_2_0()); 
	    }
		lv_rightP_14_0=ruleRightParenthesis		{
	        if ($current==null) {
	            $current = createModelElementForParent(grammarAccess.getFunDeclRule());
	        }
       		set(
       			$current, 
       			"rightP",
        		lv_rightP_14_0, 
        		"RightParenthesis");
	        afterParserOrEnumRuleCall();
	    }

)
)))(
(
		{ 
	        newCompositeNode(grammarAccess.getFunDeclAccess().getColonColonParserRuleCall_5_0()); 
	    }
		lv_colon_15_0=ruleColon		{
	        if ($current==null) {
	            $current = createModelElementForParent(grammarAccess.getFunDeclRule());
	        }
       		set(
       			$current, 
       			"colon",
        		lv_colon_15_0, 
        		"Colon");
	        afterParserOrEnumRuleCall();
	    }

)
)(
(
		{ 
	        newCompositeNode(grammarAccess.getFunDeclAccess().getExprExpressionParserRuleCall_6_0()); 
	    }
		lv_expr_16_0=ruleExpression		{
	        if ($current==null) {
	            $current = createModelElementForParent(grammarAccess.getFunDeclRule());
	        }
       		set(
       			$current, 
       			"expr",
        		lv_expr_16_0, 
        		"Expression");
	        afterParserOrEnumRuleCall();
	    }

)
)(
(
		{ 
	        newCompositeNode(grammarAccess.getFunDeclAccess().getBlockBlockParserRuleCall_7_0()); 
	    }
		lv_block_17_0=ruleBlock		{
	        if ($current==null) {
	            $current = createModelElementForParent(grammarAccess.getFunDeclRule());
	        }
       		set(
       			$current, 
       			"block",
        		lv_block_17_0, 
        		"Block");
	        afterParserOrEnumRuleCall();
	    }

)
))
;





// Entry rule entryRuleFunDeclWParam
entryRuleFunDeclWParam returns [EObject current=null] 
	:
	{ newCompositeNode(grammarAccess.getFunDeclWParamRule()); }
	 iv_ruleFunDeclWParam=ruleFunDeclWParam 
	 { $current=$iv_ruleFunDeclWParam.current; } 
	 EOF 
;

// Rule FunDeclWParam
ruleFunDeclWParam returns [EObject current=null] 
    @init { enterRule(); 
    }
    @after { leaveRule(); }:
((	otherlv_0='private' 
    {
    	newLeafNode(otherlv_0, grammarAccess.getFunDeclWParamAccess().getPrivateKeyword_0());
    }
)?	otherlv_1='fun' 
    {
    	newLeafNode(otherlv_1, grammarAccess.getFunDeclWParamAccess().getFunKeyword_1());
    }
((
(
		{ 
	        newCompositeNode(grammarAccess.getFunDeclWParamAccess().getRefRefParserRuleCall_2_0_0()); 
	    }
		lv_ref_2_0=ruleRef		{
	        if ($current==null) {
	            $current = createModelElementForParent(grammarAccess.getFunDeclWParamRule());
	        }
       		set(
       			$current, 
       			"ref",
        		lv_ref_2_0, 
        		"Ref");
	        afterParserOrEnumRuleCall();
	    }

)
)(
(
		{ 
	        newCompositeNode(grammarAccess.getFunDeclWParamAccess().getDotDotParserRuleCall_2_1_0()); 
	    }
		lv_dot_3_0=ruleDot		{
	        if ($current==null) {
	            $current = createModelElementForParent(grammarAccess.getFunDeclWParamRule());
	        }
       		set(
       			$current, 
       			"dot",
        		lv_dot_3_0, 
        		"Dot");
	        afterParserOrEnumRuleCall();
	    }

)
))?(
(
		{ 
	        newCompositeNode(grammarAccess.getFunDeclWParamAccess().getNameFunctionNamewParamParserRuleCall_3_0()); 
	    }
		lv_name_4_0=ruleFunctionNamewParam		{
	        if ($current==null) {
	            $current = createModelElementForParent(grammarAccess.getFunDeclWParamRule());
	        }
       		set(
       			$current, 
       			"name",
        		lv_name_4_0, 
        		"FunctionNamewParam");
	        afterParserOrEnumRuleCall();
	    }

)
)(
(
		{ 
	        newCompositeNode(grammarAccess.getFunDeclWParamAccess().getColonColonParserRuleCall_4_0()); 
	    }
		lv_colon_5_0=ruleColon		{
	        if ($current==null) {
	            $current = createModelElementForParent(grammarAccess.getFunDeclWParamRule());
	        }
       		set(
       			$current, 
       			"colon",
        		lv_colon_5_0, 
        		"Colon");
	        afterParserOrEnumRuleCall();
	    }

)
)(
(
		{ 
	        newCompositeNode(grammarAccess.getFunDeclWParamAccess().getExprExpressionParserRuleCall_5_0()); 
	    }
		lv_expr_6_0=ruleExpression		{
	        if ($current==null) {
	            $current = createModelElementForParent(grammarAccess.getFunDeclWParamRule());
	        }
       		set(
       			$current, 
       			"expr",
        		lv_expr_6_0, 
        		"Expression");
	        afterParserOrEnumRuleCall();
	    }

)
)(
(
		{ 
	        newCompositeNode(grammarAccess.getFunDeclWParamAccess().getBlockBlockParserRuleCall_6_0()); 
	    }
		lv_block_7_0=ruleBlock		{
	        if ($current==null) {
	            $current = createModelElementForParent(grammarAccess.getFunDeclWParamRule());
	        }
       		set(
       			$current, 
       			"block",
        		lv_block_7_0, 
        		"Block");
	        afterParserOrEnumRuleCall();
	    }

)
))
;





// Entry rule entryRulePredDecl
entryRulePredDecl returns [EObject current=null] 
	:
	{ newCompositeNode(grammarAccess.getPredDeclRule()); }
	 iv_rulePredDecl=rulePredDecl 
	 { $current=$iv_rulePredDecl.current; } 
	 EOF 
;

// Rule PredDecl
rulePredDecl returns [EObject current=null] 
    @init { enterRule(); 
    }
    @after { leaveRule(); }:
((	otherlv_0='private' 
    {
    	newLeafNode(otherlv_0, grammarAccess.getPredDeclAccess().getPrivateKeyword_0());
    }
)?	otherlv_1='pred' 
    {
    	newLeafNode(otherlv_1, grammarAccess.getPredDeclAccess().getPredKeyword_1());
    }
((
(
		{ 
	        newCompositeNode(grammarAccess.getPredDeclAccess().getRefRefParserRuleCall_2_0_0()); 
	    }
		lv_ref_2_0=ruleRef		{
	        if ($current==null) {
	            $current = createModelElementForParent(grammarAccess.getPredDeclRule());
	        }
       		set(
       			$current, 
       			"ref",
        		lv_ref_2_0, 
        		"Ref");
	        afterParserOrEnumRuleCall();
	    }

)
)(
(
		{ 
	        newCompositeNode(grammarAccess.getPredDeclAccess().getDotDotParserRuleCall_2_1_0()); 
	    }
		lv_dot_3_0=ruleDot		{
	        if ($current==null) {
	            $current = createModelElementForParent(grammarAccess.getPredDeclRule());
	        }
       		set(
       			$current, 
       			"dot",
        		lv_dot_3_0, 
        		"Dot");
	        afterParserOrEnumRuleCall();
	    }

)
))?(
(
		{ 
	        newCompositeNode(grammarAccess.getPredDeclAccess().getNamePredicateNameParserRuleCall_3_0()); 
	    }
		lv_name_4_0=rulePredicateName		{
	        if ($current==null) {
	            $current = createModelElementForParent(grammarAccess.getPredDeclRule());
	        }
       		set(
       			$current, 
       			"name",
        		lv_name_4_0, 
        		"PredicateName");
	        afterParserOrEnumRuleCall();
	    }

)
)(((
(
		{ 
	        newCompositeNode(grammarAccess.getPredDeclAccess().getLeftSLeftSquareBracketKeywordParserRuleCall_4_0_0_0()); 
	    }
		lv_leftS_5_0=ruleLeftSquareBracketKeyword		{
	        if ($current==null) {
	            $current = createModelElementForParent(grammarAccess.getPredDeclRule());
	        }
       		set(
       			$current, 
       			"leftS",
        		lv_leftS_5_0, 
        		"LeftSquareBracketKeyword");
	        afterParserOrEnumRuleCall();
	    }

)
)((
(
		{ 
	        newCompositeNode(grammarAccess.getPredDeclAccess().getParamParamParserRuleCall_4_0_1_0_0()); 
	    }
		lv_param_6_0=ruleParam		{
	        if ($current==null) {
	            $current = createModelElementForParent(grammarAccess.getPredDeclRule());
	        }
       		add(
       			$current, 
       			"param",
        		lv_param_6_0, 
        		"Param");
	        afterParserOrEnumRuleCall();
	    }

)
)((
(
		{ 
	        newCompositeNode(grammarAccess.getPredDeclAccess().getCommaCommaParserRuleCall_4_0_1_1_0_0()); 
	    }
		lv_comma_7_0=ruleComma		{
	        if ($current==null) {
	            $current = createModelElementForParent(grammarAccess.getPredDeclRule());
	        }
       		add(
       			$current, 
       			"comma",
        		lv_comma_7_0, 
        		"Comma");
	        afterParserOrEnumRuleCall();
	    }

)
)(
(
		{ 
	        newCompositeNode(grammarAccess.getPredDeclAccess().getParamParamParserRuleCall_4_0_1_1_1_0()); 
	    }
		lv_param_8_0=ruleParam		{
	        if ($current==null) {
	            $current = createModelElementForParent(grammarAccess.getPredDeclRule());
	        }
       		add(
       			$current, 
       			"param",
        		lv_param_8_0, 
        		"Param");
	        afterParserOrEnumRuleCall();
	    }

)
))*)?(
(
		{ 
	        newCompositeNode(grammarAccess.getPredDeclAccess().getRightSRightSquareBracketKeywordParserRuleCall_4_0_2_0()); 
	    }
		lv_rightS_9_0=ruleRightSquareBracketKeyword		{
	        if ($current==null) {
	            $current = createModelElementForParent(grammarAccess.getPredDeclRule());
	        }
       		set(
       			$current, 
       			"rightS",
        		lv_rightS_9_0, 
        		"RightSquareBracketKeyword");
	        afterParserOrEnumRuleCall();
	    }

)
))
    |((
(
		{ 
	        newCompositeNode(grammarAccess.getPredDeclAccess().getLeftPLeftParenthesisParserRuleCall_4_1_0_0()); 
	    }
		lv_leftP_10_0=ruleLeftParenthesis		{
	        if ($current==null) {
	            $current = createModelElementForParent(grammarAccess.getPredDeclRule());
	        }
       		set(
       			$current, 
       			"leftP",
        		lv_leftP_10_0, 
        		"LeftParenthesis");
	        afterParserOrEnumRuleCall();
	    }

)
)((
(
		{ 
	        newCompositeNode(grammarAccess.getPredDeclAccess().getParamParamParserRuleCall_4_1_1_0_0()); 
	    }
		lv_param_11_0=ruleParam		{
	        if ($current==null) {
	            $current = createModelElementForParent(grammarAccess.getPredDeclRule());
	        }
       		add(
       			$current, 
       			"param",
        		lv_param_11_0, 
        		"Param");
	        afterParserOrEnumRuleCall();
	    }

)
)((
(
		{ 
	        newCompositeNode(grammarAccess.getPredDeclAccess().getCommaCommaParserRuleCall_4_1_1_1_0_0()); 
	    }
		lv_comma_12_0=ruleComma		{
	        if ($current==null) {
	            $current = createModelElementForParent(grammarAccess.getPredDeclRule());
	        }
       		add(
       			$current, 
       			"comma",
        		lv_comma_12_0, 
        		"Comma");
	        afterParserOrEnumRuleCall();
	    }

)
)(
(
		{ 
	        newCompositeNode(grammarAccess.getPredDeclAccess().getParamParamParserRuleCall_4_1_1_1_1_0()); 
	    }
		lv_param_13_0=ruleParam		{
	        if ($current==null) {
	            $current = createModelElementForParent(grammarAccess.getPredDeclRule());
	        }
       		add(
       			$current, 
       			"param",
        		lv_param_13_0, 
        		"Param");
	        afterParserOrEnumRuleCall();
	    }

)
))*)?(
(
		{ 
	        newCompositeNode(grammarAccess.getPredDeclAccess().getRightPRightParenthesisParserRuleCall_4_1_2_0()); 
	    }
		lv_rightP_14_0=ruleRightParenthesis		{
	        if ($current==null) {
	            $current = createModelElementForParent(grammarAccess.getPredDeclRule());
	        }
       		set(
       			$current, 
       			"rightP",
        		lv_rightP_14_0, 
        		"RightParenthesis");
	        afterParserOrEnumRuleCall();
	    }

)
)))?(
(
		{ 
	        newCompositeNode(grammarAccess.getPredDeclAccess().getBlockBlockParserRuleCall_5_0()); 
	    }
		lv_block_15_0=ruleBlock		{
	        if ($current==null) {
	            $current = createModelElementForParent(grammarAccess.getPredDeclRule());
	        }
       		set(
       			$current, 
       			"block",
        		lv_block_15_0, 
        		"Block");
	        afterParserOrEnumRuleCall();
	    }

)
))
;





// Entry rule entryRuleRunDecl
entryRuleRunDecl returns [EObject current=null] 
	:
	{ newCompositeNode(grammarAccess.getRunDeclRule()); }
	 iv_ruleRunDecl=ruleRunDecl 
	 { $current=$iv_ruleRunDecl.current; } 
	 EOF 
;

// Rule RunDecl
ruleRunDecl returns [EObject current=null] 
    @init { enterRule(); 
    }
    @after { leaveRule(); }:
(((
(
		{ 
	        newCompositeNode(grammarAccess.getRunDeclAccess().getRunNameAliasParserRuleCall_0_0_0()); 
	    }
		lv_runName_0_0=ruleAlias		{
	        if ($current==null) {
	            $current = createModelElementForParent(grammarAccess.getRunDeclRule());
	        }
       		set(
       			$current, 
       			"runName",
        		lv_runName_0_0, 
        		"Alias");
	        afterParserOrEnumRuleCall();
	    }

)
)	otherlv_1=':' 
    {
    	newLeafNode(otherlv_1, grammarAccess.getRunDeclAccess().getColonKeyword_0_1());
    }
)?	otherlv_2='run' 
    {
    	newLeafNode(otherlv_2, grammarAccess.getRunDeclAccess().getRunKeyword_1());
    }
((
(
		{ 
		  /* */ 
		}
		{
			if ($current==null) {
	            $current = createModelElement(grammarAccess.getRunDeclRule());
	        }
        }
	otherlv_3=RULE_ID
	{
		newLeafNode(otherlv_3, grammarAccess.getRunDeclAccess().getNamePredicateNameCrossReference_2_0_0()); 
	}

)
)
    |(
(
		{ 
	        newCompositeNode(grammarAccess.getRunDeclAccess().getBlockBlockParserRuleCall_2_1_0()); 
	    }
		lv_block_4_0=ruleBlock		{
	        if ($current==null) {
	            $current = createModelElementForParent(grammarAccess.getRunDeclRule());
	        }
       		set(
       			$current, 
       			"block",
        		lv_block_4_0, 
        		"Block");
	        afterParserOrEnumRuleCall();
	    }

)
))(
(
		{ 
	        newCompositeNode(grammarAccess.getRunDeclAccess().getScopeScopeParserRuleCall_3_0()); 
	    }
		lv_scope_5_0=ruleScope		{
	        if ($current==null) {
	            $current = createModelElementForParent(grammarAccess.getRunDeclRule());
	        }
       		set(
       			$current, 
       			"scope",
        		lv_scope_5_0, 
        		"Scope");
	        afterParserOrEnumRuleCall();
	    }

)
))
;





// Entry rule entryRuleCheckDecl
entryRuleCheckDecl returns [EObject current=null] 
	:
	{ newCompositeNode(grammarAccess.getCheckDeclRule()); }
	 iv_ruleCheckDecl=ruleCheckDecl 
	 { $current=$iv_ruleCheckDecl.current; } 
	 EOF 
;

// Rule CheckDecl
ruleCheckDecl returns [EObject current=null] 
    @init { enterRule(); 
    }
    @after { leaveRule(); }:
(((
(
		{ 
	        newCompositeNode(grammarAccess.getCheckDeclAccess().getCheckNameAliasParserRuleCall_0_0_0()); 
	    }
		lv_checkName_0_0=ruleAlias		{
	        if ($current==null) {
	            $current = createModelElementForParent(grammarAccess.getCheckDeclRule());
	        }
       		set(
       			$current, 
       			"checkName",
        		lv_checkName_0_0, 
        		"Alias");
	        afterParserOrEnumRuleCall();
	    }

)
)	otherlv_1=':' 
    {
    	newLeafNode(otherlv_1, grammarAccess.getCheckDeclAccess().getColonKeyword_0_1());
    }
)?	otherlv_2='check' 
    {
    	newLeafNode(otherlv_2, grammarAccess.getCheckDeclAccess().getCheckKeyword_1());
    }
((
(
		{ 
		  /* */ 
		}
		{
			if ($current==null) {
	            $current = createModelElement(grammarAccess.getCheckDeclRule());
	        }
        }
	otherlv_3=RULE_ID
	{
		newLeafNode(otherlv_3, grammarAccess.getCheckDeclAccess().getNameAssertionNameCrossReference_2_0_0()); 
	}

)
)
    |(
(
		{ 
	        newCompositeNode(grammarAccess.getCheckDeclAccess().getBlockBlockParserRuleCall_2_1_0()); 
	    }
		lv_block_4_0=ruleBlock		{
	        if ($current==null) {
	            $current = createModelElementForParent(grammarAccess.getCheckDeclRule());
	        }
       		set(
       			$current, 
       			"block",
        		lv_block_4_0, 
        		"Block");
	        afterParserOrEnumRuleCall();
	    }

)
))(
(
		{ 
	        newCompositeNode(grammarAccess.getCheckDeclAccess().getScopeScopeParserRuleCall_3_0()); 
	    }
		lv_scope_5_0=ruleScope		{
	        if ($current==null) {
	            $current = createModelElementForParent(grammarAccess.getCheckDeclRule());
	        }
       		set(
       			$current, 
       			"scope",
        		lv_scope_5_0, 
        		"Scope");
	        afterParserOrEnumRuleCall();
	    }

)
))
;





// Entry rule entryRuleScope
entryRuleScope returns [EObject current=null] 
	:
	{ newCompositeNode(grammarAccess.getScopeRule()); }
	 iv_ruleScope=ruleScope 
	 { $current=$iv_ruleScope.current; } 
	 EOF 
;

// Rule Scope
ruleScope returns [EObject current=null] 
    @init { enterRule(); 
    }
    @after { leaveRule(); }:
(((
	{ 
	  /* */ 
	}
    {
        $current = forceCreateModelElement(
            grammarAccess.getScopeAccess().getScopeAction_0_0(),
            $current);
    }
)(
(
		lv_for_1_0=	'for' 
    {
        newLeafNode(lv_for_1_0, grammarAccess.getScopeAccess().getForForKeyword_0_1_0());
    }
 
	    {
	        if ($current==null) {
	            $current = createModelElement(grammarAccess.getScopeRule());
	        }
       		setWithLastConsumed($current, "for", lv_for_1_0, "for");
	    }

)
)(
(
		lv_value_2_0=RULE_INT
		{
			newLeafNode(lv_value_2_0, grammarAccess.getScopeAccess().getValueINTTerminalRuleCall_0_2_0()); 
		}
		{
	        if ($current==null) {
	            $current = createModelElement(grammarAccess.getScopeRule());
	        }
       		setWithLastConsumed(
       			$current, 
       			"value",
        		lv_value_2_0, 
        		"INT");
	    }

)
)(
(
		{ 
	        newCompositeNode(grammarAccess.getScopeAccess().getExpectExpectationParserRuleCall_0_3_0()); 
	    }
		lv_expect_3_0=ruleExpectation		{
	        if ($current==null) {
	            $current = createModelElementForParent(grammarAccess.getScopeRule());
	        }
       		set(
       			$current, 
       			"expect",
        		lv_expect_3_0, 
        		"Expectation");
	        afterParserOrEnumRuleCall();
	    }

)
)?)
    |((
	{ 
	  /* */ 
	}
    {
        $current = forceCreateModelElement(
            grammarAccess.getScopeAccess().getScopeAction_1_0(),
            $current);
    }
)(
(
		lv_for_5_0=	'for' 
    {
        newLeafNode(lv_for_5_0, grammarAccess.getScopeAccess().getForForKeyword_1_1_0());
    }
 
	    {
	        if ($current==null) {
	            $current = createModelElement(grammarAccess.getScopeRule());
	        }
       		setWithLastConsumed($current, "for", lv_for_5_0, "for");
	    }

)
)(
(
		lv_value_6_0=RULE_INT
		{
			newLeafNode(lv_value_6_0, grammarAccess.getScopeAccess().getValueINTTerminalRuleCall_1_2_0()); 
		}
		{
	        if ($current==null) {
	            $current = createModelElement(grammarAccess.getScopeRule());
	        }
       		setWithLastConsumed(
       			$current, 
       			"value",
        		lv_value_6_0, 
        		"INT");
	    }

)
)(
(
		lv_but_7_0=	'but' 
    {
        newLeafNode(lv_but_7_0, grammarAccess.getScopeAccess().getButButKeyword_1_3_0());
    }
 
	    {
	        if ($current==null) {
	            $current = createModelElement(grammarAccess.getScopeRule());
	        }
       		setWithLastConsumed($current, "but", lv_but_7_0, "but");
	    }

)
)(
(
		{ 
	        newCompositeNode(grammarAccess.getScopeAccess().getTypescopeTypescopeParserRuleCall_1_4_0()); 
	    }
		lv_typescope_8_0=ruleTypescope		{
	        if ($current==null) {
	            $current = createModelElementForParent(grammarAccess.getScopeRule());
	        }
       		add(
       			$current, 
       			"typescope",
        		lv_typescope_8_0, 
        		"Typescope");
	        afterParserOrEnumRuleCall();
	    }

)
)((
(
		{ 
	        newCompositeNode(grammarAccess.getScopeAccess().getCommaCommaParserRuleCall_1_5_0_0()); 
	    }
		lv_comma_9_0=ruleComma		{
	        if ($current==null) {
	            $current = createModelElementForParent(grammarAccess.getScopeRule());
	        }
       		add(
       			$current, 
       			"comma",
        		lv_comma_9_0, 
        		"Comma");
	        afterParserOrEnumRuleCall();
	    }

)
)(
(
		{ 
	        newCompositeNode(grammarAccess.getScopeAccess().getTypescopeTypescopeParserRuleCall_1_5_1_0()); 
	    }
		lv_typescope_10_0=ruleTypescope		{
	        if ($current==null) {
	            $current = createModelElementForParent(grammarAccess.getScopeRule());
	        }
       		add(
       			$current, 
       			"typescope",
        		lv_typescope_10_0, 
        		"Typescope");
	        afterParserOrEnumRuleCall();
	    }

)
))*(
(
		{ 
	        newCompositeNode(grammarAccess.getScopeAccess().getExpectExpectationParserRuleCall_1_6_0()); 
	    }
		lv_expect_11_0=ruleExpectation		{
	        if ($current==null) {
	            $current = createModelElementForParent(grammarAccess.getScopeRule());
	        }
       		set(
       			$current, 
       			"expect",
        		lv_expect_11_0, 
        		"Expectation");
	        afterParserOrEnumRuleCall();
	    }

)
)?)
    |((
	{ 
	  /* */ 
	}
    {
        $current = forceCreateModelElement(
            grammarAccess.getScopeAccess().getScopeAction_2_0(),
            $current);
    }
)(
(
		lv_for_13_0=	'for' 
    {
        newLeafNode(lv_for_13_0, grammarAccess.getScopeAccess().getForForKeyword_2_1_0());
    }
 
	    {
	        if ($current==null) {
	            $current = createModelElement(grammarAccess.getScopeRule());
	        }
       		setWithLastConsumed($current, "for", lv_for_13_0, "for");
	    }

)
)(
(
		{ 
	        newCompositeNode(grammarAccess.getScopeAccess().getTypescopeTypescopeParserRuleCall_2_2_0()); 
	    }
		lv_typescope_14_0=ruleTypescope		{
	        if ($current==null) {
	            $current = createModelElementForParent(grammarAccess.getScopeRule());
	        }
       		add(
       			$current, 
       			"typescope",
        		lv_typescope_14_0, 
        		"Typescope");
	        afterParserOrEnumRuleCall();
	    }

)
)((
(
		{ 
	        newCompositeNode(grammarAccess.getScopeAccess().getCommaCommaParserRuleCall_2_3_0_0()); 
	    }
		lv_comma_15_0=ruleComma		{
	        if ($current==null) {
	            $current = createModelElementForParent(grammarAccess.getScopeRule());
	        }
       		add(
       			$current, 
       			"comma",
        		lv_comma_15_0, 
        		"Comma");
	        afterParserOrEnumRuleCall();
	    }

)
)(
(
		{ 
	        newCompositeNode(grammarAccess.getScopeAccess().getTypescopeTypescopeParserRuleCall_2_3_1_0()); 
	    }
		lv_typescope_16_0=ruleTypescope		{
	        if ($current==null) {
	            $current = createModelElementForParent(grammarAccess.getScopeRule());
	        }
       		add(
       			$current, 
       			"typescope",
        		lv_typescope_16_0, 
        		"Typescope");
	        afterParserOrEnumRuleCall();
	    }

)
))*(
(
		{ 
	        newCompositeNode(grammarAccess.getScopeAccess().getExpectExpectationParserRuleCall_2_4_0()); 
	    }
		lv_expect_17_0=ruleExpectation		{
	        if ($current==null) {
	            $current = createModelElementForParent(grammarAccess.getScopeRule());
	        }
       		set(
       			$current, 
       			"expect",
        		lv_expect_17_0, 
        		"Expectation");
	        afterParserOrEnumRuleCall();
	    }

)
)?)
    |((
	{ 
	  /* */ 
	}
    {
        $current = forceCreateModelElement(
            grammarAccess.getScopeAccess().getScopeAction_3_0(),
            $current);
    }
)(
(
		{ 
	        newCompositeNode(grammarAccess.getScopeAccess().getExpectExpectationParserRuleCall_3_1_0()); 
	    }
		lv_expect_19_0=ruleExpectation		{
	        if ($current==null) {
	            $current = createModelElementForParent(grammarAccess.getScopeRule());
	        }
       		set(
       			$current, 
       			"expect",
        		lv_expect_19_0, 
        		"Expectation");
	        afterParserOrEnumRuleCall();
	    }

)
)?))
;





// Entry rule entryRuleExpectation
entryRuleExpectation returns [EObject current=null] 
	:
	{ newCompositeNode(grammarAccess.getExpectationRule()); }
	 iv_ruleExpectation=ruleExpectation 
	 { $current=$iv_ruleExpectation.current; } 
	 EOF 
;

// Rule Expectation
ruleExpectation returns [EObject current=null] 
    @init { enterRule(); 
    }
    @after { leaveRule(); }:
((
(
		lv_expect_0_0=	'expect' 
    {
        newLeafNode(lv_expect_0_0, grammarAccess.getExpectationAccess().getExpectExpectKeyword_0_0());
    }
 
	    {
	        if ($current==null) {
	            $current = createModelElement(grammarAccess.getExpectationRule());
	        }
       		setWithLastConsumed($current, "expect", lv_expect_0_0, "expect");
	    }

)
)(
(
		lv_value_1_0=RULE_INT
		{
			newLeafNode(lv_value_1_0, grammarAccess.getExpectationAccess().getValueINTTerminalRuleCall_1_0()); 
		}
		{
	        if ($current==null) {
	            $current = createModelElement(grammarAccess.getExpectationRule());
	        }
       		setWithLastConsumed(
       			$current, 
       			"value",
        		lv_value_1_0, 
        		"INT");
	    }

)
))
;





// Entry rule entryRuleTypescope
entryRuleTypescope returns [EObject current=null] 
	:
	{ newCompositeNode(grammarAccess.getTypescopeRule()); }
	 iv_ruleTypescope=ruleTypescope 
	 { $current=$iv_ruleTypescope.current; } 
	 EOF 
;

// Rule Typescope
ruleTypescope returns [EObject current=null] 
    @init { enterRule(); 
    }
    @after { leaveRule(); }:
((
	{ 
	  /* */ 
	}
    {
        $current = forceCreateModelElement(
            grammarAccess.getTypescopeAccess().getTypescopeAction_0(),
            $current);
    }
)(
(
		lv_exactly_1_0=	'exactly' 
    {
        newLeafNode(lv_exactly_1_0, grammarAccess.getTypescopeAccess().getExactlyExactlyKeyword_1_0());
    }
 
	    {
	        if ($current==null) {
	            $current = createModelElement(grammarAccess.getTypescopeRule());
	        }
       		setWithLastConsumed($current, "exactly", lv_exactly_1_0, "exactly");
	    }

)
)?(
(
		lv_value_2_0=RULE_INT
		{
			newLeafNode(lv_value_2_0, grammarAccess.getTypescopeAccess().getValueINTTerminalRuleCall_2_0()); 
		}
		{
	        if ($current==null) {
	            $current = createModelElement(grammarAccess.getTypescopeRule());
	        }
       		setWithLastConsumed(
       			$current, 
       			"value",
        		lv_value_2_0, 
        		"INT");
	    }

)
)(((
(
		{ 
		  /* */ 
		}
		{
			if ($current==null) {
	            $current = createModelElement(grammarAccess.getTypescopeRule());
	        }
        }
	otherlv_3=RULE_ID
	{
		newLeafNode(otherlv_3, grammarAccess.getTypescopeAccess().getAsnameAsNameCrossReference_3_0_0_0()); 
	}

)
)
    |(
(
		lv_prev_4_0=	'this' 
    {
        newLeafNode(lv_prev_4_0, grammarAccess.getTypescopeAccess().getPrevThisKeyword_3_0_1_0());
    }
 
	    {
	        if ($current==null) {
	            $current = createModelElement(grammarAccess.getTypescopeRule());
	        }
       		setWithLastConsumed($current, "prev", lv_prev_4_0, "this");
	    }

)
))(
(
		lv_sl_5_0=	'/' 
    {
        newLeafNode(lv_sl_5_0, grammarAccess.getTypescopeAccess().getSlSolidusKeyword_3_1_0());
    }
 
	    {
	        if ($current==null) {
	            $current = createModelElement(grammarAccess.getTypescopeRule());
	        }
       		setWithLastConsumed($current, "sl", lv_sl_5_0, "/");
	    }

)
))?((
(
		{ 
		  /* */ 
		}
		{
			if ($current==null) {
	            $current = createModelElement(grammarAccess.getTypescopeRule());
	        }
        }
	otherlv_6=RULE_ID
	{
		newLeafNode(otherlv_6, grammarAccess.getTypescopeAccess().getNameReferencesNameCrossReference_4_0_0()); 
	}

)
)
    |((
(
		lv_post_7_0=	'int' 
    {
        newLeafNode(lv_post_7_0, grammarAccess.getTypescopeAccess().getPostIntKeyword_4_1_0_0());
    }
 
	    {
	        if ($current==null) {
	            $current = createModelElement(grammarAccess.getTypescopeRule());
	        }
       		setWithLastConsumed($current, "post", lv_post_7_0, "int");
	    }

)
)
    |(
(
		lv_post_8_0=	'seq' 
    {
        newLeafNode(lv_post_8_0, grammarAccess.getTypescopeAccess().getPostSeqKeyword_4_1_1_0());
    }
 
	    {
	        if ($current==null) {
	            $current = createModelElement(grammarAccess.getTypescopeRule());
	        }
       		setWithLastConsumed($current, "post", lv_post_8_0, "seq");
	    }

)
))))
;





// Entry rule entryRuleEnumDecl
entryRuleEnumDecl returns [EObject current=null] 
	:
	{ newCompositeNode(grammarAccess.getEnumDeclRule()); }
	 iv_ruleEnumDecl=ruleEnumDecl 
	 { $current=$iv_ruleEnumDecl.current; } 
	 EOF 
;

// Rule EnumDecl
ruleEnumDecl returns [EObject current=null] 
    @init { enterRule(); 
    }
    @after { leaveRule(); }:
((
(
		{ 
	        newCompositeNode(grammarAccess.getEnumDeclAccess().getEnumNameEnumNameParserRuleCall_0_0()); 
	    }
		lv_enumName_0_0=ruleEnumName		{
	        if ($current==null) {
	            $current = createModelElementForParent(grammarAccess.getEnumDeclRule());
	        }
       		set(
       			$current, 
       			"enumName",
        		lv_enumName_0_0, 
        		"EnumName");
	        afterParserOrEnumRuleCall();
	    }

)
)(
(
		{ 
	        newCompositeNode(grammarAccess.getEnumDeclAccess().getLeftCLeftCurlyBracketParserRuleCall_1_0()); 
	    }
		lv_leftC_1_0=ruleLeftCurlyBracket		{
	        if ($current==null) {
	            $current = createModelElementForParent(grammarAccess.getEnumDeclRule());
	        }
       		set(
       			$current, 
       			"leftC",
        		lv_leftC_1_0, 
        		"LeftCurlyBracket");
	        afterParserOrEnumRuleCall();
	    }

)
)(
(
		{ 
	        newCompositeNode(grammarAccess.getEnumDeclAccess().getPropertyEnumEnumPropertyNameParserRuleCall_2_0()); 
	    }
		lv_propertyEnum_2_0=ruleEnumPropertyName		{
	        if ($current==null) {
	            $current = createModelElementForParent(grammarAccess.getEnumDeclRule());
	        }
       		add(
       			$current, 
       			"propertyEnum",
        		lv_propertyEnum_2_0, 
        		"EnumPropertyName");
	        afterParserOrEnumRuleCall();
	    }

)
)((
(
		{ 
	        newCompositeNode(grammarAccess.getEnumDeclAccess().getCommaCommaParserRuleCall_3_0_0()); 
	    }
		lv_comma_3_0=ruleComma		{
	        if ($current==null) {
	            $current = createModelElementForParent(grammarAccess.getEnumDeclRule());
	        }
       		add(
       			$current, 
       			"comma",
        		lv_comma_3_0, 
        		"Comma");
	        afterParserOrEnumRuleCall();
	    }

)
)(
(
		{ 
	        newCompositeNode(grammarAccess.getEnumDeclAccess().getPropertyEnumEnumPropertyNameParserRuleCall_3_1_0()); 
	    }
		lv_propertyEnum_4_0=ruleEnumPropertyName		{
	        if ($current==null) {
	            $current = createModelElementForParent(grammarAccess.getEnumDeclRule());
	        }
       		add(
       			$current, 
       			"propertyEnum",
        		lv_propertyEnum_4_0, 
        		"EnumPropertyName");
	        afterParserOrEnumRuleCall();
	    }

)
))*(
(
		{ 
	        newCompositeNode(grammarAccess.getEnumDeclAccess().getRightCRightCurlyBracketParserRuleCall_4_0()); 
	    }
		lv_rightC_5_0=ruleRightCurlyBracket		{
	        if ($current==null) {
	            $current = createModelElementForParent(grammarAccess.getEnumDeclRule());
	        }
       		set(
       			$current, 
       			"rightC",
        		lv_rightC_5_0, 
        		"RightCurlyBracket");
	        afterParserOrEnumRuleCall();
	    }

)
))
;





// Entry rule entryRuleLetOutDecl
entryRuleLetOutDecl returns [EObject current=null] 
	:
	{ newCompositeNode(grammarAccess.getLetOutDeclRule()); }
	 iv_ruleLetOutDecl=ruleLetOutDecl 
	 { $current=$iv_ruleLetOutDecl.current; } 
	 EOF 
;

// Rule LetOutDecl
ruleLetOutDecl returns [EObject current=null] 
    @init { enterRule(); 
    }
    @after { leaveRule(); }:
((
(
		{ 
	        newCompositeNode(grammarAccess.getLetOutDeclAccess().getNameLetNameParserRuleCall_0_0()); 
	    }
		lv_name_0_0=ruleLetName		{
	        if ($current==null) {
	            $current = createModelElementForParent(grammarAccess.getLetOutDeclRule());
	        }
       		set(
       			$current, 
       			"name",
        		lv_name_0_0, 
        		"LetName");
	        afterParserOrEnumRuleCall();
	    }

)
)((
(
		{ 
	        newCompositeNode(grammarAccess.getLetOutDeclAccess().getLeftSLeftSquareBracketKeywordParserRuleCall_1_0_0()); 
	    }
		lv_leftS_1_0=ruleLeftSquareBracketKeyword		{
	        if ($current==null) {
	            $current = createModelElementForParent(grammarAccess.getLetOutDeclRule());
	        }
       		set(
       			$current, 
       			"leftS",
        		lv_leftS_1_0, 
        		"LeftSquareBracketKeyword");
	        afterParserOrEnumRuleCall();
	    }

)
)((
(
		{ 
	        newCompositeNode(grammarAccess.getLetOutDeclAccess().getNameRefReferencesNameParserRuleCall_1_1_0_0()); 
	    }
		lv_nameRef_2_0=ruleReferencesName		{
	        if ($current==null) {
	            $current = createModelElementForParent(grammarAccess.getLetOutDeclRule());
	        }
       		add(
       			$current, 
       			"nameRef",
        		lv_nameRef_2_0, 
        		"ReferencesName");
	        afterParserOrEnumRuleCall();
	    }

)
)((
(
		{ 
	        newCompositeNode(grammarAccess.getLetOutDeclAccess().getCommaCommaParserRuleCall_1_1_1_0_0()); 
	    }
		lv_comma_3_0=ruleComma		{
	        if ($current==null) {
	            $current = createModelElementForParent(grammarAccess.getLetOutDeclRule());
	        }
       		add(
       			$current, 
       			"comma",
        		lv_comma_3_0, 
        		"Comma");
	        afterParserOrEnumRuleCall();
	    }

)
)(
(
		{ 
	        newCompositeNode(grammarAccess.getLetOutDeclAccess().getNameRefReferencesNameParserRuleCall_1_1_1_1_0()); 
	    }
		lv_nameRef_4_0=ruleReferencesName		{
	        if ($current==null) {
	            $current = createModelElementForParent(grammarAccess.getLetOutDeclRule());
	        }
       		add(
       			$current, 
       			"nameRef",
        		lv_nameRef_4_0, 
        		"ReferencesName");
	        afterParserOrEnumRuleCall();
	    }

)
))*)?(
(
		{ 
	        newCompositeNode(grammarAccess.getLetOutDeclAccess().getRightSRightSquareBracketKeywordParserRuleCall_1_2_0()); 
	    }
		lv_rightS_5_0=ruleRightSquareBracketKeyword		{
	        if ($current==null) {
	            $current = createModelElementForParent(grammarAccess.getLetOutDeclRule());
	        }
       		set(
       			$current, 
       			"rightS",
        		lv_rightS_5_0, 
        		"RightSquareBracketKeyword");
	        afterParserOrEnumRuleCall();
	    }

)
))?((
(
		{ 
	        newCompositeNode(grammarAccess.getLetOutDeclAccess().getBlockBlockParserRuleCall_2_0_0()); 
	    }
		lv_block_6_0=ruleBlock		{
	        if ($current==null) {
	            $current = createModelElementForParent(grammarAccess.getLetOutDeclRule());
	        }
       		set(
       			$current, 
       			"block",
        		lv_block_6_0, 
        		"Block");
	        afterParserOrEnumRuleCall();
	    }

)
)
    |(	otherlv_7='=' 
    {
    	newLeafNode(otherlv_7, grammarAccess.getLetOutDeclAccess().getEqualsSignKeyword_2_1_0());
    }
(
(
		{ 
	        newCompositeNode(grammarAccess.getLetOutDeclAccess().getExprNameExpressionParserRuleCall_2_1_1_0()); 
	    }
		lv_exprName_8_0=ruleExpression		{
	        if ($current==null) {
	            $current = createModelElementForParent(grammarAccess.getLetOutDeclRule());
	        }
       		set(
       			$current, 
       			"exprName",
        		lv_exprName_8_0, 
        		"Expression");
	        afterParserOrEnumRuleCall();
	    }

)
))))
;





// Entry rule entryRuleSigDecl
entryRuleSigDecl returns [EObject current=null] 
	:
	{ newCompositeNode(grammarAccess.getSigDeclRule()); }
	 iv_ruleSigDecl=ruleSigDecl 
	 { $current=$iv_ruleSigDecl.current; } 
	 EOF 
;

// Rule SigDecl
ruleSigDecl returns [EObject current=null] 
    @init { enterRule(); 
    }
    @after { leaveRule(); }:
((
	{ 
	  /* */ 
	}
    { 
        newCompositeNode(grammarAccess.getSigDeclAccess().getSigQualParserRuleCall_0()); 
    }
ruleSigQual
    { 
        afterParserOrEnumRuleCall();
    }
)*	otherlv_1='sig' 
    {
    	newLeafNode(otherlv_1, grammarAccess.getSigDeclAccess().getSigKeyword_1());
    }
(
(
		{ 
	        newCompositeNode(grammarAccess.getSigDeclAccess().getSignatureNameSignatureNameParserRuleCall_2_0()); 
	    }
		lv_signatureName_2_0=ruleSignatureName		{
	        if ($current==null) {
	            $current = createModelElementForParent(grammarAccess.getSigDeclRule());
	        }
       		add(
       			$current, 
       			"signatureName",
        		lv_signatureName_2_0, 
        		"SignatureName");
	        afterParserOrEnumRuleCall();
	    }

)
)((
(
		{ 
	        newCompositeNode(grammarAccess.getSigDeclAccess().getCommaCommaParserRuleCall_3_0_0()); 
	    }
		lv_comma_3_0=ruleComma		{
	        if ($current==null) {
	            $current = createModelElementForParent(grammarAccess.getSigDeclRule());
	        }
       		add(
       			$current, 
       			"comma",
        		lv_comma_3_0, 
        		"Comma");
	        afterParserOrEnumRuleCall();
	    }

)
)(
(
		{ 
	        newCompositeNode(grammarAccess.getSigDeclAccess().getSignatureNameSignatureNameParserRuleCall_3_1_0()); 
	    }
		lv_signatureName_4_0=ruleSignatureName		{
	        if ($current==null) {
	            $current = createModelElementForParent(grammarAccess.getSigDeclRule());
	        }
       		add(
       			$current, 
       			"signatureName",
        		lv_signatureName_4_0, 
        		"SignatureName");
	        afterParserOrEnumRuleCall();
	    }

)
))*(
(
		{ 
	        newCompositeNode(grammarAccess.getSigDeclAccess().getSigExtSigExtParserRuleCall_4_0()); 
	    }
		lv_sigExt_5_0=ruleSigExt		{
	        if ($current==null) {
	            $current = createModelElementForParent(grammarAccess.getSigDeclRule());
	        }
       		set(
       			$current, 
       			"sigExt",
        		lv_sigExt_5_0, 
        		"SigExt");
	        afterParserOrEnumRuleCall();
	    }

)
)?	otherlv_6='{' 
    {
    	newLeafNode(otherlv_6, grammarAccess.getSigDeclAccess().getLeftCurlyBracketKeyword_5());
    }
((
(
		{ 
	        newCompositeNode(grammarAccess.getSigDeclAccess().getDeclDeclParserRuleCall_6_0_0()); 
	    }
		lv_decl_7_0=ruleDecl		{
	        if ($current==null) {
	            $current = createModelElementForParent(grammarAccess.getSigDeclRule());
	        }
       		add(
       			$current, 
       			"decl",
        		lv_decl_7_0, 
        		"Decl");
	        afterParserOrEnumRuleCall();
	    }

)
)((
(
		lv_comma2_8_0=	',' 
    {
        newLeafNode(lv_comma2_8_0, grammarAccess.getSigDeclAccess().getComma2CommaKeyword_6_1_0_0());
    }
 
	    {
	        if ($current==null) {
	            $current = createModelElement(grammarAccess.getSigDeclRule());
	        }
       		addWithLastConsumed($current, "comma2", lv_comma2_8_0, ",");
	    }

)
)(
(
		{ 
	        newCompositeNode(grammarAccess.getSigDeclAccess().getDeclDeclParserRuleCall_6_1_1_0()); 
	    }
		lv_decl_9_0=ruleDecl		{
	        if ($current==null) {
	            $current = createModelElementForParent(grammarAccess.getSigDeclRule());
	        }
       		add(
       			$current, 
       			"decl",
        		lv_decl_9_0, 
        		"Decl");
	        afterParserOrEnumRuleCall();
	    }

)
))*)?	otherlv_10='}' 
    {
    	newLeafNode(otherlv_10, grammarAccess.getSigDeclAccess().getRightCurlyBracketKeyword_7());
    }
(
(
		{ 
	        newCompositeNode(grammarAccess.getSigDeclAccess().getBlockBlockParserRuleCall_8_0()); 
	    }
		lv_block_11_0=ruleBlock		{
	        if ($current==null) {
	            $current = createModelElementForParent(grammarAccess.getSigDeclRule());
	        }
       		set(
       			$current, 
       			"block",
        		lv_block_11_0, 
        		"Block");
	        afterParserOrEnumRuleCall();
	    }

)
)?)
;





// Entry rule entryRuleSigQual
entryRuleSigQual returns [String current=null] 
	:
	{ newCompositeNode(grammarAccess.getSigQualRule()); } 
	 iv_ruleSigQual=ruleSigQual 
	 { $current=$iv_ruleSigQual.current.getText(); }  
	 EOF 
;

// Rule SigQual
ruleSigQual returns [AntlrDatatypeRuleToken current=new AntlrDatatypeRuleToken()] 
    @init { enterRule(); 
    }
    @after { leaveRule(); }:
(
	kw='abstract' 
    {
        $current.merge(kw);
        newLeafNode(kw, grammarAccess.getSigQualAccess().getAbstractKeyword_0()); 
    }

    |
	kw='lone' 
    {
        $current.merge(kw);
        newLeafNode(kw, grammarAccess.getSigQualAccess().getLoneKeyword_1()); 
    }

    |
	kw='one' 
    {
        $current.merge(kw);
        newLeafNode(kw, grammarAccess.getSigQualAccess().getOneKeyword_2()); 
    }

    |
	kw='some' 
    {
        $current.merge(kw);
        newLeafNode(kw, grammarAccess.getSigQualAccess().getSomeKeyword_3()); 
    }

    |
	kw='private' 
    {
        $current.merge(kw);
        newLeafNode(kw, grammarAccess.getSigQualAccess().getPrivateKeyword_4()); 
    }
)
    ;





// Entry rule entryRuleSigExt
entryRuleSigExt returns [EObject current=null] 
	:
	{ newCompositeNode(grammarAccess.getSigExtRule()); }
	 iv_ruleSigExt=ruleSigExt 
	 { $current=$iv_ruleSigExt.current; } 
	 EOF 
;

// Rule SigExt
ruleSigExt returns [EObject current=null] 
    @init { enterRule(); 
    }
    @after { leaveRule(); }:
((	otherlv_0='extends' 
    {
    	newLeafNode(otherlv_0, grammarAccess.getSigExtAccess().getExtendsKeyword_0_0());
    }
(
(
		{ 
	        newCompositeNode(grammarAccess.getSigExtAccess().getRefReferencesSigParserRuleCall_0_1_0()); 
	    }
		lv_ref_1_0=ruleReferencesSig		{
	        if ($current==null) {
	            $current = createModelElementForParent(grammarAccess.getSigExtRule());
	        }
       		set(
       			$current, 
       			"ref",
        		lv_ref_1_0, 
        		"ReferencesSig");
	        afterParserOrEnumRuleCall();
	    }

)
))
    |(	otherlv_2='in' 
    {
    	newLeafNode(otherlv_2, grammarAccess.getSigExtAccess().getInKeyword_1_0());
    }
(
(
		{ 
	        newCompositeNode(grammarAccess.getSigExtAccess().getRefReferencesSigParserRuleCall_1_1_0()); 
	    }
		lv_ref_3_0=ruleReferencesSig		{
	        if ($current==null) {
	            $current = createModelElementForParent(grammarAccess.getSigExtRule());
	        }
       		set(
       			$current, 
       			"ref",
        		lv_ref_3_0, 
        		"ReferencesSig");
	        afterParserOrEnumRuleCall();
	    }

)
)(	otherlv_4='+' 
    {
    	newLeafNode(otherlv_4, grammarAccess.getSigExtAccess().getPlusSignKeyword_1_2_0());
    }
(
(
		{ 
	        newCompositeNode(grammarAccess.getSigExtAccess().getRef2ReferencesSigParserRuleCall_1_2_1_0()); 
	    }
		lv_ref2_5_0=ruleReferencesSig		{
	        if ($current==null) {
	            $current = createModelElementForParent(grammarAccess.getSigExtRule());
	        }
       		add(
       			$current, 
       			"ref2",
        		lv_ref2_5_0, 
        		"ReferencesSig");
	        afterParserOrEnumRuleCall();
	    }

)
))*))
;





// Entry rule entryRuleExpression
entryRuleExpression returns [EObject current=null] 
	:
	{ newCompositeNode(grammarAccess.getExpressionRule()); }
	 iv_ruleExpression=ruleExpression 
	 { $current=$iv_ruleExpression.current; } 
	 EOF 
;

// Rule Expression
ruleExpression returns [EObject current=null] 
    @init { enterRule(); 
    }
    @after { leaveRule(); }:
(
	{ 
	  /* */ 
	}
    { 
        newCompositeNode(grammarAccess.getExpressionAccess().getTerminalExpressionParserRuleCall_0()); 
    }
    this_TerminalExpression_0=ruleTerminalExpression
    { 
        $current = $this_TerminalExpression_0.current; 
        afterParserOrEnumRuleCall();
    }
(((
(
		{ 
	        newCompositeNode(grammarAccess.getExpressionAccess().getBinOpBinOpParserRuleCall_1_0_0_0()); 
	    }
		lv_binOp_1_0=ruleBinOp		{
	        if ($current==null) {
	            $current = createModelElementForParent(grammarAccess.getExpressionRule());
	        }
       		add(
       			$current, 
       			"binOp",
        		lv_binOp_1_0, 
        		"BinOp");
	        afterParserOrEnumRuleCall();
	    }

)
)(
(
		{ 
	        newCompositeNode(grammarAccess.getExpressionAccess().getExprExpressionParserRuleCall_1_0_1_0()); 
	    }
		lv_expr_2_0=ruleExpression		{
	        if ($current==null) {
	            $current = createModelElementForParent(grammarAccess.getExpressionRule());
	        }
       		add(
       			$current, 
       			"expr",
        		lv_expr_2_0, 
        		"Expression");
	        afterParserOrEnumRuleCall();
	    }

)
))
    |((	otherlv_3='!' 
    {
    	newLeafNode(otherlv_3, grammarAccess.getExpressionAccess().getExclamationMarkKeyword_1_1_0_0());
    }

    |	otherlv_4='not' 
    {
    	newLeafNode(otherlv_4, grammarAccess.getExpressionAccess().getNotKeyword_1_1_0_1());
    }
)?(
(
		{ 
	        newCompositeNode(grammarAccess.getExpressionAccess().getCmpCompareOpParserRuleCall_1_1_1_0()); 
	    }
		lv_cmp_5_0=ruleCompareOp		{
	        if ($current==null) {
	            $current = createModelElementForParent(grammarAccess.getExpressionRule());
	        }
       		add(
       			$current, 
       			"cmp",
        		lv_cmp_5_0, 
        		"CompareOp");
	        afterParserOrEnumRuleCall();
	    }

)
)(
(
		{ 
	        newCompositeNode(grammarAccess.getExpressionAccess().getExprExpressionParserRuleCall_1_1_2_0()); 
	    }
		lv_expr_6_0=ruleExpression		{
	        if ($current==null) {
	            $current = createModelElementForParent(grammarAccess.getExpressionRule());
	        }
       		add(
       			$current, 
       			"expr",
        		lv_expr_6_0, 
        		"Expression");
	        afterParserOrEnumRuleCall();
	    }

)
))
    |((
(
		{ 
	        newCompositeNode(grammarAccess.getExpressionAccess().getArrowOpArrowOpParserRuleCall_1_2_0_0()); 
	    }
		lv_arrowOp_7_0=ruleArrowOp		{
	        if ($current==null) {
	            $current = createModelElementForParent(grammarAccess.getExpressionRule());
	        }
       		add(
       			$current, 
       			"arrowOp",
        		lv_arrowOp_7_0, 
        		"ArrowOp");
	        afterParserOrEnumRuleCall();
	    }

)
)(
(
		{ 
	        newCompositeNode(grammarAccess.getExpressionAccess().getExprExpressionParserRuleCall_1_2_1_0()); 
	    }
		lv_expr_8_0=ruleExpression		{
	        if ($current==null) {
	            $current = createModelElementForParent(grammarAccess.getExpressionRule());
	        }
       		add(
       			$current, 
       			"expr",
        		lv_expr_8_0, 
        		"Expression");
	        afterParserOrEnumRuleCall();
	    }

)
))
    |((	otherlv_9='=>' 
    {
    	newLeafNode(otherlv_9, grammarAccess.getExpressionAccess().getEqualsSignGreaterThanSignKeyword_1_3_0_0());
    }

    |	otherlv_10='implies' 
    {
    	newLeafNode(otherlv_10, grammarAccess.getExpressionAccess().getImpliesKeyword_1_3_0_1());
    }
)((
(
		{ 
	        newCompositeNode(grammarAccess.getExpressionAccess().getParParanthesisandExpressionParserRuleCall_1_3_1_0_0()); 
	    }
		lv_par_11_0=ruleParanthesisandExpression		{
	        if ($current==null) {
	            $current = createModelElementForParent(grammarAccess.getExpressionRule());
	        }
       		add(
       			$current, 
       			"par",
        		lv_par_11_0, 
        		"ParanthesisandExpression");
	        afterParserOrEnumRuleCall();
	    }

)
)
    |(
(
		{ 
	        newCompositeNode(grammarAccess.getExpressionAccess().getExprExpressionParserRuleCall_1_3_1_1_0()); 
	    }
		lv_expr_12_0=ruleExpression		{
	        if ($current==null) {
	            $current = createModelElementForParent(grammarAccess.getExpressionRule());
	        }
       		add(
       			$current, 
       			"expr",
        		lv_expr_12_0, 
        		"Expression");
	        afterParserOrEnumRuleCall();
	    }

)
))?(	otherlv_13='else' 
    {
    	newLeafNode(otherlv_13, grammarAccess.getExpressionAccess().getElseKeyword_1_3_2_0());
    }
(
(
		{ 
	        newCompositeNode(grammarAccess.getExpressionAccess().getExprExpressionParserRuleCall_1_3_2_1_0()); 
	    }
		lv_expr_14_0=ruleExpression		{
	        if ($current==null) {
	            $current = createModelElementForParent(grammarAccess.getExpressionRule());
	        }
       		add(
       			$current, 
       			"expr",
        		lv_expr_14_0, 
        		"Expression");
	        afterParserOrEnumRuleCall();
	    }

)
))?)
    |(	otherlv_15='[' 
    {
    	newLeafNode(otherlv_15, grammarAccess.getExpressionAccess().getLeftSquareBracketKeyword_1_4_0());
    }
((
(
		{ 
	        newCompositeNode(grammarAccess.getExpressionAccess().getExprExpressionParserRuleCall_1_4_1_0_0()); 
	    }
		lv_expr_16_0=ruleExpression		{
	        if ($current==null) {
	            $current = createModelElementForParent(grammarAccess.getExpressionRule());
	        }
       		add(
       			$current, 
       			"expr",
        		lv_expr_16_0, 
        		"Expression");
	        afterParserOrEnumRuleCall();
	    }

)
)((
(
		{ 
	        newCompositeNode(grammarAccess.getExpressionAccess().getCommaCommaParserRuleCall_1_4_1_1_0_0()); 
	    }
		lv_comma_17_0=ruleComma		{
	        if ($current==null) {
	            $current = createModelElementForParent(grammarAccess.getExpressionRule());
	        }
       		add(
       			$current, 
       			"comma",
        		lv_comma_17_0, 
        		"Comma");
	        afterParserOrEnumRuleCall();
	    }

)
)(
(
		{ 
	        newCompositeNode(grammarAccess.getExpressionAccess().getExprExpressionParserRuleCall_1_4_1_1_1_0()); 
	    }
		lv_expr_18_0=ruleExpression		{
	        if ($current==null) {
	            $current = createModelElementForParent(grammarAccess.getExpressionRule());
	        }
       		add(
       			$current, 
       			"expr",
        		lv_expr_18_0, 
        		"Expression");
	        afterParserOrEnumRuleCall();
	    }

)
))*)?	otherlv_19=']' 
    {
    	newLeafNode(otherlv_19, grammarAccess.getExpressionAccess().getRightSquareBracketKeyword_1_4_2());
    }
))*)
;





// Entry rule entryRuleTerminalExpression
entryRuleTerminalExpression returns [EObject current=null] 
	:
	{ newCompositeNode(grammarAccess.getTerminalExpressionRule()); }
	 iv_ruleTerminalExpression=ruleTerminalExpression 
	 { $current=$iv_ruleTerminalExpression.current; } 
	 EOF 
;

// Rule TerminalExpression
ruleTerminalExpression returns [EObject current=null] 
    @init { enterRule(); 
    }
    @after { leaveRule(); }:
(((
	{ 
	  /* */ 
	}
    {
        $current = forceCreateModelElement(
            grammarAccess.getTerminalExpressionAccess().getExpressionAction_0_0(),
            $current);
    }
)(
(
		lv_parO_1_0=	'(' 
    {
        newLeafNode(lv_parO_1_0, grammarAccess.getTerminalExpressionAccess().getParOLeftParenthesisKeyword_0_1_0());
    }
 
	    {
	        if ($current==null) {
	            $current = createModelElement(grammarAccess.getTerminalExpressionRule());
	        }
       		setWithLastConsumed($current, "parO", lv_parO_1_0, "(");
	    }

)
)(
(
		{ 
	        newCompositeNode(grammarAccess.getTerminalExpressionAccess().getExprExpressionParserRuleCall_0_2_0()); 
	    }
		lv_expr_2_0=ruleExpression		{
	        if ($current==null) {
	            $current = createModelElementForParent(grammarAccess.getTerminalExpressionRule());
	        }
       		add(
       			$current, 
       			"expr",
        		lv_expr_2_0, 
        		"Expression");
	        afterParserOrEnumRuleCall();
	    }

)
)+(
(
		lv_parF_3_0=	')' 
    {
        newLeafNode(lv_parF_3_0, grammarAccess.getTerminalExpressionAccess().getParFRightParenthesisKeyword_0_3_0());
    }
 
	    {
	        if ($current==null) {
	            $current = createModelElement(grammarAccess.getTerminalExpressionRule());
	        }
       		setWithLastConsumed($current, "parF", lv_parF_3_0, ")");
	    }

)
))
    |((
	{ 
	  /* */ 
	}
    {
        $current = forceCreateModelElement(
            grammarAccess.getTerminalExpressionAccess().getExpressionAction_1_0(),
            $current);
    }
)(
(
		lv_let_5_0=	'let' 
    {
        newLeafNode(lv_let_5_0, grammarAccess.getTerminalExpressionAccess().getLetLetKeyword_1_1_0());
    }
 
	    {
	        if ($current==null) {
	            $current = createModelElement(grammarAccess.getTerminalExpressionRule());
	        }
       		setWithLastConsumed($current, "let", lv_let_5_0, "let");
	    }

)
)(
(
		{ 
	        newCompositeNode(grammarAccess.getTerminalExpressionAccess().getLetdeclLetDeclParserRuleCall_1_2_0()); 
	    }
		lv_letdecl_6_0=ruleLetDecl		{
	        if ($current==null) {
	            $current = createModelElementForParent(grammarAccess.getTerminalExpressionRule());
	        }
       		add(
       			$current, 
       			"letdecl",
        		lv_letdecl_6_0, 
        		"LetDecl");
	        afterParserOrEnumRuleCall();
	    }

)
)((
(
		{ 
	        newCompositeNode(grammarAccess.getTerminalExpressionAccess().getCommaCommaParserRuleCall_1_3_0_0()); 
	    }
		lv_comma_7_0=ruleComma		{
	        if ($current==null) {
	            $current = createModelElementForParent(grammarAccess.getTerminalExpressionRule());
	        }
       		add(
       			$current, 
       			"comma",
        		lv_comma_7_0, 
        		"Comma");
	        afterParserOrEnumRuleCall();
	    }

)
)(
(
		{ 
	        newCompositeNode(grammarAccess.getTerminalExpressionAccess().getLetdeclLetDeclParserRuleCall_1_3_1_0()); 
	    }
		lv_letdecl_8_0=ruleLetDecl		{
	        if ($current==null) {
	            $current = createModelElementForParent(grammarAccess.getTerminalExpressionRule());
	        }
       		add(
       			$current, 
       			"letdecl",
        		lv_letdecl_8_0, 
        		"LetDecl");
	        afterParserOrEnumRuleCall();
	    }

)
))*(
(
		{ 
	        newCompositeNode(grammarAccess.getTerminalExpressionAccess().getBlockOrBarBlockOrBarParserRuleCall_1_4_0()); 
	    }
		lv_blockOrBar_9_0=ruleBlockOrBar		{
	        if ($current==null) {
	            $current = createModelElementForParent(grammarAccess.getTerminalExpressionRule());
	        }
       		add(
       			$current, 
       			"blockOrBar",
        		lv_blockOrBar_9_0, 
        		"BlockOrBar");
	        afterParserOrEnumRuleCall();
	    }

)
))
    |((
	{ 
	  /* */ 
	}
    {
        $current = forceCreateModelElement(
            grammarAccess.getTerminalExpressionAccess().getExpressionAction_2_0(),
            $current);
    }
)(
(
		{ 
	        newCompositeNode(grammarAccess.getTerminalExpressionAccess().getQuantQuantParserRuleCall_2_1_0()); 
	    }
		lv_quant_11_0=ruleQuant		{
	        if ($current==null) {
	            $current = createModelElementForParent(grammarAccess.getTerminalExpressionRule());
	        }
       		set(
       			$current, 
       			"quant",
        		lv_quant_11_0, 
        		"Quant");
	        afterParserOrEnumRuleCall();
	    }

)
)((
(
		{ 
	        newCompositeNode(grammarAccess.getTerminalExpressionAccess().getDeclDeclParserRuleCall_2_2_0_0()); 
	    }
		lv_decl_12_0=ruleDecl		{
	        if ($current==null) {
	            $current = createModelElementForParent(grammarAccess.getTerminalExpressionRule());
	        }
       		add(
       			$current, 
       			"decl",
        		lv_decl_12_0, 
        		"Decl");
	        afterParserOrEnumRuleCall();
	    }

)
)((
(
		{ 
	        newCompositeNode(grammarAccess.getTerminalExpressionAccess().getCommaCommaParserRuleCall_2_2_1_0_0()); 
	    }
		lv_comma_13_0=ruleComma		{
	        if ($current==null) {
	            $current = createModelElementForParent(grammarAccess.getTerminalExpressionRule());
	        }
       		add(
       			$current, 
       			"comma",
        		lv_comma_13_0, 
        		"Comma");
	        afterParserOrEnumRuleCall();
	    }

)
)(
(
		{ 
	        newCompositeNode(grammarAccess.getTerminalExpressionAccess().getDeclDeclParserRuleCall_2_2_1_1_0()); 
	    }
		lv_decl_14_0=ruleDecl		{
	        if ($current==null) {
	            $current = createModelElementForParent(grammarAccess.getTerminalExpressionRule());
	        }
       		add(
       			$current, 
       			"decl",
        		lv_decl_14_0, 
        		"Decl");
	        afterParserOrEnumRuleCall();
	    }

)
))*)?((
(
		{ 
	        newCompositeNode(grammarAccess.getTerminalExpressionAccess().getBlockOrBarBlockOrBarParserRuleCall_2_3_0_0()); 
	    }
		lv_blockOrBar_15_0=ruleBlockOrBar		{
	        if ($current==null) {
	            $current = createModelElementForParent(grammarAccess.getTerminalExpressionRule());
	        }
       		add(
       			$current, 
       			"blockOrBar",
        		lv_blockOrBar_15_0, 
        		"BlockOrBar");
	        afterParserOrEnumRuleCall();
	    }

)
)
    |(
(
		{ 
	        newCompositeNode(grammarAccess.getTerminalExpressionAccess().getExprExpressionParserRuleCall_2_3_1_0()); 
	    }
		lv_expr_16_0=ruleExpression		{
	        if ($current==null) {
	            $current = createModelElementForParent(grammarAccess.getTerminalExpressionRule());
	        }
       		add(
       			$current, 
       			"expr",
        		lv_expr_16_0, 
        		"Expression");
	        afterParserOrEnumRuleCall();
	    }

)
))?)
    |((
	{ 
	  /* */ 
	}
    {
        $current = forceCreateModelElement(
            grammarAccess.getTerminalExpressionAccess().getExpressionAction_3_0(),
            $current);
    }
)(
(
		{ 
	        newCompositeNode(grammarAccess.getTerminalExpressionAccess().getUnOpUnOpParserRuleCall_3_1_0()); 
	    }
		lv_unOp_18_0=ruleUnOp		{
	        if ($current==null) {
	            $current = createModelElementForParent(grammarAccess.getTerminalExpressionRule());
	        }
       		set(
       			$current, 
       			"unOp",
        		lv_unOp_18_0, 
        		"UnOp");
	        afterParserOrEnumRuleCall();
	    }

)
)(
(
		{ 
	        newCompositeNode(grammarAccess.getTerminalExpressionAccess().getExprExpressionParserRuleCall_3_2_0()); 
	    }
		lv_expr_19_0=ruleExpression		{
	        if ($current==null) {
	            $current = createModelElementForParent(grammarAccess.getTerminalExpressionRule());
	        }
       		add(
       			$current, 
       			"expr",
        		lv_expr_19_0, 
        		"Expression");
	        afterParserOrEnumRuleCall();
	    }

)
))
    |((
	{ 
	  /* */ 
	}
    {
        $current = forceCreateModelElement(
            grammarAccess.getTerminalExpressionAccess().getExpressionAction_4_0(),
            $current);
    }
)(
(
		{ 
	        newCompositeNode(grammarAccess.getTerminalExpressionAccess().getCommonCommonQuantUnOpParserRuleCall_4_1_0()); 
	    }
		lv_common_21_0=ruleCommonQuantUnOp		{
	        if ($current==null) {
	            $current = createModelElementForParent(grammarAccess.getTerminalExpressionRule());
	        }
       		add(
       			$current, 
       			"common",
        		lv_common_21_0, 
        		"CommonQuantUnOp");
	        afterParserOrEnumRuleCall();
	    }

)
)((
(
		{ 
	        newCompositeNode(grammarAccess.getTerminalExpressionAccess().getExprExpressionParserRuleCall_4_2_0_0()); 
	    }
		lv_expr_22_0=ruleExpression		{
	        if ($current==null) {
	            $current = createModelElementForParent(grammarAccess.getTerminalExpressionRule());
	        }
       		add(
       			$current, 
       			"expr",
        		lv_expr_22_0, 
        		"Expression");
	        afterParserOrEnumRuleCall();
	    }

)
)
    |((
(
		{ 
	        newCompositeNode(grammarAccess.getTerminalExpressionAccess().getDeclDeclParserRuleCall_4_2_1_0_0()); 
	    }
		lv_decl_23_0=ruleDecl		{
	        if ($current==null) {
	            $current = createModelElementForParent(grammarAccess.getTerminalExpressionRule());
	        }
       		add(
       			$current, 
       			"decl",
        		lv_decl_23_0, 
        		"Decl");
	        afterParserOrEnumRuleCall();
	    }

)
)((
(
		{ 
	        newCompositeNode(grammarAccess.getTerminalExpressionAccess().getCommaCommaParserRuleCall_4_2_1_1_0_0()); 
	    }
		lv_comma_24_0=ruleComma		{
	        if ($current==null) {
	            $current = createModelElementForParent(grammarAccess.getTerminalExpressionRule());
	        }
       		add(
       			$current, 
       			"comma",
        		lv_comma_24_0, 
        		"Comma");
	        afterParserOrEnumRuleCall();
	    }

)
)(
(
		{ 
	        newCompositeNode(grammarAccess.getTerminalExpressionAccess().getDeclDeclParserRuleCall_4_2_1_1_1_0()); 
	    }
		lv_decl_25_0=ruleDecl		{
	        if ($current==null) {
	            $current = createModelElementForParent(grammarAccess.getTerminalExpressionRule());
	        }
       		add(
       			$current, 
       			"decl",
        		lv_decl_25_0, 
        		"Decl");
	        afterParserOrEnumRuleCall();
	    }

)
))*))?(
(
		{ 
	        newCompositeNode(grammarAccess.getTerminalExpressionAccess().getBlockOrBarBlockOrBarParserRuleCall_4_3_0()); 
	    }
		lv_blockOrBar_26_0=ruleBlockOrBar		{
	        if ($current==null) {
	            $current = createModelElementForParent(grammarAccess.getTerminalExpressionRule());
	        }
       		add(
       			$current, 
       			"blockOrBar",
        		lv_blockOrBar_26_0, 
        		"BlockOrBar");
	        afterParserOrEnumRuleCall();
	    }

)
))
    |((
	{ 
	  /* */ 
	}
    {
        $current = forceCreateModelElement(
            grammarAccess.getTerminalExpressionAccess().getExpressionAction_5_0(),
            $current);
    }
)this_INT_28=RULE_INT
    { 
    newLeafNode(this_INT_28, grammarAccess.getTerminalExpressionAccess().getINTTerminalRuleCall_5_1()); 
    }
)
    |((
	{ 
	  /* */ 
	}
    {
        $current = forceCreateModelElement(
            grammarAccess.getTerminalExpressionAccess().getExpressionAction_6_0(),
            $current);
    }
)this_NEGATIVE_INTEGER_30=RULE_NEGATIVE_INTEGER
    { 
    newLeafNode(this_NEGATIVE_INTEGER_30, grammarAccess.getTerminalExpressionAccess().getNEGATIVE_INTEGERTerminalRuleCall_6_1()); 
    }
)
    |((
	{ 
	  /* */ 
	}
    {
        $current = forceCreateModelElement(
            grammarAccess.getTerminalExpressionAccess().getExpressionAction_7_0(),
            $current);
    }
)(
(
		lv_none_32_0=	'none' 
    {
        newLeafNode(lv_none_32_0, grammarAccess.getTerminalExpressionAccess().getNoneNoneKeyword_7_1_0());
    }
 
	    {
	        if ($current==null) {
	            $current = createModelElement(grammarAccess.getTerminalExpressionRule());
	        }
       		setWithLastConsumed($current, "none", lv_none_32_0, "none");
	    }

)
))
    |((
	{ 
	  /* */ 
	}
    {
        $current = forceCreateModelElement(
            grammarAccess.getTerminalExpressionAccess().getExpressionAction_8_0(),
            $current);
    }
)(
(
		lv_iden_34_0=	'iden' 
    {
        newLeafNode(lv_iden_34_0, grammarAccess.getTerminalExpressionAccess().getIdenIdenKeyword_8_1_0());
    }
 
	    {
	        if ($current==null) {
	            $current = createModelElement(grammarAccess.getTerminalExpressionRule());
	        }
       		setWithLastConsumed($current, "iden", lv_iden_34_0, "iden");
	    }

)
))
    |((
	{ 
	  /* */ 
	}
    {
        $current = forceCreateModelElement(
            grammarAccess.getTerminalExpressionAccess().getExpressionAction_9_0(),
            $current);
    }
)(
(
		lv_univ_36_0=	'univ' 
    {
        newLeafNode(lv_univ_36_0, grammarAccess.getTerminalExpressionAccess().getUnivUnivKeyword_9_1_0());
    }
 
	    {
	        if ($current==null) {
	            $current = createModelElement(grammarAccess.getTerminalExpressionRule());
	        }
       		setWithLastConsumed($current, "univ", lv_univ_36_0, "univ");
	    }

)
))
    |((
	{ 
	  /* */ 
	}
    {
        $current = forceCreateModelElement(
            grammarAccess.getTerminalExpressionAccess().getExpressionAction_10_0(),
            $current);
    }
)((
(
		lv_int_38_0=	'int' 
    {
        newLeafNode(lv_int_38_0, grammarAccess.getTerminalExpressionAccess().getIntIntKeyword_10_1_0_0());
    }
 
	    {
	        if ($current==null) {
	            $current = createModelElement(grammarAccess.getTerminalExpressionRule());
	        }
       		setWithLastConsumed($current, "int", lv_int_38_0, "int");
	    }

)
)(
(
		{ 
		  /* */ 
		}
		{
			if ($current==null) {
	            $current = createModelElement(grammarAccess.getTerminalExpressionRule());
	        }
        }
	otherlv_39=RULE_ID
	{
		newLeafNode(otherlv_39, grammarAccess.getTerminalExpressionAccess().getNameRefReferencesNameCrossReference_10_1_1_0()); 
	}

)
)?))
    |(
(
		lv_int_40_0=	'Int' 
    {
        newLeafNode(lv_int_40_0, grammarAccess.getTerminalExpressionAccess().getIntIntKeyword_11_0());
    }
 
	    {
	        if ($current==null) {
	            $current = createModelElement(grammarAccess.getTerminalExpressionRule());
	        }
       		setWithLastConsumed($current, "int", lv_int_40_0, "Int");
	    }

)
)
    |((
	{ 
	  /* */ 
	}
    {
        $current = forceCreateModelElement(
            grammarAccess.getTerminalExpressionAccess().getExpressionAction_12_0(),
            $current);
    }
)(
(
		lv_seq_42_0=	'seq/Int' 
    {
        newLeafNode(lv_seq_42_0, grammarAccess.getTerminalExpressionAccess().getSeqSeqIntKeyword_12_1_0());
    }
 
	    {
	        if ($current==null) {
	            $current = createModelElement(grammarAccess.getTerminalExpressionRule());
	        }
       		setWithLastConsumed($current, "seq", lv_seq_42_0, "seq/Int");
	    }

)
))
    |((
	{ 
	  /* */ 
	}
    {
        $current = forceCreateModelElement(
            grammarAccess.getTerminalExpressionAccess().getExpressionAction_13_0(),
            $current);
    }
)(	otherlv_44='@' 
    {
    	newLeafNode(otherlv_44, grammarAccess.getTerminalExpressionAccess().getCommercialAtKeyword_13_1());
    }
)?(	otherlv_45='int' 
    {
    	newLeafNode(otherlv_45, grammarAccess.getTerminalExpressionAccess().getIntKeyword_13_2());
    }
)?(((
(
		{ 
		  /* */ 
		}
		{
			if ($current==null) {
	            $current = createModelElement(grammarAccess.getTerminalExpressionRule());
	        }
        }
	otherlv_46=RULE_ID
	{
		newLeafNode(otherlv_46, grammarAccess.getTerminalExpressionAccess().getAsnameAsNameCrossReference_13_3_0_0_0()); 
	}

)
)
    |	otherlv_47='this' 
    {
    	newLeafNode(otherlv_47, grammarAccess.getTerminalExpressionAccess().getThisKeyword_13_3_0_1());
    }
)	otherlv_48='/' 
    {
    	newLeafNode(otherlv_48, grammarAccess.getTerminalExpressionAccess().getSolidusKeyword_13_3_1());
    }
)?((
(
		{ 
		  /* */ 
		}
		{
			if ($current==null) {
	            $current = createModelElement(grammarAccess.getTerminalExpressionRule());
	        }
        }
	otherlv_49=RULE_ID
	{
		newLeafNode(otherlv_49, grammarAccess.getTerminalExpressionAccess().getNameRefReferencesNameCrossReference_13_4_0_0()); 
	}

)
)
    |	otherlv_50='this' 
    {
    	newLeafNode(otherlv_50, grammarAccess.getTerminalExpressionAccess().getThisKeyword_13_4_1());
    }

    |(
(
		lv_name_51_0=	'pred/totalOrder' 
    {
        newLeafNode(lv_name_51_0, grammarAccess.getTerminalExpressionAccess().getNamePredTotalOrderKeyword_13_4_2_0());
    }
 
	    {
	        if ($current==null) {
	            $current = createModelElement(grammarAccess.getTerminalExpressionRule());
	        }
       		setWithLastConsumed($current, "name", lv_name_51_0, "pred/totalOrder");
	    }

)
)
    |(
(
(
		lv_name_52_1=	'fun/add' 
    {
        newLeafNode(lv_name_52_1, grammarAccess.getTerminalExpressionAccess().getNameFunAddKeyword_13_4_3_0_0());
    }
 
	    {
	        if ($current==null) {
	            $current = createModelElement(grammarAccess.getTerminalExpressionRule());
	        }
       		setWithLastConsumed($current, "name", lv_name_52_1, null);
	    }

    |		lv_name_52_2=	'fun/sub' 
    {
        newLeafNode(lv_name_52_2, grammarAccess.getTerminalExpressionAccess().getNameFunSubKeyword_13_4_3_0_1());
    }
 
	    {
	        if ($current==null) {
	            $current = createModelElement(grammarAccess.getTerminalExpressionRule());
	        }
       		setWithLastConsumed($current, "name", lv_name_52_2, null);
	    }

    |		lv_name_52_3=	'fun/mul' 
    {
        newLeafNode(lv_name_52_3, grammarAccess.getTerminalExpressionAccess().getNameFunMulKeyword_13_4_3_0_2());
    }
 
	    {
	        if ($current==null) {
	            $current = createModelElement(grammarAccess.getTerminalExpressionRule());
	        }
       		setWithLastConsumed($current, "name", lv_name_52_3, null);
	    }

    |		lv_name_52_4=	'fun/div' 
    {
        newLeafNode(lv_name_52_4, grammarAccess.getTerminalExpressionAccess().getNameFunDivKeyword_13_4_3_0_3());
    }
 
	    {
	        if ($current==null) {
	            $current = createModelElement(grammarAccess.getTerminalExpressionRule());
	        }
       		setWithLastConsumed($current, "name", lv_name_52_4, null);
	    }

    |		lv_name_52_5=	'fun/rem' 
    {
        newLeafNode(lv_name_52_5, grammarAccess.getTerminalExpressionAccess().getNameFunRemKeyword_13_4_3_0_4());
    }
 
	    {
	        if ($current==null) {
	            $current = createModelElement(grammarAccess.getTerminalExpressionRule());
	        }
       		setWithLastConsumed($current, "name", lv_name_52_5, null);
	    }

    |		lv_name_52_6=	'fun/min' 
    {
        newLeafNode(lv_name_52_6, grammarAccess.getTerminalExpressionAccess().getNameFunMinKeyword_13_4_3_0_5());
    }
 
	    {
	        if ($current==null) {
	            $current = createModelElement(grammarAccess.getTerminalExpressionRule());
	        }
       		setWithLastConsumed($current, "name", lv_name_52_6, null);
	    }

    |		lv_name_52_7=	'fun/max' 
    {
        newLeafNode(lv_name_52_7, grammarAccess.getTerminalExpressionAccess().getNameFunMaxKeyword_13_4_3_0_6());
    }
 
	    {
	        if ($current==null) {
	            $current = createModelElement(grammarAccess.getTerminalExpressionRule());
	        }
       		setWithLastConsumed($current, "name", lv_name_52_7, null);
	    }

    |		lv_name_52_8=	'fun/next' 
    {
        newLeafNode(lv_name_52_8, grammarAccess.getTerminalExpressionAccess().getNameFunNextKeyword_13_4_3_0_7());
    }
 
	    {
	        if ($current==null) {
	            $current = createModelElement(grammarAccess.getTerminalExpressionRule());
	        }
       		setWithLastConsumed($current, "name", lv_name_52_8, null);
	    }

)

)
)))
    |((
	{ 
	  /* */ 
	}
    {
        $current = forceCreateModelElement(
            grammarAccess.getTerminalExpressionAccess().getExpressionAction_14_0(),
            $current);
    }
)(
(
		{ 
	        newCompositeNode(grammarAccess.getTerminalExpressionAccess().getBlockBlockParserRuleCall_14_1_0()); 
	    }
		lv_block_54_0=ruleBlock		{
	        if ($current==null) {
	            $current = createModelElementForParent(grammarAccess.getTerminalExpressionRule());
	        }
       		add(
       			$current, 
       			"block",
        		lv_block_54_0, 
        		"Block");
	        afterParserOrEnumRuleCall();
	    }

)
))
    |((
	{ 
	  /* */ 
	}
    {
        $current = forceCreateModelElement(
            grammarAccess.getTerminalExpressionAccess().getExpressionAction_15_0(),
            $current);
    }
)(
(
		{ 
	        newCompositeNode(grammarAccess.getTerminalExpressionAccess().getLeftCurlyBracketLeftCurlyBracketParserRuleCall_15_1_0()); 
	    }
		lv_leftCurlyBracket_56_0=ruleLeftCurlyBracket		{
	        if ($current==null) {
	            $current = createModelElementForParent(grammarAccess.getTerminalExpressionRule());
	        }
       		set(
       			$current, 
       			"leftCurlyBracket",
        		lv_leftCurlyBracket_56_0, 
        		"LeftCurlyBracket");
	        afterParserOrEnumRuleCall();
	    }

)
)(
(
		{ 
	        newCompositeNode(grammarAccess.getTerminalExpressionAccess().getDeclDeclParserRuleCall_15_2_0()); 
	    }
		lv_decl_57_0=ruleDecl		{
	        if ($current==null) {
	            $current = createModelElementForParent(grammarAccess.getTerminalExpressionRule());
	        }
       		add(
       			$current, 
       			"decl",
        		lv_decl_57_0, 
        		"Decl");
	        afterParserOrEnumRuleCall();
	    }

)
)((
(
		{ 
	        newCompositeNode(grammarAccess.getTerminalExpressionAccess().getCommaCommaParserRuleCall_15_3_0_0()); 
	    }
		lv_comma_58_0=ruleComma		{
	        if ($current==null) {
	            $current = createModelElementForParent(grammarAccess.getTerminalExpressionRule());
	        }
       		add(
       			$current, 
       			"comma",
        		lv_comma_58_0, 
        		"Comma");
	        afterParserOrEnumRuleCall();
	    }

)
)(
(
		{ 
	        newCompositeNode(grammarAccess.getTerminalExpressionAccess().getDeclDeclParserRuleCall_15_3_1_0()); 
	    }
		lv_decl_59_0=ruleDecl		{
	        if ($current==null) {
	            $current = createModelElementForParent(grammarAccess.getTerminalExpressionRule());
	        }
       		add(
       			$current, 
       			"decl",
        		lv_decl_59_0, 
        		"Decl");
	        afterParserOrEnumRuleCall();
	    }

)
))*(
(
		{ 
	        newCompositeNode(grammarAccess.getTerminalExpressionAccess().getBlockOrBarBlockOrBarParserRuleCall_15_4_0()); 
	    }
		lv_blockOrBar_60_0=ruleBlockOrBar		{
	        if ($current==null) {
	            $current = createModelElementForParent(grammarAccess.getTerminalExpressionRule());
	        }
       		add(
       			$current, 
       			"blockOrBar",
        		lv_blockOrBar_60_0, 
        		"BlockOrBar");
	        afterParserOrEnumRuleCall();
	    }

)
)(
(
		{ 
	        newCompositeNode(grammarAccess.getTerminalExpressionAccess().getRightCurlyBracketRightCurlyBracketParserRuleCall_15_5_0()); 
	    }
		lv_rightCurlyBracket_61_0=ruleRightCurlyBracket		{
	        if ($current==null) {
	            $current = createModelElementForParent(grammarAccess.getTerminalExpressionRule());
	        }
       		set(
       			$current, 
       			"rightCurlyBracket",
        		lv_rightCurlyBracket_61_0, 
        		"RightCurlyBracket");
	        afterParserOrEnumRuleCall();
	    }

)
)))
;





// Entry rule entryRuleDecl
entryRuleDecl returns [EObject current=null] 
	:
	{ newCompositeNode(grammarAccess.getDeclRule()); }
	 iv_ruleDecl=ruleDecl 
	 { $current=$iv_ruleDecl.current; } 
	 EOF 
;

// Rule Decl
ruleDecl returns [EObject current=null] 
    @init { enterRule(); 
    }
    @after { leaveRule(); }:
((	otherlv_0='private' 
    {
    	newLeafNode(otherlv_0, grammarAccess.getDeclAccess().getPrivateKeyword_0());
    }
)?(	otherlv_1='disj' 
    {
    	newLeafNode(otherlv_1, grammarAccess.getDeclAccess().getDisjKeyword_1());
    }
)?(
(
		{ 
	        newCompositeNode(grammarAccess.getDeclAccess().getPropertyNamePropertyNameParserRuleCall_2_0()); 
	    }
		lv_propertyName_2_0=rulePropertyName		{
	        if ($current==null) {
	            $current = createModelElementForParent(grammarAccess.getDeclRule());
	        }
       		add(
       			$current, 
       			"propertyName",
        		lv_propertyName_2_0, 
        		"PropertyName");
	        afterParserOrEnumRuleCall();
	    }

)
)((
(
		{ 
	        newCompositeNode(grammarAccess.getDeclAccess().getCommaCommaParserRuleCall_3_0_0()); 
	    }
		lv_comma_3_0=ruleComma		{
	        if ($current==null) {
	            $current = createModelElementForParent(grammarAccess.getDeclRule());
	        }
       		add(
       			$current, 
       			"comma",
        		lv_comma_3_0, 
        		"Comma");
	        afterParserOrEnumRuleCall();
	    }

)
)(
(
		{ 
	        newCompositeNode(grammarAccess.getDeclAccess().getPropertyNamePropertyNameParserRuleCall_3_1_0()); 
	    }
		lv_propertyName_4_0=rulePropertyName		{
	        if ($current==null) {
	            $current = createModelElementForParent(grammarAccess.getDeclRule());
	        }
       		add(
       			$current, 
       			"propertyName",
        		lv_propertyName_4_0, 
        		"PropertyName");
	        afterParserOrEnumRuleCall();
	    }

)
))*(
(
		{ 
	        newCompositeNode(grammarAccess.getDeclAccess().getColonColonParserRuleCall_4_0()); 
	    }
		lv_colon_5_0=ruleColon		{
	        if ($current==null) {
	            $current = createModelElementForParent(grammarAccess.getDeclRule());
	        }
       		set(
       			$current, 
       			"colon",
        		lv_colon_5_0, 
        		"Colon");
	        afterParserOrEnumRuleCall();
	    }

)
)(	otherlv_6='disj' 
    {
    	newLeafNode(otherlv_6, grammarAccess.getDeclAccess().getDisjKeyword_5());
    }
)?(
(
		{ 
	        newCompositeNode(grammarAccess.getDeclAccess().getExprExpressionParserRuleCall_6_0()); 
	    }
		lv_expr_7_0=ruleExpression		{
	        if ($current==null) {
	            $current = createModelElementForParent(grammarAccess.getDeclRule());
	        }
       		set(
       			$current, 
       			"expr",
        		lv_expr_7_0, 
        		"Expression");
	        afterParserOrEnumRuleCall();
	    }

)
))
;





// Entry rule entryRuleParam
entryRuleParam returns [EObject current=null] 
	:
	{ newCompositeNode(grammarAccess.getParamRule()); }
	 iv_ruleParam=ruleParam 
	 { $current=$iv_ruleParam.current; } 
	 EOF 
;

// Rule Param
ruleParam returns [EObject current=null] 
    @init { enterRule(); 
    }
    @after { leaveRule(); }:
((	otherlv_0='private' 
    {
    	newLeafNode(otherlv_0, grammarAccess.getParamAccess().getPrivateKeyword_0());
    }
)?(	otherlv_1='disj' 
    {
    	newLeafNode(otherlv_1, grammarAccess.getParamAccess().getDisjKeyword_1());
    }
)?(
(
		{ 
	        newCompositeNode(grammarAccess.getParamAccess().getPropertyNamePropertyNameParserRuleCall_2_0()); 
	    }
		lv_propertyName_2_0=rulePropertyName		{
	        if ($current==null) {
	            $current = createModelElementForParent(grammarAccess.getParamRule());
	        }
       		add(
       			$current, 
       			"propertyName",
        		lv_propertyName_2_0, 
        		"PropertyName");
	        afterParserOrEnumRuleCall();
	    }

)
)((
(
		{ 
	        newCompositeNode(grammarAccess.getParamAccess().getCommaCommaParserRuleCall_3_0_0()); 
	    }
		lv_comma_3_0=ruleComma		{
	        if ($current==null) {
	            $current = createModelElementForParent(grammarAccess.getParamRule());
	        }
       		add(
       			$current, 
       			"comma",
        		lv_comma_3_0, 
        		"Comma");
	        afterParserOrEnumRuleCall();
	    }

)
)(
(
		{ 
	        newCompositeNode(grammarAccess.getParamAccess().getPropertyNamePropertyNameParserRuleCall_3_1_0()); 
	    }
		lv_propertyName_4_0=rulePropertyName		{
	        if ($current==null) {
	            $current = createModelElementForParent(grammarAccess.getParamRule());
	        }
       		add(
       			$current, 
       			"propertyName",
        		lv_propertyName_4_0, 
        		"PropertyName");
	        afterParserOrEnumRuleCall();
	    }

)
))*(
(
		{ 
	        newCompositeNode(grammarAccess.getParamAccess().getColonColonParserRuleCall_4_0()); 
	    }
		lv_colon_5_0=ruleColon		{
	        if ($current==null) {
	            $current = createModelElementForParent(grammarAccess.getParamRule());
	        }
       		set(
       			$current, 
       			"colon",
        		lv_colon_5_0, 
        		"Colon");
	        afterParserOrEnumRuleCall();
	    }

)
)(	otherlv_6='disj' 
    {
    	newLeafNode(otherlv_6, grammarAccess.getParamAccess().getDisjKeyword_5());
    }
)?(
(
		{ 
	        newCompositeNode(grammarAccess.getParamAccess().getExprExpressionParserRuleCall_6_0()); 
	    }
		lv_expr_7_0=ruleExpression		{
	        if ($current==null) {
	            $current = createModelElementForParent(grammarAccess.getParamRule());
	        }
       		set(
       			$current, 
       			"expr",
        		lv_expr_7_0, 
        		"Expression");
	        afterParserOrEnumRuleCall();
	    }

)
))
;





// Entry rule entryRuleLetDecl
entryRuleLetDecl returns [EObject current=null] 
	:
	{ newCompositeNode(grammarAccess.getLetDeclRule()); }
	 iv_ruleLetDecl=ruleLetDecl 
	 { $current=$iv_ruleLetDecl.current; } 
	 EOF 
;

// Rule LetDecl
ruleLetDecl returns [EObject current=null] 
    @init { enterRule(); 
    }
    @after { leaveRule(); }:
((
(
		{ 
	        newCompositeNode(grammarAccess.getLetDeclAccess().getNameExpressionPropertyNameParserRuleCall_0_0()); 
	    }
		lv_nameExpression_0_0=rulePropertyName		{
	        if ($current==null) {
	            $current = createModelElementForParent(grammarAccess.getLetDeclRule());
	        }
       		set(
       			$current, 
       			"nameExpression",
        		lv_nameExpression_0_0, 
        		"PropertyName");
	        afterParserOrEnumRuleCall();
	    }

)
)	otherlv_1='=' 
    {
    	newLeafNode(otherlv_1, grammarAccess.getLetDeclAccess().getEqualsSignKeyword_1());
    }
(
(
		{ 
	        newCompositeNode(grammarAccess.getLetDeclAccess().getExprExpressionParserRuleCall_2_0()); 
	    }
		lv_expr_2_0=ruleExpression		{
	        if ($current==null) {
	            $current = createModelElementForParent(grammarAccess.getLetDeclRule());
	        }
       		set(
       			$current, 
       			"expr",
        		lv_expr_2_0, 
        		"Expression");
	        afterParserOrEnumRuleCall();
	    }

)
))
;





// Entry rule entryRuleParanthesisandExpression
entryRuleParanthesisandExpression returns [EObject current=null] 
	:
	{ newCompositeNode(grammarAccess.getParanthesisandExpressionRule()); }
	 iv_ruleParanthesisandExpression=ruleParanthesisandExpression 
	 { $current=$iv_ruleParanthesisandExpression.current; } 
	 EOF 
;

// Rule ParanthesisandExpression
ruleParanthesisandExpression returns [EObject current=null] 
    @init { enterRule(); 
    }
    @after { leaveRule(); }:
(	otherlv_0='(' 
    {
    	newLeafNode(otherlv_0, grammarAccess.getParanthesisandExpressionAccess().getLeftParenthesisKeyword_0());
    }
(
(
		{ 
	        newCompositeNode(grammarAccess.getParanthesisandExpressionAccess().getExprExpressionParserRuleCall_1_0()); 
	    }
		lv_expr_1_0=ruleExpression		{
	        if ($current==null) {
	            $current = createModelElementForParent(grammarAccess.getParanthesisandExpressionRule());
	        }
       		add(
       			$current, 
       			"expr",
        		lv_expr_1_0, 
        		"Expression");
	        afterParserOrEnumRuleCall();
	    }

)
)	otherlv_2=')' 
    {
    	newLeafNode(otherlv_2, grammarAccess.getParanthesisandExpressionAccess().getRightParenthesisKeyword_2());
    }
)
;





// Entry rule entryRuleQuant
entryRuleQuant returns [String current=null] 
	:
	{ newCompositeNode(grammarAccess.getQuantRule()); } 
	 iv_ruleQuant=ruleQuant 
	 { $current=$iv_ruleQuant.current.getText(); }  
	 EOF 
;

// Rule Quant
ruleQuant returns [AntlrDatatypeRuleToken current=new AntlrDatatypeRuleToken()] 
    @init { enterRule(); 
    }
    @after { leaveRule(); }:
(
	kw='all' 
    {
        $current.merge(kw);
        newLeafNode(kw, grammarAccess.getQuantAccess().getAllKeyword_0()); 
    }

    |
	kw='sum' 
    {
        $current.merge(kw);
        newLeafNode(kw, grammarAccess.getQuantAccess().getSumKeyword_1()); 
    }
)
    ;





// Entry rule entryRuleBinOp
entryRuleBinOp returns [EObject current=null] 
	:
	{ newCompositeNode(grammarAccess.getBinOpRule()); }
	 iv_ruleBinOp=ruleBinOp 
	 { $current=$iv_ruleBinOp.current; } 
	 EOF 
;

// Rule BinOp
ruleBinOp returns [EObject current=null] 
    @init { enterRule(); 
    }
    @after { leaveRule(); }:
((
	{ 
	  /* */ 
	}
    {
        $current = forceCreateModelElement(
            grammarAccess.getBinOpAccess().getBinOpAction_0(),
            $current);
    }
)(	otherlv_1='||' 
    {
    	newLeafNode(otherlv_1, grammarAccess.getBinOpAccess().getVerticalLineVerticalLineKeyword_1_0());
    }

    |	otherlv_2='or' 
    {
    	newLeafNode(otherlv_2, grammarAccess.getBinOpAccess().getOrKeyword_1_1());
    }

    |	otherlv_3='&&' 
    {
    	newLeafNode(otherlv_3, grammarAccess.getBinOpAccess().getAmpersandAmpersandKeyword_1_2());
    }

    |	otherlv_4='and' 
    {
    	newLeafNode(otherlv_4, grammarAccess.getBinOpAccess().getAndKeyword_1_3());
    }

    |	otherlv_5='&' 
    {
    	newLeafNode(otherlv_5, grammarAccess.getBinOpAccess().getAmpersandKeyword_1_4());
    }

    |	otherlv_6='<=>' 
    {
    	newLeafNode(otherlv_6, grammarAccess.getBinOpAccess().getLessThanSignEqualsSignGreaterThanSignKeyword_1_5());
    }

    |	otherlv_7='iff' 
    {
    	newLeafNode(otherlv_7, grammarAccess.getBinOpAccess().getIffKeyword_1_6());
    }

    |	otherlv_8='+' 
    {
    	newLeafNode(otherlv_8, grammarAccess.getBinOpAccess().getPlusSignKeyword_1_7());
    }

    |	otherlv_9='-' 
    {
    	newLeafNode(otherlv_9, grammarAccess.getBinOpAccess().getHyphenMinusKeyword_1_8());
    }

    |	otherlv_10='++' 
    {
    	newLeafNode(otherlv_10, grammarAccess.getBinOpAccess().getPlusSignPlusSignKeyword_1_9());
    }

    |	otherlv_11='<:' 
    {
    	newLeafNode(otherlv_11, grammarAccess.getBinOpAccess().getLessThanSignColonKeyword_1_10());
    }

    |	otherlv_12=':>' 
    {
    	newLeafNode(otherlv_12, grammarAccess.getBinOpAccess().getColonGreaterThanSignKeyword_1_11());
    }

    |(
(
		{ 
	        newCompositeNode(grammarAccess.getBinOpAccess().getDotDotParserRuleCall_1_12_0()); 
	    }
		lv_dot_13_0=ruleDot		{
	        if ($current==null) {
	            $current = createModelElementForParent(grammarAccess.getBinOpRule());
	        }
       		set(
       			$current, 
       			"dot",
        		lv_dot_13_0, 
        		"Dot");
	        afterParserOrEnumRuleCall();
	    }

)
)
    |	otherlv_14='<<' 
    {
    	newLeafNode(otherlv_14, grammarAccess.getBinOpAccess().getLessThanSignLessThanSignKeyword_1_13());
    }

    |	otherlv_15='>>' 
    {
    	newLeafNode(otherlv_15, grammarAccess.getBinOpAccess().getGreaterThanSignGreaterThanSignKeyword_1_14());
    }

    |	otherlv_16='>>>' 
    {
    	newLeafNode(otherlv_16, grammarAccess.getBinOpAccess().getGreaterThanSignGreaterThanSignGreaterThanSignKeyword_1_15());
    }
))
;





// Entry rule entryRuleUnOp
entryRuleUnOp returns [EObject current=null] 
	:
	{ newCompositeNode(grammarAccess.getUnOpRule()); }
	 iv_ruleUnOp=ruleUnOp 
	 { $current=$iv_ruleUnOp.current; } 
	 EOF 
;

// Rule UnOp
ruleUnOp returns [EObject current=null] 
    @init { enterRule(); 
    }
    @after { leaveRule(); }:
((
	{ 
	  /* */ 
	}
    {
        $current = forceCreateModelElement(
            grammarAccess.getUnOpAccess().getUnOpAction_0(),
            $current);
    }
)(	otherlv_1='not' 
    {
    	newLeafNode(otherlv_1, grammarAccess.getUnOpAccess().getNotKeyword_1_0());
    }

    |	otherlv_2='set' 
    {
    	newLeafNode(otherlv_2, grammarAccess.getUnOpAccess().getSetKeyword_1_1());
    }

    |	otherlv_3='seq' 
    {
    	newLeafNode(otherlv_3, grammarAccess.getUnOpAccess().getSeqKeyword_1_2());
    }

    |(
(
(
		lv_op_4_1=	'!' 
    {
        newLeafNode(lv_op_4_1, grammarAccess.getUnOpAccess().getOpExclamationMarkKeyword_1_3_0_0());
    }
 
	    {
	        if ($current==null) {
	            $current = createModelElement(grammarAccess.getUnOpRule());
	        }
       		setWithLastConsumed($current, "op", lv_op_4_1, null);
	    }

    |		lv_op_4_2=	'#' 
    {
        newLeafNode(lv_op_4_2, grammarAccess.getUnOpAccess().getOpNumberSignKeyword_1_3_0_1());
    }
 
	    {
	        if ($current==null) {
	            $current = createModelElement(grammarAccess.getUnOpRule());
	        }
       		setWithLastConsumed($current, "op", lv_op_4_2, null);
	    }

    |		lv_op_4_3=	'~' 
    {
        newLeafNode(lv_op_4_3, grammarAccess.getUnOpAccess().getOpTildeKeyword_1_3_0_2());
    }
 
	    {
	        if ($current==null) {
	            $current = createModelElement(grammarAccess.getUnOpRule());
	        }
       		setWithLastConsumed($current, "op", lv_op_4_3, null);
	    }

    |		lv_op_4_4=	'*' 
    {
        newLeafNode(lv_op_4_4, grammarAccess.getUnOpAccess().getOpAsteriskKeyword_1_3_0_3());
    }
 
	    {
	        if ($current==null) {
	            $current = createModelElement(grammarAccess.getUnOpRule());
	        }
       		setWithLastConsumed($current, "op", lv_op_4_4, null);
	    }

    |		lv_op_4_5=	'^' 
    {
        newLeafNode(lv_op_4_5, grammarAccess.getUnOpAccess().getOpCircumflexAccentKeyword_1_3_0_4());
    }
 
	    {
	        if ($current==null) {
	            $current = createModelElement(grammarAccess.getUnOpRule());
	        }
       		setWithLastConsumed($current, "op", lv_op_4_5, null);
	    }

)

)
)))
;





// Entry rule entryRuleCommonQuantUnOp
entryRuleCommonQuantUnOp returns [EObject current=null] 
	:
	{ newCompositeNode(grammarAccess.getCommonQuantUnOpRule()); }
	 iv_ruleCommonQuantUnOp=ruleCommonQuantUnOp 
	 { $current=$iv_ruleCommonQuantUnOp.current; } 
	 EOF 
;

// Rule CommonQuantUnOp
ruleCommonQuantUnOp returns [EObject current=null] 
    @init { enterRule(); 
    }
    @after { leaveRule(); }:
((
	{ 
	  /* */ 
	}
    {
        $current = forceCreateModelElement(
            grammarAccess.getCommonQuantUnOpAccess().getCommonQuantUnOpAction_0(),
            $current);
    }
)(	otherlv_1='no' 
    {
    	newLeafNode(otherlv_1, grammarAccess.getCommonQuantUnOpAccess().getNoKeyword_1_0());
    }

    |	otherlv_2='some' 
    {
    	newLeafNode(otherlv_2, grammarAccess.getCommonQuantUnOpAccess().getSomeKeyword_1_1());
    }

    |	otherlv_3='lone' 
    {
    	newLeafNode(otherlv_3, grammarAccess.getCommonQuantUnOpAccess().getLoneKeyword_1_2());
    }

    |	otherlv_4='one' 
    {
    	newLeafNode(otherlv_4, grammarAccess.getCommonQuantUnOpAccess().getOneKeyword_1_3());
    }
))
;





// Entry rule entryRuleCompareOp
entryRuleCompareOp returns [String current=null] 
	:
	{ newCompositeNode(grammarAccess.getCompareOpRule()); } 
	 iv_ruleCompareOp=ruleCompareOp 
	 { $current=$iv_ruleCompareOp.current.getText(); }  
	 EOF 
;

// Rule CompareOp
ruleCompareOp returns [AntlrDatatypeRuleToken current=new AntlrDatatypeRuleToken()] 
    @init { enterRule(); 
    }
    @after { leaveRule(); }:
(
	kw='=' 
    {
        $current.merge(kw);
        newLeafNode(kw, grammarAccess.getCompareOpAccess().getEqualsSignKeyword_0()); 
    }

    |
	kw='in' 
    {
        $current.merge(kw);
        newLeafNode(kw, grammarAccess.getCompareOpAccess().getInKeyword_1()); 
    }

    |
	kw='<' 
    {
        $current.merge(kw);
        newLeafNode(kw, grammarAccess.getCompareOpAccess().getLessThanSignKeyword_2()); 
    }

    |
	kw='>' 
    {
        $current.merge(kw);
        newLeafNode(kw, grammarAccess.getCompareOpAccess().getGreaterThanSignKeyword_3()); 
    }

    |
	kw='=<' 
    {
        $current.merge(kw);
        newLeafNode(kw, grammarAccess.getCompareOpAccess().getEqualsSignLessThanSignKeyword_4()); 
    }

    |
	kw='<=' 
    {
        $current.merge(kw);
        newLeafNode(kw, grammarAccess.getCompareOpAccess().getLessThanSignEqualsSignKeyword_5()); 
    }

    |
	kw='>=' 
    {
        $current.merge(kw);
        newLeafNode(kw, grammarAccess.getCompareOpAccess().getGreaterThanSignEqualsSignKeyword_6()); 
    }
)
    ;





// Entry rule entryRuleArrowOp
entryRuleArrowOp returns [EObject current=null] 
	:
	{ newCompositeNode(grammarAccess.getArrowOpRule()); }
	 iv_ruleArrowOp=ruleArrowOp 
	 { $current=$iv_ruleArrowOp.current; } 
	 EOF 
;

// Rule ArrowOp
ruleArrowOp returns [EObject current=null] 
    @init { enterRule(); 
    }
    @after { leaveRule(); }:
((	otherlv_0='some' 
    {
    	newLeafNode(otherlv_0, grammarAccess.getArrowOpAccess().getSomeKeyword_0_0());
    }

    |	otherlv_1='one' 
    {
    	newLeafNode(otherlv_1, grammarAccess.getArrowOpAccess().getOneKeyword_0_1());
    }

    |	otherlv_2='lone' 
    {
    	newLeafNode(otherlv_2, grammarAccess.getArrowOpAccess().getLoneKeyword_0_2());
    }

    |	otherlv_3='set' 
    {
    	newLeafNode(otherlv_3, grammarAccess.getArrowOpAccess().getSetKeyword_0_3());
    }
)?(
(
		lv_arrow_4_0=	'->' 
    {
        newLeafNode(lv_arrow_4_0, grammarAccess.getArrowOpAccess().getArrowHyphenMinusGreaterThanSignKeyword_1_0());
    }
 
	    {
	        if ($current==null) {
	            $current = createModelElement(grammarAccess.getArrowOpRule());
	        }
       		setWithLastConsumed($current, "arrow", lv_arrow_4_0, "->");
	    }

)
))
;





// Entry rule entryRuleBlock
entryRuleBlock returns [EObject current=null] 
	:
	{ newCompositeNode(grammarAccess.getBlockRule()); }
	 iv_ruleBlock=ruleBlock 
	 { $current=$iv_ruleBlock.current; } 
	 EOF 
;

// Rule Block
ruleBlock returns [EObject current=null] 
    @init { enterRule(); 
    }
    @after { leaveRule(); }:
((
(
		{ 
	        newCompositeNode(grammarAccess.getBlockAccess().getLeftCLeftCurlyBracketParserRuleCall_0_0()); 
	    }
		lv_leftC_0_0=ruleLeftCurlyBracket		{
	        if ($current==null) {
	            $current = createModelElementForParent(grammarAccess.getBlockRule());
	        }
       		set(
       			$current, 
       			"leftC",
        		lv_leftC_0_0, 
        		"LeftCurlyBracket");
	        afterParserOrEnumRuleCall();
	    }

)
)(
(
		{ 
	        newCompositeNode(grammarAccess.getBlockAccess().getExprExpressionParserRuleCall_1_0()); 
	    }
		lv_expr_1_0=ruleExpression		{
	        if ($current==null) {
	            $current = createModelElementForParent(grammarAccess.getBlockRule());
	        }
       		add(
       			$current, 
       			"expr",
        		lv_expr_1_0, 
        		"Expression");
	        afterParserOrEnumRuleCall();
	    }

)
)*(
(
		{ 
	        newCompositeNode(grammarAccess.getBlockAccess().getRightCRightCurlyBracketParserRuleCall_2_0()); 
	    }
		lv_rightC_2_0=ruleRightCurlyBracket		{
	        if ($current==null) {
	            $current = createModelElementForParent(grammarAccess.getBlockRule());
	        }
       		set(
       			$current, 
       			"rightC",
        		lv_rightC_2_0, 
        		"RightCurlyBracket");
	        afterParserOrEnumRuleCall();
	    }

)
))
;





// Entry rule entryRuleBlockOrBar
entryRuleBlockOrBar returns [EObject current=null] 
	:
	{ newCompositeNode(grammarAccess.getBlockOrBarRule()); }
	 iv_ruleBlockOrBar=ruleBlockOrBar 
	 { $current=$iv_ruleBlockOrBar.current; } 
	 EOF 
;

// Rule BlockOrBar
ruleBlockOrBar returns [EObject current=null] 
    @init { enterRule(); 
    }
    @after { leaveRule(); }:
((
(
		{ 
	        newCompositeNode(grammarAccess.getBlockOrBarAccess().getBlockBlockParserRuleCall_0_0()); 
	    }
		lv_block_0_0=ruleBlock		{
	        if ($current==null) {
	            $current = createModelElementForParent(grammarAccess.getBlockOrBarRule());
	        }
       		set(
       			$current, 
       			"block",
        		lv_block_0_0, 
        		"Block");
	        afterParserOrEnumRuleCall();
	    }

)
)
    |(	otherlv_1='|' 
    {
    	newLeafNode(otherlv_1, grammarAccess.getBlockOrBarAccess().getVerticalLineKeyword_1_0());
    }
(
(
		{ 
	        newCompositeNode(grammarAccess.getBlockOrBarAccess().getExprExpressionParserRuleCall_1_1_0()); 
	    }
		lv_expr_2_0=ruleExpression		{
	        if ($current==null) {
	            $current = createModelElementForParent(grammarAccess.getBlockOrBarRule());
	        }
       		set(
       			$current, 
       			"expr",
        		lv_expr_2_0, 
        		"Expression");
	        afterParserOrEnumRuleCall();
	    }

)
)))
;







// Entry rule entryRuleOpenName
entryRuleOpenName returns [EObject current=null] 
	:
	{ newCompositeNode(grammarAccess.getOpenNameRule()); }
	 iv_ruleOpenName=ruleOpenName 
	 { $current=$iv_ruleOpenName.current; } 
	 EOF 
;

// Rule OpenName
ruleOpenName returns [EObject current=null] 
    @init { enterRule(); 
    }
    @after { leaveRule(); }:
(	otherlv_0='open' 
    {
    	newLeafNode(otherlv_0, grammarAccess.getOpenNameAccess().getOpenKeyword_0());
    }
(
(
		{ 
	        newCompositeNode(grammarAccess.getOpenNameAccess().getImportURINameParserRuleCall_1_0()); 
	    }
		lv_importURI_1_0=ruleName		{
	        if ($current==null) {
	            $current = createModelElementForParent(grammarAccess.getOpenNameRule());
	        }
       		set(
       			$current, 
       			"importURI",
        		lv_importURI_1_0, 
        		"Name");
	        afterParserOrEnumRuleCall();
	    }

)
))
;





// Entry rule entryRuleFactName
entryRuleFactName returns [EObject current=null] 
	:
	{ newCompositeNode(grammarAccess.getFactNameRule()); }
	 iv_ruleFactName=ruleFactName 
	 { $current=$iv_ruleFactName.current; } 
	 EOF 
;

// Rule FactName
ruleFactName returns [EObject current=null] 
    @init { enterRule(); 
    }
    @after { leaveRule(); }:
((
	{ 
	  /* */ 
	}
    {
        $current = forceCreateModelElement(
            grammarAccess.getFactNameAccess().getFactNameAction_0(),
            $current);
    }
)	otherlv_1='fact' 
    {
    	newLeafNode(otherlv_1, grammarAccess.getFactNameAccess().getFactKeyword_1());
    }
(
(
		{ 
	        newCompositeNode(grammarAccess.getFactNameAccess().getNameNameParserRuleCall_2_0()); 
	    }
		lv_name_2_0=ruleName		{
	        if ($current==null) {
	            $current = createModelElementForParent(grammarAccess.getFactNameRule());
	        }
       		set(
       			$current, 
       			"name",
        		lv_name_2_0, 
        		"Name");
	        afterParserOrEnumRuleCall();
	    }

)
)?)
;





// Entry rule entryRuleAssertionName
entryRuleAssertionName returns [EObject current=null] 
	:
	{ newCompositeNode(grammarAccess.getAssertionNameRule()); }
	 iv_ruleAssertionName=ruleAssertionName 
	 { $current=$iv_ruleAssertionName.current; } 
	 EOF 
;

// Rule AssertionName
ruleAssertionName returns [EObject current=null] 
    @init { enterRule(); 
    }
    @after { leaveRule(); }:
((
	{ 
	  /* */ 
	}
    {
        $current = forceCreateModelElement(
            grammarAccess.getAssertionNameAccess().getAssertionNameAction_0(),
            $current);
    }
)	otherlv_1='assert' 
    {
    	newLeafNode(otherlv_1, grammarAccess.getAssertionNameAccess().getAssertKeyword_1());
    }
(
(
		{ 
	        newCompositeNode(grammarAccess.getAssertionNameAccess().getNameNameParserRuleCall_2_0()); 
	    }
		lv_name_2_0=ruleName		{
	        if ($current==null) {
	            $current = createModelElementForParent(grammarAccess.getAssertionNameRule());
	        }
       		set(
       			$current, 
       			"name",
        		lv_name_2_0, 
        		"Name");
	        afterParserOrEnumRuleCall();
	    }

)
)?)
;





// Entry rule entryRuleFunctionName
entryRuleFunctionName returns [EObject current=null] 
	:
	{ newCompositeNode(grammarAccess.getFunctionNameRule()); }
	 iv_ruleFunctionName=ruleFunctionName 
	 { $current=$iv_ruleFunctionName.current; } 
	 EOF 
;

// Rule FunctionName
ruleFunctionName returns [EObject current=null] 
    @init { enterRule(); 
    }
    @after { leaveRule(); }:
(
(
		{ 
	        newCompositeNode(grammarAccess.getFunctionNameAccess().getNameNameParserRuleCall_0()); 
	    }
		lv_name_0_0=ruleName		{
	        if ($current==null) {
	            $current = createModelElementForParent(grammarAccess.getFunctionNameRule());
	        }
       		set(
       			$current, 
       			"name",
        		lv_name_0_0, 
        		"Name");
	        afterParserOrEnumRuleCall();
	    }

)
)
;





// Entry rule entryRuleFunctionNamewParam
entryRuleFunctionNamewParam returns [EObject current=null] 
	:
	{ newCompositeNode(grammarAccess.getFunctionNamewParamRule()); }
	 iv_ruleFunctionNamewParam=ruleFunctionNamewParam 
	 { $current=$iv_ruleFunctionNamewParam.current; } 
	 EOF 
;

// Rule FunctionNamewParam
ruleFunctionNamewParam returns [EObject current=null] 
    @init { enterRule(); 
    }
    @after { leaveRule(); }:
(
(
		{ 
	        newCompositeNode(grammarAccess.getFunctionNamewParamAccess().getNameNameParserRuleCall_0()); 
	    }
		lv_name_0_0=ruleName		{
	        if ($current==null) {
	            $current = createModelElementForParent(grammarAccess.getFunctionNamewParamRule());
	        }
       		set(
       			$current, 
       			"name",
        		lv_name_0_0, 
        		"Name");
	        afterParserOrEnumRuleCall();
	    }

)
)
;





// Entry rule entryRulePredicateName
entryRulePredicateName returns [EObject current=null] 
	:
	{ newCompositeNode(grammarAccess.getPredicateNameRule()); }
	 iv_rulePredicateName=rulePredicateName 
	 { $current=$iv_rulePredicateName.current; } 
	 EOF 
;

// Rule PredicateName
rulePredicateName returns [EObject current=null] 
    @init { enterRule(); 
    }
    @after { leaveRule(); }:
(
(
		{ 
	        newCompositeNode(grammarAccess.getPredicateNameAccess().getNameNameParserRuleCall_0()); 
	    }
		lv_name_0_0=ruleName		{
	        if ($current==null) {
	            $current = createModelElementForParent(grammarAccess.getPredicateNameRule());
	        }
       		set(
       			$current, 
       			"name",
        		lv_name_0_0, 
        		"Name");
	        afterParserOrEnumRuleCall();
	    }

)
)
;





// Entry rule entryRuleAlias
entryRuleAlias returns [EObject current=null] 
	:
	{ newCompositeNode(grammarAccess.getAliasRule()); }
	 iv_ruleAlias=ruleAlias 
	 { $current=$iv_ruleAlias.current; } 
	 EOF 
;

// Rule Alias
ruleAlias returns [EObject current=null] 
    @init { enterRule(); 
    }
    @after { leaveRule(); }:
(
(
		{ 
	        newCompositeNode(grammarAccess.getAliasAccess().getNameNameAliasParserRuleCall_0()); 
	    }
		lv_name_0_0=ruleNameAlias		{
	        if ($current==null) {
	            $current = createModelElementForParent(grammarAccess.getAliasRule());
	        }
       		set(
       			$current, 
       			"name",
        		lv_name_0_0, 
        		"NameAlias");
	        afterParserOrEnumRuleCall();
	    }

)
)
;





// Entry rule entryRuleEnumName
entryRuleEnumName returns [EObject current=null] 
	:
	{ newCompositeNode(grammarAccess.getEnumNameRule()); }
	 iv_ruleEnumName=ruleEnumName 
	 { $current=$iv_ruleEnumName.current; } 
	 EOF 
;

// Rule EnumName
ruleEnumName returns [EObject current=null] 
    @init { enterRule(); 
    }
    @after { leaveRule(); }:
(	otherlv_0='enum' 
    {
    	newLeafNode(otherlv_0, grammarAccess.getEnumNameAccess().getEnumKeyword_0());
    }
(
(
		{ 
	        newCompositeNode(grammarAccess.getEnumNameAccess().getNameNameParserRuleCall_1_0()); 
	    }
		lv_name_1_0=ruleName		{
	        if ($current==null) {
	            $current = createModelElementForParent(grammarAccess.getEnumNameRule());
	        }
       		set(
       			$current, 
       			"name",
        		lv_name_1_0, 
        		"Name");
	        afterParserOrEnumRuleCall();
	    }

)
))
;





// Entry rule entryRuleEnumPropertyName
entryRuleEnumPropertyName returns [EObject current=null] 
	:
	{ newCompositeNode(grammarAccess.getEnumPropertyNameRule()); }
	 iv_ruleEnumPropertyName=ruleEnumPropertyName 
	 { $current=$iv_ruleEnumPropertyName.current; } 
	 EOF 
;

// Rule EnumPropertyName
ruleEnumPropertyName returns [EObject current=null] 
    @init { enterRule(); 
    }
    @after { leaveRule(); }:
(
(
		{ 
	        newCompositeNode(grammarAccess.getEnumPropertyNameAccess().getNameNameParserRuleCall_0()); 
	    }
		lv_name_0_0=ruleName		{
	        if ($current==null) {
	            $current = createModelElementForParent(grammarAccess.getEnumPropertyNameRule());
	        }
       		set(
       			$current, 
       			"name",
        		lv_name_0_0, 
        		"Name");
	        afterParserOrEnumRuleCall();
	    }

)
)
;





// Entry rule entryRuleLetName
entryRuleLetName returns [EObject current=null] 
	:
	{ newCompositeNode(grammarAccess.getLetNameRule()); }
	 iv_ruleLetName=ruleLetName 
	 { $current=$iv_ruleLetName.current; } 
	 EOF 
;

// Rule LetName
ruleLetName returns [EObject current=null] 
    @init { enterRule(); 
    }
    @after { leaveRule(); }:
(	otherlv_0='let' 
    {
    	newLeafNode(otherlv_0, grammarAccess.getLetNameAccess().getLetKeyword_0());
    }
(
(
		{ 
	        newCompositeNode(grammarAccess.getLetNameAccess().getNameNameParserRuleCall_1_0()); 
	    }
		lv_name_1_0=ruleName		{
	        if ($current==null) {
	            $current = createModelElementForParent(grammarAccess.getLetNameRule());
	        }
       		set(
       			$current, 
       			"name",
        		lv_name_1_0, 
        		"Name");
	        afterParserOrEnumRuleCall();
	    }

)
))
;





// Entry rule entryRuleSignatureName
entryRuleSignatureName returns [EObject current=null] 
	:
	{ newCompositeNode(grammarAccess.getSignatureNameRule()); }
	 iv_ruleSignatureName=ruleSignatureName 
	 { $current=$iv_ruleSignatureName.current; } 
	 EOF 
;

// Rule SignatureName
ruleSignatureName returns [EObject current=null] 
    @init { enterRule(); 
    }
    @after { leaveRule(); }:
(
(
		{ 
	        newCompositeNode(grammarAccess.getSignatureNameAccess().getNameNameParserRuleCall_0()); 
	    }
		lv_name_0_0=ruleName		{
	        if ($current==null) {
	            $current = createModelElementForParent(grammarAccess.getSignatureNameRule());
	        }
       		set(
       			$current, 
       			"name",
        		lv_name_0_0, 
        		"Name");
	        afterParserOrEnumRuleCall();
	    }

)
)
;





// Entry rule entryRulePropertyName
entryRulePropertyName returns [EObject current=null] 
	:
	{ newCompositeNode(grammarAccess.getPropertyNameRule()); }
	 iv_rulePropertyName=rulePropertyName 
	 { $current=$iv_rulePropertyName.current; } 
	 EOF 
;

// Rule PropertyName
rulePropertyName returns [EObject current=null] 
    @init { enterRule(); 
    }
    @after { leaveRule(); }:
(
(
		{ 
	        newCompositeNode(grammarAccess.getPropertyNameAccess().getNameNameParserRuleCall_0()); 
	    }
		lv_name_0_0=ruleName		{
	        if ($current==null) {
	            $current = createModelElementForParent(grammarAccess.getPropertyNameRule());
	        }
       		set(
       			$current, 
       			"name",
        		lv_name_0_0, 
        		"Name");
	        afterParserOrEnumRuleCall();
	    }

)
)
;





// Entry rule entryRuleExactlyName
entryRuleExactlyName returns [EObject current=null] 
	:
	{ newCompositeNode(grammarAccess.getExactlyNameRule()); }
	 iv_ruleExactlyName=ruleExactlyName 
	 { $current=$iv_ruleExactlyName.current; } 
	 EOF 
;

// Rule ExactlyName
ruleExactlyName returns [EObject current=null] 
    @init { enterRule(); 
    }
    @after { leaveRule(); }:
(
(
		{ 
	        newCompositeNode(grammarAccess.getExactlyNameAccess().getNameNameParserRuleCall_0()); 
	    }
		lv_name_0_0=ruleName		{
	        if ($current==null) {
	            $current = createModelElementForParent(grammarAccess.getExactlyNameRule());
	        }
       		set(
       			$current, 
       			"name",
        		lv_name_0_0, 
        		"Name");
	        afterParserOrEnumRuleCall();
	    }

)
)
;





// Entry rule entryRuleAsName
entryRuleAsName returns [EObject current=null] 
	:
	{ newCompositeNode(grammarAccess.getAsNameRule()); }
	 iv_ruleAsName=ruleAsName 
	 { $current=$iv_ruleAsName.current; } 
	 EOF 
;

// Rule AsName
ruleAsName returns [EObject current=null] 
    @init { enterRule(); 
    }
    @after { leaveRule(); }:
(
(
		lv_name_0_0=RULE_ID
		{
			newLeafNode(lv_name_0_0, grammarAccess.getAsNameAccess().getNameIDTerminalRuleCall_0()); 
		}
		{
	        if ($current==null) {
	            $current = createModelElement(grammarAccess.getAsNameRule());
	        }
       		setWithLastConsumed(
       			$current, 
       			"name",
        		lv_name_0_0, 
        		"ID");
	    }

)
)
;





// Entry rule entryRuleNameAlias
entryRuleNameAlias returns [String current=null] 
	:
	{ newCompositeNode(grammarAccess.getNameAliasRule()); } 
	 iv_ruleNameAlias=ruleNameAlias 
	 { $current=$iv_ruleNameAlias.current.getText(); }  
	 EOF 
;

// Rule NameAlias
ruleNameAlias returns [AntlrDatatypeRuleToken current=new AntlrDatatypeRuleToken()] 
    @init { enterRule(); 
    }
    @after { leaveRule(); }:
(    this_ID_0=RULE_ID    {
		$current.merge(this_ID_0);
    }

    { 
    newLeafNode(this_ID_0, grammarAccess.getNameAliasAccess().getIDTerminalRuleCall_0()); 
    }
(
	kw='/' 
    {
        $current.merge(kw);
        newLeafNode(kw, grammarAccess.getNameAliasAccess().getSolidusKeyword_1_0()); 
    }
    this_ID_2=RULE_ID    {
		$current.merge(this_ID_2);
    }

    { 
    newLeafNode(this_ID_2, grammarAccess.getNameAliasAccess().getIDTerminalRuleCall_1_1()); 
    }
)*)
    ;





// Entry rule entryRuleName
entryRuleName returns [String current=null] 
	:
	{ newCompositeNode(grammarAccess.getNameRule()); } 
	 iv_ruleName=ruleName 
	 { $current=$iv_ruleName.current.getText(); }  
	 EOF 
;

// Rule Name
ruleName returns [AntlrDatatypeRuleToken current=new AntlrDatatypeRuleToken()] 
    @init { enterRule(); 
    }
    @after { leaveRule(); }:
((
	kw='this' 
    {
        $current.merge(kw);
        newLeafNode(kw, grammarAccess.getNameAccess().getThisKeyword_0_0()); 
    }

    |    this_ID_1=RULE_ID    {
		$current.merge(this_ID_1);
    }

    { 
    newLeafNode(this_ID_1, grammarAccess.getNameAccess().getIDTerminalRuleCall_0_1()); 
    }
)(
	kw='/' 
    {
        $current.merge(kw);
        newLeafNode(kw, grammarAccess.getNameAccess().getSolidusKeyword_1_0()); 
    }
    this_ID_3=RULE_ID    {
		$current.merge(this_ID_3);
    }

    { 
    newLeafNode(this_ID_3, grammarAccess.getNameAccess().getIDTerminalRuleCall_1_1()); 
    }
)*)
    ;





// Entry rule entryRuleReferencesName
entryRuleReferencesName returns [EObject current=null] 
	:
	{ newCompositeNode(grammarAccess.getReferencesNameRule()); }
	 iv_ruleReferencesName=ruleReferencesName 
	 { $current=$iv_ruleReferencesName.current; } 
	 EOF 
;

// Rule ReferencesName
ruleReferencesName returns [EObject current=null] 
    @init { enterRule(); 
    }
    @after { leaveRule(); }:
(
	{ 
	  /* */ 
	}
    { 
        newCompositeNode(grammarAccess.getReferencesNameAccess().getFactNameParserRuleCall_0()); 
    }
    this_FactName_0=ruleFactName
    { 
        $current = $this_FactName_0.current; 
        afterParserOrEnumRuleCall();
    }

    |
	{ 
	  /* */ 
	}
    { 
        newCompositeNode(grammarAccess.getReferencesNameAccess().getFunctionNameParserRuleCall_1()); 
    }
    this_FunctionName_1=ruleFunctionName
    { 
        $current = $this_FunctionName_1.current; 
        afterParserOrEnumRuleCall();
    }

    |
	{ 
	  /* */ 
	}
    { 
        newCompositeNode(grammarAccess.getReferencesNameAccess().getFunctionNamewParamParserRuleCall_2()); 
    }
    this_FunctionNamewParam_2=ruleFunctionNamewParam
    { 
        $current = $this_FunctionNamewParam_2.current; 
        afterParserOrEnumRuleCall();
    }

    |
	{ 
	  /* */ 
	}
    { 
        newCompositeNode(grammarAccess.getReferencesNameAccess().getEnumNameParserRuleCall_3()); 
    }
    this_EnumName_3=ruleEnumName
    { 
        $current = $this_EnumName_3.current; 
        afterParserOrEnumRuleCall();
    }

    |
	{ 
	  /* */ 
	}
    { 
        newCompositeNode(grammarAccess.getReferencesNameAccess().getEnumPropertyNameParserRuleCall_4()); 
    }
    this_EnumPropertyName_4=ruleEnumPropertyName
    { 
        $current = $this_EnumPropertyName_4.current; 
        afterParserOrEnumRuleCall();
    }

    |
	{ 
	  /* */ 
	}
    { 
        newCompositeNode(grammarAccess.getReferencesNameAccess().getSignatureNameParserRuleCall_5()); 
    }
    this_SignatureName_5=ruleSignatureName
    { 
        $current = $this_SignatureName_5.current; 
        afterParserOrEnumRuleCall();
    }

    |
	{ 
	  /* */ 
	}
    { 
        newCompositeNode(grammarAccess.getReferencesNameAccess().getPropertyNameParserRuleCall_6()); 
    }
    this_PropertyName_6=rulePropertyName
    { 
        $current = $this_PropertyName_6.current; 
        afterParserOrEnumRuleCall();
    }

    |
	{ 
	  /* */ 
	}
    { 
        newCompositeNode(grammarAccess.getReferencesNameAccess().getExactlyNameParserRuleCall_7()); 
    }
    this_ExactlyName_7=ruleExactlyName
    { 
        $current = $this_ExactlyName_7.current; 
        afterParserOrEnumRuleCall();
    }

    |
	{ 
	  /* */ 
	}
    { 
        newCompositeNode(grammarAccess.getReferencesNameAccess().getLetNameParserRuleCall_8()); 
    }
    this_LetName_8=ruleLetName
    { 
        $current = $this_LetName_8.current; 
        afterParserOrEnumRuleCall();
    }

    |
	{ 
	  /* */ 
	}
    { 
        newCompositeNode(grammarAccess.getReferencesNameAccess().getPredicateNameParserRuleCall_9()); 
    }
    this_PredicateName_9=rulePredicateName
    { 
        $current = $this_PredicateName_9.current; 
        afterParserOrEnumRuleCall();
    }
)
;





// Entry rule entryRuleReferencesSig
entryRuleReferencesSig returns [EObject current=null] 
	:
	{ newCompositeNode(grammarAccess.getReferencesSigRule()); }
	 iv_ruleReferencesSig=ruleReferencesSig 
	 { $current=$iv_ruleReferencesSig.current; } 
	 EOF 
;

// Rule ReferencesSig
ruleReferencesSig returns [EObject current=null] 
    @init { enterRule(); 
    }
    @after { leaveRule(); }:
((
	{ 
	  /* */ 
	}
    {
        $current = forceCreateModelElement(
            grammarAccess.getReferencesSigAccess().getReferencesSigAction_0(),
            $current);
    }
)(((((
(
		{ 
		  /* */ 
		}
		{
			if ($current==null) {
	            $current = createModelElement(grammarAccess.getReferencesSigRule());
	        }
        }
	otherlv_1=RULE_ID
	{
		newLeafNode(otherlv_1, grammarAccess.getReferencesSigAccess().getAsnameAsNameCrossReference_1_0_0_0_0_0()); 
	}

)
)
    |	otherlv_2='this' 
    {
    	newLeafNode(otherlv_2, grammarAccess.getReferencesSigAccess().getThisKeyword_1_0_0_0_1());
    }
)	otherlv_3='/' 
    {
    	newLeafNode(otherlv_3, grammarAccess.getReferencesSigAccess().getSolidusKeyword_1_0_0_1());
    }
)?(
(
		{ 
		  /* */ 
		}
		{
			if ($current==null) {
	            $current = createModelElement(grammarAccess.getReferencesSigRule());
	        }
        }
	otherlv_4=RULE_ID
	{
		newLeafNode(otherlv_4, grammarAccess.getReferencesSigAccess().getNameRefSignatureNameCrossReference_1_0_1_0()); 
	}

)
))
    |	otherlv_5='univ' 
    {
    	newLeafNode(otherlv_5, grammarAccess.getReferencesSigAccess().getUnivKeyword_1_1());
    }

    |	otherlv_6='Int' 
    {
    	newLeafNode(otherlv_6, grammarAccess.getReferencesSigAccess().getIntKeyword_1_2());
    }

    |	otherlv_7='seq/Int' 
    {
    	newLeafNode(otherlv_7, grammarAccess.getReferencesSigAccess().getSeqIntKeyword_1_3());
    }
))
;





// Entry rule entryRuleRef
entryRuleRef returns [EObject current=null] 
	:
	{ newCompositeNode(grammarAccess.getRefRule()); }
	 iv_ruleRef=ruleRef 
	 { $current=$iv_ruleRef.current; } 
	 EOF 
;

// Rule Ref
ruleRef returns [EObject current=null] 
    @init { enterRule(); 
    }
    @after { leaveRule(); }:
((
	{ 
	  /* */ 
	}
    {
        $current = forceCreateModelElement(
            grammarAccess.getRefAccess().getRefAction_0(),
            $current);
    }
)((
(
		{ 
		  /* */ 
		}
		{
			if ($current==null) {
	            $current = createModelElement(grammarAccess.getRefRule());
	        }
        }
	otherlv_1=RULE_ID
	{
		newLeafNode(otherlv_1, grammarAccess.getRefAccess().getNameRefReferencesNameCrossReference_1_0_0()); 
	}

)
)
    |	otherlv_2='univ' 
    {
    	newLeafNode(otherlv_2, grammarAccess.getRefAccess().getUnivKeyword_1_1());
    }

    |	otherlv_3='Int' 
    {
    	newLeafNode(otherlv_3, grammarAccess.getRefAccess().getIntKeyword_1_2());
    }

    |	otherlv_4='seq/Int' 
    {
    	newLeafNode(otherlv_4, grammarAccess.getRefAccess().getSeqIntKeyword_1_3());
    }
))
;





// Entry rule entryRuleLeftCurlyBracket
entryRuleLeftCurlyBracket returns [EObject current=null] 
	:
	{ newCompositeNode(grammarAccess.getLeftCurlyBracketRule()); }
	 iv_ruleLeftCurlyBracket=ruleLeftCurlyBracket 
	 { $current=$iv_ruleLeftCurlyBracket.current; } 
	 EOF 
;

// Rule LeftCurlyBracket
ruleLeftCurlyBracket returns [EObject current=null] 
    @init { enterRule(); 
    }
    @after { leaveRule(); }:
(
(
		lv_leftCurlyBracket_0_0=	'{' 
    {
        newLeafNode(lv_leftCurlyBracket_0_0, grammarAccess.getLeftCurlyBracketAccess().getLeftCurlyBracketLeftCurlyBracketKeyword_0());
    }
 
	    {
	        if ($current==null) {
	            $current = createModelElement(grammarAccess.getLeftCurlyBracketRule());
	        }
       		setWithLastConsumed($current, "leftCurlyBracket", lv_leftCurlyBracket_0_0, "{");
	    }

)
)
;





// Entry rule entryRuleRightCurlyBracket
entryRuleRightCurlyBracket returns [EObject current=null] 
	:
	{ newCompositeNode(grammarAccess.getRightCurlyBracketRule()); }
	 iv_ruleRightCurlyBracket=ruleRightCurlyBracket 
	 { $current=$iv_ruleRightCurlyBracket.current; } 
	 EOF 
;

// Rule RightCurlyBracket
ruleRightCurlyBracket returns [EObject current=null] 
    @init { enterRule(); 
    }
    @after { leaveRule(); }:
(
(
		lv_rightCurlyBracket_0_0=	'}' 
    {
        newLeafNode(lv_rightCurlyBracket_0_0, grammarAccess.getRightCurlyBracketAccess().getRightCurlyBracketRightCurlyBracketKeyword_0());
    }
 
	    {
	        if ($current==null) {
	            $current = createModelElement(grammarAccess.getRightCurlyBracketRule());
	        }
       		setWithLastConsumed($current, "rightCurlyBracket", lv_rightCurlyBracket_0_0, "}");
	    }

)
)
;





// Entry rule entryRuleDot
entryRuleDot returns [EObject current=null] 
	:
	{ newCompositeNode(grammarAccess.getDotRule()); }
	 iv_ruleDot=ruleDot 
	 { $current=$iv_ruleDot.current; } 
	 EOF 
;

// Rule Dot
ruleDot returns [EObject current=null] 
    @init { enterRule(); 
    }
    @after { leaveRule(); }:
(
(
		lv_dot_0_0=	'.' 
    {
        newLeafNode(lv_dot_0_0, grammarAccess.getDotAccess().getDotFullStopKeyword_0());
    }
 
	    {
	        if ($current==null) {
	            $current = createModelElement(grammarAccess.getDotRule());
	        }
       		setWithLastConsumed($current, "dot", lv_dot_0_0, ".");
	    }

)
)
;





// Entry rule entryRuleComma
entryRuleComma returns [EObject current=null] 
	:
	{ newCompositeNode(grammarAccess.getCommaRule()); }
	 iv_ruleComma=ruleComma 
	 { $current=$iv_ruleComma.current; } 
	 EOF 
;

// Rule Comma
ruleComma returns [EObject current=null] 
    @init { enterRule(); 
    }
    @after { leaveRule(); }:
(
(
		lv_comma_0_0=	',' 
    {
        newLeafNode(lv_comma_0_0, grammarAccess.getCommaAccess().getCommaCommaKeyword_0());
    }
 
	    {
	        if ($current==null) {
	            $current = createModelElement(grammarAccess.getCommaRule());
	        }
       		setWithLastConsumed($current, "comma", lv_comma_0_0, ",");
	    }

)
)
;





// Entry rule entryRuleColon
entryRuleColon returns [EObject current=null] 
	:
	{ newCompositeNode(grammarAccess.getColonRule()); }
	 iv_ruleColon=ruleColon 
	 { $current=$iv_ruleColon.current; } 
	 EOF 
;

// Rule Colon
ruleColon returns [EObject current=null] 
    @init { enterRule(); 
    }
    @after { leaveRule(); }:
(
(
		lv_colon_0_0=	':' 
    {
        newLeafNode(lv_colon_0_0, grammarAccess.getColonAccess().getColonColonKeyword_0());
    }
 
	    {
	        if ($current==null) {
	            $current = createModelElement(grammarAccess.getColonRule());
	        }
       		setWithLastConsumed($current, "colon", lv_colon_0_0, ":");
	    }

)
)
;





// Entry rule entryRuleLeftParenthesis
entryRuleLeftParenthesis returns [EObject current=null] 
	:
	{ newCompositeNode(grammarAccess.getLeftParenthesisRule()); }
	 iv_ruleLeftParenthesis=ruleLeftParenthesis 
	 { $current=$iv_ruleLeftParenthesis.current; } 
	 EOF 
;

// Rule LeftParenthesis
ruleLeftParenthesis returns [EObject current=null] 
    @init { enterRule(); 
    }
    @after { leaveRule(); }:
(
(
		lv_leftParenthesis_0_0=	'(' 
    {
        newLeafNode(lv_leftParenthesis_0_0, grammarAccess.getLeftParenthesisAccess().getLeftParenthesisLeftParenthesisKeyword_0());
    }
 
	    {
	        if ($current==null) {
	            $current = createModelElement(grammarAccess.getLeftParenthesisRule());
	        }
       		setWithLastConsumed($current, "leftParenthesis", lv_leftParenthesis_0_0, "(");
	    }

)
)
;





// Entry rule entryRuleRightParenthesis
entryRuleRightParenthesis returns [EObject current=null] 
	:
	{ newCompositeNode(grammarAccess.getRightParenthesisRule()); }
	 iv_ruleRightParenthesis=ruleRightParenthesis 
	 { $current=$iv_ruleRightParenthesis.current; } 
	 EOF 
;

// Rule RightParenthesis
ruleRightParenthesis returns [EObject current=null] 
    @init { enterRule(); 
    }
    @after { leaveRule(); }:
(
(
		lv_rightParenthesis_0_0=	')' 
    {
        newLeafNode(lv_rightParenthesis_0_0, grammarAccess.getRightParenthesisAccess().getRightParenthesisRightParenthesisKeyword_0());
    }
 
	    {
	        if ($current==null) {
	            $current = createModelElement(grammarAccess.getRightParenthesisRule());
	        }
       		setWithLastConsumed($current, "rightParenthesis", lv_rightParenthesis_0_0, ")");
	    }

)
)
;





// Entry rule entryRuleLeftSquareBracketKeyword
entryRuleLeftSquareBracketKeyword returns [EObject current=null] 
	:
	{ newCompositeNode(grammarAccess.getLeftSquareBracketKeywordRule()); }
	 iv_ruleLeftSquareBracketKeyword=ruleLeftSquareBracketKeyword 
	 { $current=$iv_ruleLeftSquareBracketKeyword.current; } 
	 EOF 
;

// Rule LeftSquareBracketKeyword
ruleLeftSquareBracketKeyword returns [EObject current=null] 
    @init { enterRule(); 
    }
    @after { leaveRule(); }:
(
(
		lv_leftSquareBracketKeyword_0_0=	'[' 
    {
        newLeafNode(lv_leftSquareBracketKeyword_0_0, grammarAccess.getLeftSquareBracketKeywordAccess().getLeftSquareBracketKeywordLeftSquareBracketKeyword_0());
    }
 
	    {
	        if ($current==null) {
	            $current = createModelElement(grammarAccess.getLeftSquareBracketKeywordRule());
	        }
       		setWithLastConsumed($current, "leftSquareBracketKeyword", lv_leftSquareBracketKeyword_0_0, "[");
	    }

)
)
;





// Entry rule entryRuleRightSquareBracketKeyword
entryRuleRightSquareBracketKeyword returns [EObject current=null] 
	:
	{ newCompositeNode(grammarAccess.getRightSquareBracketKeywordRule()); }
	 iv_ruleRightSquareBracketKeyword=ruleRightSquareBracketKeyword 
	 { $current=$iv_ruleRightSquareBracketKeyword.current; } 
	 EOF 
;

// Rule RightSquareBracketKeyword
ruleRightSquareBracketKeyword returns [EObject current=null] 
    @init { enterRule(); 
    }
    @after { leaveRule(); }:
(
(
		lv_rightSquareBracketKeyword_0_0=	']' 
    {
        newLeafNode(lv_rightSquareBracketKeyword_0_0, grammarAccess.getRightSquareBracketKeywordAccess().getRightSquareBracketKeywordRightSquareBracketKeyword_0());
    }
 
	    {
	        if ($current==null) {
	            $current = createModelElement(grammarAccess.getRightSquareBracketKeywordRule());
	        }
       		setWithLastConsumed($current, "rightSquareBracketKeyword", lv_rightSquareBracketKeyword_0_0, "]");
	    }

)
)
;





RULE_NEGATIVE_INTEGER : '-' RULE_INT;

RULE_SL_COMMENT : ('//' ~(('\n'|'\r'))* ('\r'? '\n')?|'--' ( options {greedy=false;} : . )*'\n');

RULE_ID : ('a'..'z'|'A'..'Z'|'_') ('a'..'z'|'A'..'Z'|'_'|'0'..'9')* ('\''|'"')*;

RULE_INT : ('0'..'9')+;

RULE_STRING : ('"' ('\\' ('b'|'t'|'n'|'f'|'r'|'u'|'"'|'\''|'\\')|~(('\\'|'"')))* '"'|'\'' ('\\' ('b'|'t'|'n'|'f'|'r'|'u'|'"'|'\''|'\\')|~(('\\'|'\'')))* '\'');

RULE_ML_COMMENT : '/*' ( options {greedy=false;} : . )*'*/';

RULE_WS : (' '|'\t'|'\r'|'\n')+;

RULE_ANY_OTHER : .;


